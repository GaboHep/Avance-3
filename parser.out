Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPORT
    MAIN
    NEW
    PACKAGE
    PI
    POW
    PRINT
    WHILE
    XCENTAGE

Grammar

Rule 0     S' -> program
Rule 1     program -> repeatLines
Rule 2     value -> INT
Rule 3     value -> FLOAT
Rule 4     value -> STR
Rule 5     value -> ID
Rule 6     repeatLines -> line
Rule 7     repeatLines -> line repeatLines
Rule 8     line -> ID EQUALSVAR value
Rule 9     line -> stamentFor
Rule 10    line -> consulta
Rule 11    line -> push
Rule 12    line -> funcion
Rule 13    line -> array
Rule 14    line -> slice
Rule 15    line -> mathExpProd
Rule 16    line -> CASE INT TWODOTS line
Rule 17    line -> switch
Rule 18    line -> pila
Rule 19    line -> func_declaration
Rule 20    line -> ID EQUALSVAR INT
Rule 21    line -> retorno
Rule 22    line -> declaration
Rule 23    line -> sentence
Rule 24    line -> return
Rule 25    retorno -> ID
Rule 26    retorno -> ID COMMA
Rule 27    retorno -> RETURN retorno
Rule 28    expression -> ID comparator ID
Rule 29    expression -> ID comparator INT
Rule 30    expression -> ID
Rule 31    comparator -> COMPARE
Rule 32    comparator -> MORETHAN
Rule 33    comparator -> MINUSTHAN
Rule 34    operator -> DIVIDE
Rule 35    operator -> MINUS
Rule 36    operator -> PLUS
Rule 37    operator -> TIMES
Rule 38    stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
Rule 39    switch -> SWITCH ID LCURLY repeatLines RCURLY
Rule 40    consulta -> IF expression LCURLY statements RCURLY
Rule 41    consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
Rule 42    statements -> statement
Rule 43    statements -> statement COMMA statements
Rule 44    statement -> ID
Rule 45    number -> INT
Rule 46    number -> FLOAT
Rule 47    array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
Rule 48    elemArray -> number
Rule 49    elemArray -> number COMMA elemArray
Rule 50    slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
Rule 51    elemSlice -> number
Rule 52    elemSlice -> number COMMA elemSlice
Rule 53    pila -> TYPE STACK LBRACKETS RBRACKETS ID
Rule 54    pila -> TYPE STACK INTERFACE LCURLY RCURLY
Rule 55    pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
Rule 56    push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
Rule 57    funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 58    func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
Rule 59    return_types -> ID COMMA ID
Rule 60    return_types -> ID
Rule 61    funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 62    param_list -> param
Rule 63    param_list -> param_list COMMA param
Rule 64    param -> value ID
Rule 65    declaration -> VAR ID ID
Rule 66    declaration -> VAR ID ID EQUALSVAR number
Rule 67    declaration -> VAR ID ID EQUALSVAR STR
Rule 68    mathExp -> number
Rule 69    mathExp -> number operator number
Rule 70    mathExpProd -> mathExp
Rule 71    mathExpProd -> mathExp operator mathExpProd
Rule 72    sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN
Rule 73    sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN
Rule 74    return -> RETURN expression
Rule 75    return -> RETURN INT
Rule 76    return -> RETURN sentence

Terminals, with rules where they appear

APPEND               : 56
CASE                 : 16
COMMA                : 26 43 49 52 56 56 59 63
COMPARE              : 31
DIVIDE               : 34
DOTCOMA              : 38 38
ELSE                 : 41
EQUALS               : 38
EQUALSVAR            : 8 20 47 50 66 67
FLOAT                : 3 46
FMT                  : 72 73
FOR                  : 38
FUNC                 : 56 57 58 61
ID                   : 5 8 20 25 26 28 28 29 30 38 38 38 38 39 44 47 47 50 50 53 55 56 56 56 56 56 57 57 58 59 59 60 61 61 61 64 65 65 66 66 67 67
IF                   : 40 41
IMPORT               : 
INT                  : 2 16 20 29 38 45 47 75
INTERFACE            : 54
LBRACKETS            : 47 50 53 55
LCURLY               : 38 39 40 41 41 47 50 54 55 56 57 58 61
LEN                  : 38
LPAREN               : 38 56 56 57 58 58 61 72 73
MAIN                 : 
MINUS                : 35
MINUSTHAN            : 33 38
MORETHAN             : 32
NEW                  : 
PACKAGE              : 
PERIOD               : 72 73
PI                   : 
PLUS                 : 36 38 38
POW                  : 
PRINT                : 
PRINTF               : 73
PRINTLN              : 72
PUSH                 : 56
RBRACKETS            : 47 50 53 55
RCURLY               : 38 39 40 41 41 47 50 54 55 56 57 58 61
RETURN               : 27 56 57 61 74 75 76
RPAREN               : 38 56 56 57 58 58 61 72 73
STACK                : 53 54 55 56 56
STR                  : 4 67 72 73
STRUCT               : 55
SWITCH               : 39
TIMES                : 37
TWODOTS              : 16
TYPE                 : 53 54 55
VAR                  : 65 66 67
WHILE                : 
XCENTAGE             : 
error                : 

Nonterminals, with rules where they appear

array                : 13
comparator           : 28 29
consulta             : 10
declaration          : 22
elemArray            : 47 49
elemSlice            : 50 52
expression           : 40 41 74
func_declaration     : 19
funcion              : 12
line                 : 6 7 16
mathExp              : 70 71
mathExpProd          : 15 71
number               : 48 49 51 52 66 68 69 69
operator             : 69 71
param                : 62 63
param_list           : 61 63
pila                 : 18
program              : 0
push                 : 11
repeatLines          : 1 7 38 39 57 58 61
retorno              : 21 27
return               : 24
return_types         : 58
sentence             : 23 76
slice                : 14
stamentFor           : 9
statement            : 42 43
statements           : 40 41 41 43
switch               : 17
value                : 8 55 57 64

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    program                        shift and go to state 1
    repeatLines                    shift and go to state 2
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 1

    (0) S' -> program .



state 2

    (1) program -> repeatLines .

    $end            reduce using rule 1 (program -> repeatLines .)


state 3

    (6) repeatLines -> line .
    (7) repeatLines -> line . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 6 (repeatLines -> line .)
    RCURLY          reduce using rule 6 (repeatLines -> line .)
    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

  ! RETURN          [ reduce using rule 6 (repeatLines -> line .) ]

    line                           shift and go to state 3
    repeatLines                    shift and go to state 32
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 4

    (8) line -> ID . EQUALSVAR value
    (20) line -> ID . EQUALSVAR INT
    (47) array -> ID . EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> ID . EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (25) retorno -> ID .
    (26) retorno -> ID . COMMA

    EQUALSVAR       shift and go to state 33
    ID              reduce using rule 25 (retorno -> ID .)
    CASE            reduce using rule 25 (retorno -> ID .)
    FOR             reduce using rule 25 (retorno -> ID .)
    IF              reduce using rule 25 (retorno -> ID .)
    FUNC            reduce using rule 25 (retorno -> ID .)
    SWITCH          reduce using rule 25 (retorno -> ID .)
    TYPE            reduce using rule 25 (retorno -> ID .)
    RETURN          reduce using rule 25 (retorno -> ID .)
    VAR             reduce using rule 25 (retorno -> ID .)
    FMT             reduce using rule 25 (retorno -> ID .)
    INT             reduce using rule 25 (retorno -> ID .)
    FLOAT           reduce using rule 25 (retorno -> ID .)
    $end            reduce using rule 25 (retorno -> ID .)
    RCURLY          reduce using rule 25 (retorno -> ID .)
    COMMA           shift and go to state 34


state 5

    (9) line -> stamentFor .

    ID              reduce using rule 9 (line -> stamentFor .)
    CASE            reduce using rule 9 (line -> stamentFor .)
    FOR             reduce using rule 9 (line -> stamentFor .)
    IF              reduce using rule 9 (line -> stamentFor .)
    FUNC            reduce using rule 9 (line -> stamentFor .)
    SWITCH          reduce using rule 9 (line -> stamentFor .)
    TYPE            reduce using rule 9 (line -> stamentFor .)
    RETURN          reduce using rule 9 (line -> stamentFor .)
    VAR             reduce using rule 9 (line -> stamentFor .)
    FMT             reduce using rule 9 (line -> stamentFor .)
    INT             reduce using rule 9 (line -> stamentFor .)
    FLOAT           reduce using rule 9 (line -> stamentFor .)
    $end            reduce using rule 9 (line -> stamentFor .)
    RCURLY          reduce using rule 9 (line -> stamentFor .)


state 6

    (10) line -> consulta .

    ID              reduce using rule 10 (line -> consulta .)
    CASE            reduce using rule 10 (line -> consulta .)
    FOR             reduce using rule 10 (line -> consulta .)
    IF              reduce using rule 10 (line -> consulta .)
    FUNC            reduce using rule 10 (line -> consulta .)
    SWITCH          reduce using rule 10 (line -> consulta .)
    TYPE            reduce using rule 10 (line -> consulta .)
    RETURN          reduce using rule 10 (line -> consulta .)
    VAR             reduce using rule 10 (line -> consulta .)
    FMT             reduce using rule 10 (line -> consulta .)
    INT             reduce using rule 10 (line -> consulta .)
    FLOAT           reduce using rule 10 (line -> consulta .)
    $end            reduce using rule 10 (line -> consulta .)
    RCURLY          reduce using rule 10 (line -> consulta .)


state 7

    (11) line -> push .

    ID              reduce using rule 11 (line -> push .)
    CASE            reduce using rule 11 (line -> push .)
    FOR             reduce using rule 11 (line -> push .)
    IF              reduce using rule 11 (line -> push .)
    FUNC            reduce using rule 11 (line -> push .)
    SWITCH          reduce using rule 11 (line -> push .)
    TYPE            reduce using rule 11 (line -> push .)
    RETURN          reduce using rule 11 (line -> push .)
    VAR             reduce using rule 11 (line -> push .)
    FMT             reduce using rule 11 (line -> push .)
    INT             reduce using rule 11 (line -> push .)
    FLOAT           reduce using rule 11 (line -> push .)
    $end            reduce using rule 11 (line -> push .)
    RCURLY          reduce using rule 11 (line -> push .)


state 8

    (12) line -> funcion .

    ID              reduce using rule 12 (line -> funcion .)
    CASE            reduce using rule 12 (line -> funcion .)
    FOR             reduce using rule 12 (line -> funcion .)
    IF              reduce using rule 12 (line -> funcion .)
    FUNC            reduce using rule 12 (line -> funcion .)
    SWITCH          reduce using rule 12 (line -> funcion .)
    TYPE            reduce using rule 12 (line -> funcion .)
    RETURN          reduce using rule 12 (line -> funcion .)
    VAR             reduce using rule 12 (line -> funcion .)
    FMT             reduce using rule 12 (line -> funcion .)
    INT             reduce using rule 12 (line -> funcion .)
    FLOAT           reduce using rule 12 (line -> funcion .)
    $end            reduce using rule 12 (line -> funcion .)
    RCURLY          reduce using rule 12 (line -> funcion .)


state 9

    (13) line -> array .

    ID              reduce using rule 13 (line -> array .)
    CASE            reduce using rule 13 (line -> array .)
    FOR             reduce using rule 13 (line -> array .)
    IF              reduce using rule 13 (line -> array .)
    FUNC            reduce using rule 13 (line -> array .)
    SWITCH          reduce using rule 13 (line -> array .)
    TYPE            reduce using rule 13 (line -> array .)
    RETURN          reduce using rule 13 (line -> array .)
    VAR             reduce using rule 13 (line -> array .)
    FMT             reduce using rule 13 (line -> array .)
    INT             reduce using rule 13 (line -> array .)
    FLOAT           reduce using rule 13 (line -> array .)
    $end            reduce using rule 13 (line -> array .)
    RCURLY          reduce using rule 13 (line -> array .)


state 10

    (14) line -> slice .

    ID              reduce using rule 14 (line -> slice .)
    CASE            reduce using rule 14 (line -> slice .)
    FOR             reduce using rule 14 (line -> slice .)
    IF              reduce using rule 14 (line -> slice .)
    FUNC            reduce using rule 14 (line -> slice .)
    SWITCH          reduce using rule 14 (line -> slice .)
    TYPE            reduce using rule 14 (line -> slice .)
    RETURN          reduce using rule 14 (line -> slice .)
    VAR             reduce using rule 14 (line -> slice .)
    FMT             reduce using rule 14 (line -> slice .)
    INT             reduce using rule 14 (line -> slice .)
    FLOAT           reduce using rule 14 (line -> slice .)
    $end            reduce using rule 14 (line -> slice .)
    RCURLY          reduce using rule 14 (line -> slice .)


state 11

    (15) line -> mathExpProd .

    ID              reduce using rule 15 (line -> mathExpProd .)
    CASE            reduce using rule 15 (line -> mathExpProd .)
    FOR             reduce using rule 15 (line -> mathExpProd .)
    IF              reduce using rule 15 (line -> mathExpProd .)
    FUNC            reduce using rule 15 (line -> mathExpProd .)
    SWITCH          reduce using rule 15 (line -> mathExpProd .)
    TYPE            reduce using rule 15 (line -> mathExpProd .)
    RETURN          reduce using rule 15 (line -> mathExpProd .)
    VAR             reduce using rule 15 (line -> mathExpProd .)
    FMT             reduce using rule 15 (line -> mathExpProd .)
    INT             reduce using rule 15 (line -> mathExpProd .)
    FLOAT           reduce using rule 15 (line -> mathExpProd .)
    $end            reduce using rule 15 (line -> mathExpProd .)
    RCURLY          reduce using rule 15 (line -> mathExpProd .)


state 12

    (16) line -> CASE . INT TWODOTS line

    INT             shift and go to state 35


state 13

    (45) number -> INT .

    DIVIDE          reduce using rule 45 (number -> INT .)
    MINUS           reduce using rule 45 (number -> INT .)
    PLUS            reduce using rule 45 (number -> INT .)
    TIMES           reduce using rule 45 (number -> INT .)
    ID              reduce using rule 45 (number -> INT .)
    CASE            reduce using rule 45 (number -> INT .)
    FOR             reduce using rule 45 (number -> INT .)
    IF              reduce using rule 45 (number -> INT .)
    FUNC            reduce using rule 45 (number -> INT .)
    SWITCH          reduce using rule 45 (number -> INT .)
    TYPE            reduce using rule 45 (number -> INT .)
    RETURN          reduce using rule 45 (number -> INT .)
    VAR             reduce using rule 45 (number -> INT .)
    FMT             reduce using rule 45 (number -> INT .)
    INT             reduce using rule 45 (number -> INT .)
    FLOAT           reduce using rule 45 (number -> INT .)
    $end            reduce using rule 45 (number -> INT .)
    RCURLY          reduce using rule 45 (number -> INT .)
    COMMA           reduce using rule 45 (number -> INT .)


state 14

    (17) line -> switch .

    ID              reduce using rule 17 (line -> switch .)
    CASE            reduce using rule 17 (line -> switch .)
    FOR             reduce using rule 17 (line -> switch .)
    IF              reduce using rule 17 (line -> switch .)
    FUNC            reduce using rule 17 (line -> switch .)
    SWITCH          reduce using rule 17 (line -> switch .)
    TYPE            reduce using rule 17 (line -> switch .)
    RETURN          reduce using rule 17 (line -> switch .)
    VAR             reduce using rule 17 (line -> switch .)
    FMT             reduce using rule 17 (line -> switch .)
    INT             reduce using rule 17 (line -> switch .)
    FLOAT           reduce using rule 17 (line -> switch .)
    $end            reduce using rule 17 (line -> switch .)
    RCURLY          reduce using rule 17 (line -> switch .)


state 15

    (18) line -> pila .

    ID              reduce using rule 18 (line -> pila .)
    CASE            reduce using rule 18 (line -> pila .)
    FOR             reduce using rule 18 (line -> pila .)
    IF              reduce using rule 18 (line -> pila .)
    FUNC            reduce using rule 18 (line -> pila .)
    SWITCH          reduce using rule 18 (line -> pila .)
    TYPE            reduce using rule 18 (line -> pila .)
    RETURN          reduce using rule 18 (line -> pila .)
    VAR             reduce using rule 18 (line -> pila .)
    FMT             reduce using rule 18 (line -> pila .)
    INT             reduce using rule 18 (line -> pila .)
    FLOAT           reduce using rule 18 (line -> pila .)
    $end            reduce using rule 18 (line -> pila .)
    RCURLY          reduce using rule 18 (line -> pila .)


state 16

    (19) line -> func_declaration .

    ID              reduce using rule 19 (line -> func_declaration .)
    CASE            reduce using rule 19 (line -> func_declaration .)
    FOR             reduce using rule 19 (line -> func_declaration .)
    IF              reduce using rule 19 (line -> func_declaration .)
    FUNC            reduce using rule 19 (line -> func_declaration .)
    SWITCH          reduce using rule 19 (line -> func_declaration .)
    TYPE            reduce using rule 19 (line -> func_declaration .)
    RETURN          reduce using rule 19 (line -> func_declaration .)
    VAR             reduce using rule 19 (line -> func_declaration .)
    FMT             reduce using rule 19 (line -> func_declaration .)
    INT             reduce using rule 19 (line -> func_declaration .)
    FLOAT           reduce using rule 19 (line -> func_declaration .)
    $end            reduce using rule 19 (line -> func_declaration .)
    RCURLY          reduce using rule 19 (line -> func_declaration .)


state 17

    (21) line -> retorno .

    ID              reduce using rule 21 (line -> retorno .)
    CASE            reduce using rule 21 (line -> retorno .)
    FOR             reduce using rule 21 (line -> retorno .)
    IF              reduce using rule 21 (line -> retorno .)
    FUNC            reduce using rule 21 (line -> retorno .)
    SWITCH          reduce using rule 21 (line -> retorno .)
    TYPE            reduce using rule 21 (line -> retorno .)
    RETURN          reduce using rule 21 (line -> retorno .)
    VAR             reduce using rule 21 (line -> retorno .)
    FMT             reduce using rule 21 (line -> retorno .)
    INT             reduce using rule 21 (line -> retorno .)
    FLOAT           reduce using rule 21 (line -> retorno .)
    $end            reduce using rule 21 (line -> retorno .)
    RCURLY          reduce using rule 21 (line -> retorno .)


state 18

    (22) line -> declaration .

    ID              reduce using rule 22 (line -> declaration .)
    CASE            reduce using rule 22 (line -> declaration .)
    FOR             reduce using rule 22 (line -> declaration .)
    IF              reduce using rule 22 (line -> declaration .)
    FUNC            reduce using rule 22 (line -> declaration .)
    SWITCH          reduce using rule 22 (line -> declaration .)
    TYPE            reduce using rule 22 (line -> declaration .)
    RETURN          reduce using rule 22 (line -> declaration .)
    VAR             reduce using rule 22 (line -> declaration .)
    FMT             reduce using rule 22 (line -> declaration .)
    INT             reduce using rule 22 (line -> declaration .)
    FLOAT           reduce using rule 22 (line -> declaration .)
    $end            reduce using rule 22 (line -> declaration .)
    RCURLY          reduce using rule 22 (line -> declaration .)


state 19

    (23) line -> sentence .

    ID              reduce using rule 23 (line -> sentence .)
    CASE            reduce using rule 23 (line -> sentence .)
    FOR             reduce using rule 23 (line -> sentence .)
    IF              reduce using rule 23 (line -> sentence .)
    FUNC            reduce using rule 23 (line -> sentence .)
    SWITCH          reduce using rule 23 (line -> sentence .)
    TYPE            reduce using rule 23 (line -> sentence .)
    RETURN          reduce using rule 23 (line -> sentence .)
    VAR             reduce using rule 23 (line -> sentence .)
    FMT             reduce using rule 23 (line -> sentence .)
    INT             reduce using rule 23 (line -> sentence .)
    FLOAT           reduce using rule 23 (line -> sentence .)
    $end            reduce using rule 23 (line -> sentence .)
    RCURLY          reduce using rule 23 (line -> sentence .)


state 20

    (24) line -> return .

    ID              reduce using rule 24 (line -> return .)
    CASE            reduce using rule 24 (line -> return .)
    FOR             reduce using rule 24 (line -> return .)
    IF              reduce using rule 24 (line -> return .)
    FUNC            reduce using rule 24 (line -> return .)
    SWITCH          reduce using rule 24 (line -> return .)
    TYPE            reduce using rule 24 (line -> return .)
    RETURN          reduce using rule 24 (line -> return .)
    VAR             reduce using rule 24 (line -> return .)
    FMT             reduce using rule 24 (line -> return .)
    INT             reduce using rule 24 (line -> return .)
    FLOAT           reduce using rule 24 (line -> return .)
    $end            reduce using rule 24 (line -> return .)
    RCURLY          reduce using rule 24 (line -> return .)


state 21

    (38) stamentFor -> FOR . ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 36


state 22

    (40) consulta -> IF . expression LCURLY statements RCURLY
    (41) consulta -> IF . expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (28) expression -> . ID comparator ID
    (29) expression -> . ID comparator INT
    (30) expression -> . ID

    ID              shift and go to state 38

    expression                     shift and go to state 37

state 23

    (56) push -> FUNC . PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> FUNC . value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> FUNC . ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (58) func_declaration -> FUNC . ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    PUSH            shift and go to state 39
    ID              shift and go to state 40
    INT             shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44

    value                          shift and go to state 41

state 24

    (27) retorno -> RETURN . retorno
    (74) return -> RETURN . expression
    (75) return -> RETURN . INT
    (76) return -> RETURN . sentence
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (28) expression -> . ID comparator ID
    (29) expression -> . ID comparator INT
    (30) expression -> . ID
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN

    INT             shift and go to state 48
    ID              shift and go to state 50
    RETURN          shift and go to state 45
    FMT             shift and go to state 30

    retorno                        shift and go to state 46
    expression                     shift and go to state 47
    sentence                       shift and go to state 49

state 25

    (70) mathExpProd -> mathExp .
    (71) mathExpProd -> mathExp . operator mathExpProd
    (34) operator -> . DIVIDE
    (35) operator -> . MINUS
    (36) operator -> . PLUS
    (37) operator -> . TIMES

    ID              reduce using rule 70 (mathExpProd -> mathExp .)
    CASE            reduce using rule 70 (mathExpProd -> mathExp .)
    FOR             reduce using rule 70 (mathExpProd -> mathExp .)
    IF              reduce using rule 70 (mathExpProd -> mathExp .)
    FUNC            reduce using rule 70 (mathExpProd -> mathExp .)
    SWITCH          reduce using rule 70 (mathExpProd -> mathExp .)
    TYPE            reduce using rule 70 (mathExpProd -> mathExp .)
    RETURN          reduce using rule 70 (mathExpProd -> mathExp .)
    VAR             reduce using rule 70 (mathExpProd -> mathExp .)
    FMT             reduce using rule 70 (mathExpProd -> mathExp .)
    INT             reduce using rule 70 (mathExpProd -> mathExp .)
    FLOAT           reduce using rule 70 (mathExpProd -> mathExp .)
    $end            reduce using rule 70 (mathExpProd -> mathExp .)
    RCURLY          reduce using rule 70 (mathExpProd -> mathExp .)
    DIVIDE          shift and go to state 52
    MINUS           shift and go to state 53
    PLUS            shift and go to state 54
    TIMES           shift and go to state 55

    operator                       shift and go to state 51

state 26

    (39) switch -> SWITCH . ID LCURLY repeatLines RCURLY

    ID              shift and go to state 56


state 27

    (53) pila -> TYPE . STACK LBRACKETS RBRACKETS ID
    (54) pila -> TYPE . STACK INTERFACE LCURLY RCURLY
    (55) pila -> TYPE . STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    STACK           shift and go to state 57


state 28

    (65) declaration -> VAR . ID ID
    (66) declaration -> VAR . ID ID EQUALSVAR number
    (67) declaration -> VAR . ID ID EQUALSVAR STR

    ID              shift and go to state 58


state 29

    (68) mathExp -> number .
    (69) mathExp -> number . operator number
    (34) operator -> . DIVIDE
    (35) operator -> . MINUS
    (36) operator -> . PLUS
    (37) operator -> . TIMES

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 68 (mathExp -> number .)
    CASE            reduce using rule 68 (mathExp -> number .)
    FOR             reduce using rule 68 (mathExp -> number .)
    IF              reduce using rule 68 (mathExp -> number .)
    FUNC            reduce using rule 68 (mathExp -> number .)
    SWITCH          reduce using rule 68 (mathExp -> number .)
    TYPE            reduce using rule 68 (mathExp -> number .)
    RETURN          reduce using rule 68 (mathExp -> number .)
    VAR             reduce using rule 68 (mathExp -> number .)
    FMT             reduce using rule 68 (mathExp -> number .)
    INT             reduce using rule 68 (mathExp -> number .)
    FLOAT           reduce using rule 68 (mathExp -> number .)
    $end            reduce using rule 68 (mathExp -> number .)
    RCURLY          reduce using rule 68 (mathExp -> number .)
    DIVIDE          shift and go to state 52
    MINUS           shift and go to state 53
    PLUS            shift and go to state 54
    TIMES           shift and go to state 55

  ! DIVIDE          [ reduce using rule 68 (mathExp -> number .) ]
  ! MINUS           [ reduce using rule 68 (mathExp -> number .) ]
  ! PLUS            [ reduce using rule 68 (mathExp -> number .) ]
  ! TIMES           [ reduce using rule 68 (mathExp -> number .) ]

    operator                       shift and go to state 59

state 30

    (72) sentence -> FMT . PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> FMT . PERIOD PRINTF LPAREN STR RPAREN

    PERIOD          shift and go to state 60


state 31

    (46) number -> FLOAT .

    DIVIDE          reduce using rule 46 (number -> FLOAT .)
    MINUS           reduce using rule 46 (number -> FLOAT .)
    PLUS            reduce using rule 46 (number -> FLOAT .)
    TIMES           reduce using rule 46 (number -> FLOAT .)
    ID              reduce using rule 46 (number -> FLOAT .)
    CASE            reduce using rule 46 (number -> FLOAT .)
    FOR             reduce using rule 46 (number -> FLOAT .)
    IF              reduce using rule 46 (number -> FLOAT .)
    FUNC            reduce using rule 46 (number -> FLOAT .)
    SWITCH          reduce using rule 46 (number -> FLOAT .)
    TYPE            reduce using rule 46 (number -> FLOAT .)
    RETURN          reduce using rule 46 (number -> FLOAT .)
    VAR             reduce using rule 46 (number -> FLOAT .)
    FMT             reduce using rule 46 (number -> FLOAT .)
    INT             reduce using rule 46 (number -> FLOAT .)
    FLOAT           reduce using rule 46 (number -> FLOAT .)
    $end            reduce using rule 46 (number -> FLOAT .)
    RCURLY          reduce using rule 46 (number -> FLOAT .)
    COMMA           reduce using rule 46 (number -> FLOAT .)


state 32

    (7) repeatLines -> line repeatLines .

    $end            reduce using rule 7 (repeatLines -> line repeatLines .)
    RCURLY          reduce using rule 7 (repeatLines -> line repeatLines .)
    RETURN          reduce using rule 7 (repeatLines -> line repeatLines .)


state 33

    (8) line -> ID EQUALSVAR . value
    (20) line -> ID EQUALSVAR . INT
    (47) array -> ID EQUALSVAR . LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> ID EQUALSVAR . LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 63
    LBRACKETS       shift and go to state 64
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 61

    value                          shift and go to state 62

state 34

    (26) retorno -> ID COMMA .

    ID              reduce using rule 26 (retorno -> ID COMMA .)
    CASE            reduce using rule 26 (retorno -> ID COMMA .)
    FOR             reduce using rule 26 (retorno -> ID COMMA .)
    IF              reduce using rule 26 (retorno -> ID COMMA .)
    FUNC            reduce using rule 26 (retorno -> ID COMMA .)
    SWITCH          reduce using rule 26 (retorno -> ID COMMA .)
    TYPE            reduce using rule 26 (retorno -> ID COMMA .)
    RETURN          reduce using rule 26 (retorno -> ID COMMA .)
    VAR             reduce using rule 26 (retorno -> ID COMMA .)
    FMT             reduce using rule 26 (retorno -> ID COMMA .)
    INT             reduce using rule 26 (retorno -> ID COMMA .)
    FLOAT           reduce using rule 26 (retorno -> ID COMMA .)
    $end            reduce using rule 26 (retorno -> ID COMMA .)
    RCURLY          reduce using rule 26 (retorno -> ID COMMA .)


state 35

    (16) line -> CASE INT . TWODOTS line

    TWODOTS         shift and go to state 65


state 36

    (38) stamentFor -> FOR ID . EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    EQUALS          shift and go to state 66


state 37

    (40) consulta -> IF expression . LCURLY statements RCURLY
    (41) consulta -> IF expression . LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LCURLY          shift and go to state 67


state 38

    (28) expression -> ID . comparator ID
    (29) expression -> ID . comparator INT
    (30) expression -> ID .
    (31) comparator -> . COMPARE
    (32) comparator -> . MORETHAN
    (33) comparator -> . MINUSTHAN

    LCURLY          reduce using rule 30 (expression -> ID .)
    COMPARE         shift and go to state 69
    MORETHAN        shift and go to state 70
    MINUSTHAN       shift and go to state 71

    comparator                     shift and go to state 68

state 39

    (56) push -> FUNC PUSH . LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 72


state 40

    (61) funcion -> FUNC ID . LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (58) func_declaration -> FUNC ID . LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (5) value -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 73

  ! LPAREN          [ reduce using rule 5 (value -> ID .) ]


state 41

    (57) funcion -> FUNC value . LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    LPAREN          shift and go to state 74


state 42

    (2) value -> INT .

    LPAREN          reduce using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)


state 43

    (3) value -> FLOAT .

    LPAREN          reduce using rule 3 (value -> FLOAT .)
    ID              reduce using rule 3 (value -> FLOAT .)
    CASE            reduce using rule 3 (value -> FLOAT .)
    FOR             reduce using rule 3 (value -> FLOAT .)
    IF              reduce using rule 3 (value -> FLOAT .)
    FUNC            reduce using rule 3 (value -> FLOAT .)
    SWITCH          reduce using rule 3 (value -> FLOAT .)
    TYPE            reduce using rule 3 (value -> FLOAT .)
    RETURN          reduce using rule 3 (value -> FLOAT .)
    VAR             reduce using rule 3 (value -> FLOAT .)
    FMT             reduce using rule 3 (value -> FLOAT .)
    INT             reduce using rule 3 (value -> FLOAT .)
    FLOAT           reduce using rule 3 (value -> FLOAT .)
    $end            reduce using rule 3 (value -> FLOAT .)
    RCURLY          reduce using rule 3 (value -> FLOAT .)


state 44

    (4) value -> STR .

    LPAREN          reduce using rule 4 (value -> STR .)
    ID              reduce using rule 4 (value -> STR .)
    CASE            reduce using rule 4 (value -> STR .)
    FOR             reduce using rule 4 (value -> STR .)
    IF              reduce using rule 4 (value -> STR .)
    FUNC            reduce using rule 4 (value -> STR .)
    SWITCH          reduce using rule 4 (value -> STR .)
    TYPE            reduce using rule 4 (value -> STR .)
    RETURN          reduce using rule 4 (value -> STR .)
    VAR             reduce using rule 4 (value -> STR .)
    FMT             reduce using rule 4 (value -> STR .)
    INT             reduce using rule 4 (value -> STR .)
    FLOAT           reduce using rule 4 (value -> STR .)
    $end            reduce using rule 4 (value -> STR .)
    RCURLY          reduce using rule 4 (value -> STR .)


state 45

    (27) retorno -> RETURN . retorno
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno

    ID              shift and go to state 75
    RETURN          shift and go to state 45

    retorno                        shift and go to state 46

state 46

    (27) retorno -> RETURN retorno .

    ID              reduce using rule 27 (retorno -> RETURN retorno .)
    CASE            reduce using rule 27 (retorno -> RETURN retorno .)
    FOR             reduce using rule 27 (retorno -> RETURN retorno .)
    IF              reduce using rule 27 (retorno -> RETURN retorno .)
    FUNC            reduce using rule 27 (retorno -> RETURN retorno .)
    SWITCH          reduce using rule 27 (retorno -> RETURN retorno .)
    TYPE            reduce using rule 27 (retorno -> RETURN retorno .)
    RETURN          reduce using rule 27 (retorno -> RETURN retorno .)
    VAR             reduce using rule 27 (retorno -> RETURN retorno .)
    FMT             reduce using rule 27 (retorno -> RETURN retorno .)
    INT             reduce using rule 27 (retorno -> RETURN retorno .)
    FLOAT           reduce using rule 27 (retorno -> RETURN retorno .)
    $end            reduce using rule 27 (retorno -> RETURN retorno .)
    RCURLY          reduce using rule 27 (retorno -> RETURN retorno .)


state 47

    (74) return -> RETURN expression .

    ID              reduce using rule 74 (return -> RETURN expression .)
    CASE            reduce using rule 74 (return -> RETURN expression .)
    FOR             reduce using rule 74 (return -> RETURN expression .)
    IF              reduce using rule 74 (return -> RETURN expression .)
    FUNC            reduce using rule 74 (return -> RETURN expression .)
    SWITCH          reduce using rule 74 (return -> RETURN expression .)
    TYPE            reduce using rule 74 (return -> RETURN expression .)
    RETURN          reduce using rule 74 (return -> RETURN expression .)
    VAR             reduce using rule 74 (return -> RETURN expression .)
    FMT             reduce using rule 74 (return -> RETURN expression .)
    INT             reduce using rule 74 (return -> RETURN expression .)
    FLOAT           reduce using rule 74 (return -> RETURN expression .)
    $end            reduce using rule 74 (return -> RETURN expression .)
    RCURLY          reduce using rule 74 (return -> RETURN expression .)


state 48

    (75) return -> RETURN INT .

    ID              reduce using rule 75 (return -> RETURN INT .)
    CASE            reduce using rule 75 (return -> RETURN INT .)
    FOR             reduce using rule 75 (return -> RETURN INT .)
    IF              reduce using rule 75 (return -> RETURN INT .)
    FUNC            reduce using rule 75 (return -> RETURN INT .)
    SWITCH          reduce using rule 75 (return -> RETURN INT .)
    TYPE            reduce using rule 75 (return -> RETURN INT .)
    RETURN          reduce using rule 75 (return -> RETURN INT .)
    VAR             reduce using rule 75 (return -> RETURN INT .)
    FMT             reduce using rule 75 (return -> RETURN INT .)
    INT             reduce using rule 75 (return -> RETURN INT .)
    FLOAT           reduce using rule 75 (return -> RETURN INT .)
    $end            reduce using rule 75 (return -> RETURN INT .)
    RCURLY          reduce using rule 75 (return -> RETURN INT .)


state 49

    (76) return -> RETURN sentence .

    ID              reduce using rule 76 (return -> RETURN sentence .)
    CASE            reduce using rule 76 (return -> RETURN sentence .)
    FOR             reduce using rule 76 (return -> RETURN sentence .)
    IF              reduce using rule 76 (return -> RETURN sentence .)
    FUNC            reduce using rule 76 (return -> RETURN sentence .)
    SWITCH          reduce using rule 76 (return -> RETURN sentence .)
    TYPE            reduce using rule 76 (return -> RETURN sentence .)
    RETURN          reduce using rule 76 (return -> RETURN sentence .)
    VAR             reduce using rule 76 (return -> RETURN sentence .)
    FMT             reduce using rule 76 (return -> RETURN sentence .)
    INT             reduce using rule 76 (return -> RETURN sentence .)
    FLOAT           reduce using rule 76 (return -> RETURN sentence .)
    $end            reduce using rule 76 (return -> RETURN sentence .)
    RCURLY          reduce using rule 76 (return -> RETURN sentence .)


state 50

    (25) retorno -> ID .
    (26) retorno -> ID . COMMA
    (28) expression -> ID . comparator ID
    (29) expression -> ID . comparator INT
    (30) expression -> ID .
    (31) comparator -> . COMPARE
    (32) comparator -> . MORETHAN
    (33) comparator -> . MINUSTHAN

  ! reduce/reduce conflict for ID resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 25 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 25 (retorno -> ID .)
    ID              reduce using rule 25 (retorno -> ID .)
    CASE            reduce using rule 25 (retorno -> ID .)
    FOR             reduce using rule 25 (retorno -> ID .)
    IF              reduce using rule 25 (retorno -> ID .)
    FUNC            reduce using rule 25 (retorno -> ID .)
    SWITCH          reduce using rule 25 (retorno -> ID .)
    TYPE            reduce using rule 25 (retorno -> ID .)
    RETURN          reduce using rule 25 (retorno -> ID .)
    VAR             reduce using rule 25 (retorno -> ID .)
    FMT             reduce using rule 25 (retorno -> ID .)
    INT             reduce using rule 25 (retorno -> ID .)
    FLOAT           reduce using rule 25 (retorno -> ID .)
    $end            reduce using rule 25 (retorno -> ID .)
    RCURLY          reduce using rule 25 (retorno -> ID .)
    COMMA           shift and go to state 34
    COMPARE         shift and go to state 69
    MORETHAN        shift and go to state 70
    MINUSTHAN       shift and go to state 71

  ! ID              [ reduce using rule 30 (expression -> ID .) ]
  ! CASE            [ reduce using rule 30 (expression -> ID .) ]
  ! FOR             [ reduce using rule 30 (expression -> ID .) ]
  ! IF              [ reduce using rule 30 (expression -> ID .) ]
  ! FUNC            [ reduce using rule 30 (expression -> ID .) ]
  ! SWITCH          [ reduce using rule 30 (expression -> ID .) ]
  ! TYPE            [ reduce using rule 30 (expression -> ID .) ]
  ! RETURN          [ reduce using rule 30 (expression -> ID .) ]
  ! VAR             [ reduce using rule 30 (expression -> ID .) ]
  ! FMT             [ reduce using rule 30 (expression -> ID .) ]
  ! INT             [ reduce using rule 30 (expression -> ID .) ]
  ! FLOAT           [ reduce using rule 30 (expression -> ID .) ]
  ! $end            [ reduce using rule 30 (expression -> ID .) ]
  ! RCURLY          [ reduce using rule 30 (expression -> ID .) ]

    comparator                     shift and go to state 68

state 51

    (71) mathExpProd -> mathExp operator . mathExpProd
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    mathExp                        shift and go to state 25
    mathExpProd                    shift and go to state 76
    number                         shift and go to state 29

state 52

    (34) operator -> DIVIDE .

    INT             reduce using rule 34 (operator -> DIVIDE .)
    FLOAT           reduce using rule 34 (operator -> DIVIDE .)


state 53

    (35) operator -> MINUS .

    INT             reduce using rule 35 (operator -> MINUS .)
    FLOAT           reduce using rule 35 (operator -> MINUS .)


state 54

    (36) operator -> PLUS .

    INT             reduce using rule 36 (operator -> PLUS .)
    FLOAT           reduce using rule 36 (operator -> PLUS .)


state 55

    (37) operator -> TIMES .

    INT             reduce using rule 37 (operator -> TIMES .)
    FLOAT           reduce using rule 37 (operator -> TIMES .)


state 56

    (39) switch -> SWITCH ID . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 77


state 57

    (53) pila -> TYPE STACK . LBRACKETS RBRACKETS ID
    (54) pila -> TYPE STACK . INTERFACE LCURLY RCURLY
    (55) pila -> TYPE STACK . STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 78
    INTERFACE       shift and go to state 79
    STRUCT          shift and go to state 80


state 58

    (65) declaration -> VAR ID . ID
    (66) declaration -> VAR ID . ID EQUALSVAR number
    (67) declaration -> VAR ID . ID EQUALSVAR STR

    ID              shift and go to state 81


state 59

    (69) mathExp -> number operator . number
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    number                         shift and go to state 82

state 60

    (72) sentence -> FMT PERIOD . PRINTLN LPAREN STR RPAREN
    (73) sentence -> FMT PERIOD . PRINTF LPAREN STR RPAREN

    PRINTLN         shift and go to state 83
    PRINTF          shift and go to state 84


state 61

    (5) value -> ID .

    ID              reduce using rule 5 (value -> ID .)
    CASE            reduce using rule 5 (value -> ID .)
    FOR             reduce using rule 5 (value -> ID .)
    IF              reduce using rule 5 (value -> ID .)
    FUNC            reduce using rule 5 (value -> ID .)
    SWITCH          reduce using rule 5 (value -> ID .)
    TYPE            reduce using rule 5 (value -> ID .)
    RETURN          reduce using rule 5 (value -> ID .)
    VAR             reduce using rule 5 (value -> ID .)
    FMT             reduce using rule 5 (value -> ID .)
    INT             reduce using rule 5 (value -> ID .)
    FLOAT           reduce using rule 5 (value -> ID .)
    $end            reduce using rule 5 (value -> ID .)
    RCURLY          reduce using rule 5 (value -> ID .)


state 62

    (8) line -> ID EQUALSVAR value .

    ID              reduce using rule 8 (line -> ID EQUALSVAR value .)
    CASE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    FOR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    IF              reduce using rule 8 (line -> ID EQUALSVAR value .)
    FUNC            reduce using rule 8 (line -> ID EQUALSVAR value .)
    SWITCH          reduce using rule 8 (line -> ID EQUALSVAR value .)
    TYPE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RETURN          reduce using rule 8 (line -> ID EQUALSVAR value .)
    VAR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FMT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    INT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FLOAT           reduce using rule 8 (line -> ID EQUALSVAR value .)
    $end            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RCURLY          reduce using rule 8 (line -> ID EQUALSVAR value .)


state 63

    (20) line -> ID EQUALSVAR INT .
    (2) value -> INT .

  ! reduce/reduce conflict for ID resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FUNC resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for TYPE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FMT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    CASE            reduce using rule 2 (value -> INT .)
    FOR             reduce using rule 2 (value -> INT .)
    IF              reduce using rule 2 (value -> INT .)
    FUNC            reduce using rule 2 (value -> INT .)
    SWITCH          reduce using rule 2 (value -> INT .)
    TYPE            reduce using rule 2 (value -> INT .)
    RETURN          reduce using rule 2 (value -> INT .)
    VAR             reduce using rule 2 (value -> INT .)
    FMT             reduce using rule 2 (value -> INT .)
    INT             reduce using rule 2 (value -> INT .)
    FLOAT           reduce using rule 2 (value -> INT .)
    $end            reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)

  ! ID              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CASE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FOR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! IF              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FUNC            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! SWITCH          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! TYPE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RETURN          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! VAR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FMT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! INT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FLOAT           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! $end            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RCURLY          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]


state 64

    (47) array -> ID EQUALSVAR LBRACKETS . INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> ID EQUALSVAR LBRACKETS . RBRACKETS ID LCURLY elemSlice RCURLY

    INT             shift and go to state 85
    RBRACKETS       shift and go to state 86


state 65

    (16) line -> CASE INT TWODOTS . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    line                           shift and go to state 87
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 66

    (38) stamentFor -> FOR ID EQUALS . INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    INT             shift and go to state 88


state 67

    (40) consulta -> IF expression LCURLY . statements RCURLY
    (41) consulta -> IF expression LCURLY . statements RCURLY ELSE LCURLY statements RCURLY
    (42) statements -> . statement
    (43) statements -> . statement COMMA statements
    (44) statement -> . ID

    ID              shift and go to state 91

    statements                     shift and go to state 89
    statement                      shift and go to state 90

state 68

    (28) expression -> ID comparator . ID
    (29) expression -> ID comparator . INT

    ID              shift and go to state 92
    INT             shift and go to state 93


state 69

    (31) comparator -> COMPARE .

    ID              reduce using rule 31 (comparator -> COMPARE .)
    INT             reduce using rule 31 (comparator -> COMPARE .)


state 70

    (32) comparator -> MORETHAN .

    ID              reduce using rule 32 (comparator -> MORETHAN .)
    INT             reduce using rule 32 (comparator -> MORETHAN .)


state 71

    (33) comparator -> MINUSTHAN .

    ID              reduce using rule 33 (comparator -> MINUSTHAN .)
    INT             reduce using rule 33 (comparator -> MINUSTHAN .)


state 72

    (56) push -> FUNC PUSH LPAREN . ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 94


state 73

    (61) funcion -> FUNC ID LPAREN . param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (58) func_declaration -> FUNC ID LPAREN . RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (62) param_list -> . param
    (63) param_list -> . param_list COMMA param
    (64) param -> . value ID
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    RPAREN          shift and go to state 96
    INT             shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 61

    param_list                     shift and go to state 95
    param                          shift and go to state 97
    value                          shift and go to state 98

state 74

    (57) funcion -> FUNC value LPAREN . RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    RPAREN          shift and go to state 99


state 75

    (25) retorno -> ID .
    (26) retorno -> ID . COMMA

    ID              reduce using rule 25 (retorno -> ID .)
    CASE            reduce using rule 25 (retorno -> ID .)
    FOR             reduce using rule 25 (retorno -> ID .)
    IF              reduce using rule 25 (retorno -> ID .)
    FUNC            reduce using rule 25 (retorno -> ID .)
    SWITCH          reduce using rule 25 (retorno -> ID .)
    TYPE            reduce using rule 25 (retorno -> ID .)
    RETURN          reduce using rule 25 (retorno -> ID .)
    VAR             reduce using rule 25 (retorno -> ID .)
    FMT             reduce using rule 25 (retorno -> ID .)
    INT             reduce using rule 25 (retorno -> ID .)
    FLOAT           reduce using rule 25 (retorno -> ID .)
    $end            reduce using rule 25 (retorno -> ID .)
    RCURLY          reduce using rule 25 (retorno -> ID .)
    COMMA           shift and go to state 34


state 76

    (71) mathExpProd -> mathExp operator mathExpProd .

    ID              reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    CASE            reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    FOR             reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    IF              reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    FUNC            reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    SWITCH          reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    TYPE            reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    RETURN          reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    VAR             reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    FMT             reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    INT             reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    FLOAT           reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    $end            reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)
    RCURLY          reduce using rule 71 (mathExpProd -> mathExp operator mathExpProd .)


state 77

    (39) switch -> SWITCH ID LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    repeatLines                    shift and go to state 100
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 78

    (53) pila -> TYPE STACK LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 101


state 79

    (54) pila -> TYPE STACK INTERFACE . LCURLY RCURLY

    LCURLY          shift and go to state 102


state 80

    (55) pila -> TYPE STACK STRUCT . LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LCURLY          shift and go to state 103


state 81

    (65) declaration -> VAR ID ID .
    (66) declaration -> VAR ID ID . EQUALSVAR number
    (67) declaration -> VAR ID ID . EQUALSVAR STR

    ID              reduce using rule 65 (declaration -> VAR ID ID .)
    CASE            reduce using rule 65 (declaration -> VAR ID ID .)
    FOR             reduce using rule 65 (declaration -> VAR ID ID .)
    IF              reduce using rule 65 (declaration -> VAR ID ID .)
    FUNC            reduce using rule 65 (declaration -> VAR ID ID .)
    SWITCH          reduce using rule 65 (declaration -> VAR ID ID .)
    TYPE            reduce using rule 65 (declaration -> VAR ID ID .)
    RETURN          reduce using rule 65 (declaration -> VAR ID ID .)
    VAR             reduce using rule 65 (declaration -> VAR ID ID .)
    FMT             reduce using rule 65 (declaration -> VAR ID ID .)
    INT             reduce using rule 65 (declaration -> VAR ID ID .)
    FLOAT           reduce using rule 65 (declaration -> VAR ID ID .)
    $end            reduce using rule 65 (declaration -> VAR ID ID .)
    RCURLY          reduce using rule 65 (declaration -> VAR ID ID .)
    EQUALSVAR       shift and go to state 104


state 82

    (69) mathExp -> number operator number .

    DIVIDE          reduce using rule 69 (mathExp -> number operator number .)
    MINUS           reduce using rule 69 (mathExp -> number operator number .)
    PLUS            reduce using rule 69 (mathExp -> number operator number .)
    TIMES           reduce using rule 69 (mathExp -> number operator number .)
    ID              reduce using rule 69 (mathExp -> number operator number .)
    CASE            reduce using rule 69 (mathExp -> number operator number .)
    FOR             reduce using rule 69 (mathExp -> number operator number .)
    IF              reduce using rule 69 (mathExp -> number operator number .)
    FUNC            reduce using rule 69 (mathExp -> number operator number .)
    SWITCH          reduce using rule 69 (mathExp -> number operator number .)
    TYPE            reduce using rule 69 (mathExp -> number operator number .)
    RETURN          reduce using rule 69 (mathExp -> number operator number .)
    VAR             reduce using rule 69 (mathExp -> number operator number .)
    FMT             reduce using rule 69 (mathExp -> number operator number .)
    INT             reduce using rule 69 (mathExp -> number operator number .)
    FLOAT           reduce using rule 69 (mathExp -> number operator number .)
    $end            reduce using rule 69 (mathExp -> number operator number .)
    RCURLY          reduce using rule 69 (mathExp -> number operator number .)


state 83

    (72) sentence -> FMT PERIOD PRINTLN . LPAREN STR RPAREN

    LPAREN          shift and go to state 105


state 84

    (73) sentence -> FMT PERIOD PRINTF . LPAREN STR RPAREN

    LPAREN          shift and go to state 106


state 85

    (47) array -> ID EQUALSVAR LBRACKETS INT . RBRACKETS ID LCURLY elemArray RCURLY

    RBRACKETS       shift and go to state 107


state 86

    (50) slice -> ID EQUALSVAR LBRACKETS RBRACKETS . ID LCURLY elemSlice RCURLY

    ID              shift and go to state 108


state 87

    (16) line -> CASE INT TWODOTS line .

    ID              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CASE            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FOR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    IF              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    VAR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FMT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    INT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    $end            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 16 (line -> CASE INT TWODOTS line .)


state 88

    (38) stamentFor -> FOR ID EQUALS INT . DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 109


state 89

    (40) consulta -> IF expression LCURLY statements . RCURLY
    (41) consulta -> IF expression LCURLY statements . RCURLY ELSE LCURLY statements RCURLY

    RCURLY          shift and go to state 110


state 90

    (42) statements -> statement .
    (43) statements -> statement . COMMA statements

    RCURLY          reduce using rule 42 (statements -> statement .)
    COMMA           shift and go to state 111


state 91

    (44) statement -> ID .

    COMMA           reduce using rule 44 (statement -> ID .)
    RCURLY          reduce using rule 44 (statement -> ID .)


state 92

    (28) expression -> ID comparator ID .

    LCURLY          reduce using rule 28 (expression -> ID comparator ID .)
    ID              reduce using rule 28 (expression -> ID comparator ID .)
    CASE            reduce using rule 28 (expression -> ID comparator ID .)
    FOR             reduce using rule 28 (expression -> ID comparator ID .)
    IF              reduce using rule 28 (expression -> ID comparator ID .)
    FUNC            reduce using rule 28 (expression -> ID comparator ID .)
    SWITCH          reduce using rule 28 (expression -> ID comparator ID .)
    TYPE            reduce using rule 28 (expression -> ID comparator ID .)
    RETURN          reduce using rule 28 (expression -> ID comparator ID .)
    VAR             reduce using rule 28 (expression -> ID comparator ID .)
    FMT             reduce using rule 28 (expression -> ID comparator ID .)
    INT             reduce using rule 28 (expression -> ID comparator ID .)
    FLOAT           reduce using rule 28 (expression -> ID comparator ID .)
    $end            reduce using rule 28 (expression -> ID comparator ID .)
    RCURLY          reduce using rule 28 (expression -> ID comparator ID .)


state 93

    (29) expression -> ID comparator INT .

    LCURLY          reduce using rule 29 (expression -> ID comparator INT .)
    ID              reduce using rule 29 (expression -> ID comparator INT .)
    CASE            reduce using rule 29 (expression -> ID comparator INT .)
    FOR             reduce using rule 29 (expression -> ID comparator INT .)
    IF              reduce using rule 29 (expression -> ID comparator INT .)
    FUNC            reduce using rule 29 (expression -> ID comparator INT .)
    SWITCH          reduce using rule 29 (expression -> ID comparator INT .)
    TYPE            reduce using rule 29 (expression -> ID comparator INT .)
    RETURN          reduce using rule 29 (expression -> ID comparator INT .)
    VAR             reduce using rule 29 (expression -> ID comparator INT .)
    FMT             reduce using rule 29 (expression -> ID comparator INT .)
    INT             reduce using rule 29 (expression -> ID comparator INT .)
    FLOAT           reduce using rule 29 (expression -> ID comparator INT .)
    $end            reduce using rule 29 (expression -> ID comparator INT .)
    RCURLY          reduce using rule 29 (expression -> ID comparator INT .)


state 94

    (56) push -> FUNC PUSH LPAREN ID . STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 112


state 95

    (61) funcion -> FUNC ID LPAREN param_list . RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (63) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 113
    COMMA           shift and go to state 114


state 96

    (58) func_declaration -> FUNC ID LPAREN RPAREN . LPAREN return_types RPAREN LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 115


state 97

    (62) param_list -> param .

    RPAREN          reduce using rule 62 (param_list -> param .)
    COMMA           reduce using rule 62 (param_list -> param .)


state 98

    (64) param -> value . ID

    ID              shift and go to state 116


state 99

    (57) funcion -> FUNC value LPAREN RPAREN . ID LCURLY repeatLines RETURN ID RCURLY

    ID              shift and go to state 117


state 100

    (39) switch -> SWITCH ID LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 118


state 101

    (53) pila -> TYPE STACK LBRACKETS RBRACKETS . ID

    ID              shift and go to state 119


state 102

    (54) pila -> TYPE STACK INTERFACE LCURLY . RCURLY

    RCURLY          shift and go to state 120


state 103

    (55) pila -> TYPE STACK STRUCT LCURLY . ID LBRACKETS RBRACKETS value RCURLY

    ID              shift and go to state 121


state 104

    (66) declaration -> VAR ID ID EQUALSVAR . number
    (67) declaration -> VAR ID ID EQUALSVAR . STR
    (45) number -> . INT
    (46) number -> . FLOAT

    STR             shift and go to state 123
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    number                         shift and go to state 122

state 105

    (72) sentence -> FMT PERIOD PRINTLN LPAREN . STR RPAREN

    STR             shift and go to state 124


state 106

    (73) sentence -> FMT PERIOD PRINTF LPAREN . STR RPAREN

    STR             shift and go to state 125


state 107

    (47) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS . ID LCURLY elemArray RCURLY

    ID              shift and go to state 126


state 108

    (50) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID . LCURLY elemSlice RCURLY

    LCURLY          shift and go to state 127


state 109

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA . ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 128


state 110

    (40) consulta -> IF expression LCURLY statements RCURLY .
    (41) consulta -> IF expression LCURLY statements RCURLY . ELSE LCURLY statements RCURLY

    ID              reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    CASE            reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    FOR             reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    IF              reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    FUNC            reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    SWITCH          reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    TYPE            reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    RETURN          reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    VAR             reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    FMT             reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    INT             reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    FLOAT           reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    $end            reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    RCURLY          reduce using rule 40 (consulta -> IF expression LCURLY statements RCURLY .)
    ELSE            shift and go to state 129


state 111

    (43) statements -> statement COMMA . statements
    (42) statements -> . statement
    (43) statements -> . statement COMMA statements
    (44) statement -> . ID

    ID              shift and go to state 91

    statement                      shift and go to state 90
    statements                     shift and go to state 130

state 112

    (56) push -> FUNC PUSH LPAREN ID STACK . COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 131


state 113

    (61) funcion -> FUNC ID LPAREN param_list RPAREN . ID LCURLY repeatLines RETURN ID RCURLY

    ID              shift and go to state 132


state 114

    (63) param_list -> param_list COMMA . param
    (64) param -> . value ID
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 61

    param                          shift and go to state 133
    value                          shift and go to state 98

state 115

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN . return_types RPAREN LCURLY repeatLines RCURLY
    (59) return_types -> . ID COMMA ID
    (60) return_types -> . ID

    ID              shift and go to state 134

    return_types                   shift and go to state 135

state 116

    (64) param -> value ID .

    RPAREN          reduce using rule 64 (param -> value ID .)
    COMMA           reduce using rule 64 (param -> value ID .)


state 117

    (57) funcion -> FUNC value LPAREN RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 136


state 118

    (39) switch -> SWITCH ID LCURLY repeatLines RCURLY .

    ID              reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    IF              reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    INT             reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    $end            reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 39 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)


state 119

    (53) pila -> TYPE STACK LBRACKETS RBRACKETS ID .

    ID              reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 53 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)


state 120

    (54) pila -> TYPE STACK INTERFACE LCURLY RCURLY .

    ID              reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CASE            reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FOR             reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    IF              reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FUNC            reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    SWITCH          reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    TYPE            reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RETURN          reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    VAR             reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FMT             reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    INT             reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FLOAT           reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    $end            reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RCURLY          reduce using rule 54 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)


state 121

    (55) pila -> TYPE STACK STRUCT LCURLY ID . LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 137


state 122

    (66) declaration -> VAR ID ID EQUALSVAR number .

    ID              reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    CASE            reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    FOR             reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    IF              reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    FUNC            reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    SWITCH          reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    TYPE            reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    RETURN          reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    VAR             reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    FMT             reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    INT             reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    FLOAT           reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    $end            reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)
    RCURLY          reduce using rule 66 (declaration -> VAR ID ID EQUALSVAR number .)


state 123

    (67) declaration -> VAR ID ID EQUALSVAR STR .

    ID              reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    CASE            reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    FOR             reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    IF              reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    FUNC            reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    SWITCH          reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    TYPE            reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    RETURN          reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    VAR             reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    FMT             reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    INT             reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    FLOAT           reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    $end            reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)
    RCURLY          reduce using rule 67 (declaration -> VAR ID ID EQUALSVAR STR .)


state 124

    (72) sentence -> FMT PERIOD PRINTLN LPAREN STR . RPAREN

    RPAREN          shift and go to state 138


state 125

    (73) sentence -> FMT PERIOD PRINTF LPAREN STR . RPAREN

    RPAREN          shift and go to state 139


state 126

    (47) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID . LCURLY elemArray RCURLY

    LCURLY          shift and go to state 140


state 127

    (50) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY . elemSlice RCURLY
    (51) elemSlice -> . number
    (52) elemSlice -> . number COMMA elemSlice
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    elemSlice                      shift and go to state 141
    number                         shift and go to state 142

state 128

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID . MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    MINUSTHAN       shift and go to state 143


state 129

    (41) consulta -> IF expression LCURLY statements RCURLY ELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 144


state 130

    (43) statements -> statement COMMA statements .

    RCURLY          reduce using rule 43 (statements -> statement COMMA statements .)


state 131

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA . ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 145


state 132

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 146


state 133

    (63) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 63 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 63 (param_list -> param_list COMMA param .)


state 134

    (59) return_types -> ID . COMMA ID
    (60) return_types -> ID .

    COMMA           shift and go to state 147
    RPAREN          reduce using rule 60 (return_types -> ID .)


state 135

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 148


state 136

    (57) funcion -> FUNC value LPAREN RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    repeatLines                    shift and go to state 149
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 137

    (55) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS . RBRACKETS value RCURLY

    RBRACKETS       shift and go to state 150


state 138

    (72) sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .

    ID              reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    CASE            reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FOR             reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    IF              reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FUNC            reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    SWITCH          reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    TYPE            reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    RETURN          reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    VAR             reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FMT             reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    INT             reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FLOAT           reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    $end            reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    RCURLY          reduce using rule 72 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)


state 139

    (73) sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .

    ID              reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    CASE            reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FOR             reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    IF              reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FUNC            reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    SWITCH          reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    TYPE            reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    RETURN          reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    VAR             reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FMT             reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    INT             reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FLOAT           reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    $end            reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    RCURLY          reduce using rule 73 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)


state 140

    (47) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY . elemArray RCURLY
    (48) elemArray -> . number
    (49) elemArray -> . number COMMA elemArray
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    elemArray                      shift and go to state 151
    number                         shift and go to state 152

state 141

    (50) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice . RCURLY

    RCURLY          shift and go to state 153


state 142

    (51) elemSlice -> number .
    (52) elemSlice -> number . COMMA elemSlice

    RCURLY          reduce using rule 51 (elemSlice -> number .)
    COMMA           shift and go to state 154


state 143

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN . LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LEN             shift and go to state 155


state 144

    (41) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY . statements RCURLY
    (42) statements -> . statement
    (43) statements -> . statement COMMA statements
    (44) statement -> . ID

    ID              shift and go to state 91

    statements                     shift and go to state 156
    statement                      shift and go to state 90

state 145

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID . ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 157


state 146

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    repeatLines                    shift and go to state 158
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 147

    (59) return_types -> ID COMMA . ID

    ID              shift and go to state 159


state 148

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 160


state 149

    (57) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 161


state 150

    (55) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS . value RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 42
    FLOAT           shift and go to state 43
    STR             shift and go to state 44
    ID              shift and go to state 61

    value                          shift and go to state 162

state 151

    (47) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray . RCURLY

    RCURLY          shift and go to state 163


state 152

    (48) elemArray -> number .
    (49) elemArray -> number . COMMA elemArray

    RCURLY          reduce using rule 48 (elemArray -> number .)
    COMMA           shift and go to state 164


state 153

    (50) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .

    ID              reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CASE            reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FOR             reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    IF              reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FUNC            reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    SWITCH          reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    TYPE            reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RETURN          reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    VAR             reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FMT             reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    INT             reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FLOAT           reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    $end            reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RCURLY          reduce using rule 50 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)


state 154

    (52) elemSlice -> number COMMA . elemSlice
    (51) elemSlice -> . number
    (52) elemSlice -> . number COMMA elemSlice
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    number                         shift and go to state 142
    elemSlice                      shift and go to state 165

state 155

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN . LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 166


state 156

    (41) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 167


state 157

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID . RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RPAREN          shift and go to state 168


state 158

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 169


state 159

    (59) return_types -> ID COMMA ID .

    RPAREN          reduce using rule 59 (return_types -> ID COMMA ID .)


state 160

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    repeatLines                    shift and go to state 170
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 161

    (57) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 171


state 162

    (55) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value . RCURLY

    RCURLY          shift and go to state 172


state 163

    (47) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .

    ID              reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CASE            reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FOR             reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    IF              reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FUNC            reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    SWITCH          reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    TYPE            reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RETURN          reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    VAR             reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FMT             reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    INT             reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FLOAT           reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    $end            reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RCURLY          reduce using rule 47 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)


state 164

    (49) elemArray -> number COMMA . elemArray
    (48) elemArray -> . number
    (49) elemArray -> . number COMMA elemArray
    (45) number -> . INT
    (46) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    number                         shift and go to state 152
    elemArray                      shift and go to state 173

state 165

    (52) elemSlice -> number COMMA elemSlice .

    RCURLY          reduce using rule 52 (elemSlice -> number COMMA elemSlice .)


state 166

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN . ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 174


state 167

    (41) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .

    ID              reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CASE            reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FUNC            reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    SWITCH          reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    TYPE            reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    VAR             reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FMT             reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    INT             reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FLOAT           reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    $end            reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 41 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)


state 168

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN . STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 175


state 169

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 176


state 170

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 177


state 171

    (57) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 178


state 172

    (55) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .

    ID              reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CASE            reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FOR             reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    IF              reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FUNC            reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    SWITCH          reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    TYPE            reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RETURN          reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    VAR             reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FMT             reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    INT             reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FLOAT           reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    $end            reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RCURLY          reduce using rule 55 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)


state 173

    (49) elemArray -> number COMMA elemArray .

    RCURLY          reduce using rule 49 (elemArray -> number COMMA elemArray .)


state 174

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID . RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 179


state 175

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK . LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LCURLY          shift and go to state 180


state 176

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 181


state 177

    (58) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 58 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)


state 178

    (57) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 57 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 179

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN . DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 182


state 180

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY . RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RETURN          shift and go to state 183


state 181

    (61) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 61 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 182

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA . ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 184


state 183

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN . APPEND LPAREN ID COMMA ID RPAREN RCURLY

    APPEND          shift and go to state 185


state 184

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID . PLUS PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 186


state 185

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND . LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 187


state 186

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS . PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 188


state 187

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN . ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 189


state 188

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 190


state 189

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID . COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 191


state 190

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (38) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (40) consulta -> . IF expression LCURLY statements RCURLY
    (41) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (56) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (57) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (47) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (50) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (70) mathExpProd -> . mathExp
    (71) mathExpProd -> . mathExp operator mathExpProd
    (39) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (53) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (54) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (55) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (58) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (25) retorno -> . ID
    (26) retorno -> . ID COMMA
    (27) retorno -> . RETURN retorno
    (65) declaration -> . VAR ID ID
    (66) declaration -> . VAR ID ID EQUALSVAR number
    (67) declaration -> . VAR ID ID EQUALSVAR STR
    (72) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (73) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (74) return -> . RETURN expression
    (75) return -> . RETURN INT
    (76) return -> . RETURN sentence
    (68) mathExp -> . number
    (69) mathExp -> . number operator number
    (45) number -> . INT
    (46) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 21
    IF              shift and go to state 22
    FUNC            shift and go to state 23
    SWITCH          shift and go to state 26
    TYPE            shift and go to state 27
    RETURN          shift and go to state 24
    VAR             shift and go to state 28
    FMT             shift and go to state 30
    INT             shift and go to state 13
    FLOAT           shift and go to state 31

    repeatLines                    shift and go to state 192
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    mathExp                        shift and go to state 25
    number                         shift and go to state 29

state 191

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA . ID RPAREN RCURLY

    ID              shift and go to state 193


state 192

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 194


state 193

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID . RPAREN RCURLY

    RPAREN          shift and go to state 195


state 194

    (38) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .

    ID              reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    IF              reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    INT             reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    $end            reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 38 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)


state 195

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN . RCURLY

    RCURLY          shift and go to state 196


state 196

    (56) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .

    ID              reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CASE            reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FOR             reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    IF              reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FUNC            reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    SWITCH          reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    TYPE            reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RETURN          reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    VAR             reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FMT             reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    INT             reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FLOAT           reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    $end            reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RCURLY          reduce using rule 56 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 29 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 29 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 29 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 29 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 40 resolved as shift
WARNING: reduce/reduce conflict in state 50 resolved using rule (retorno -> ID)
WARNING: rejected rule (expression -> ID) in state 50
WARNING: reduce/reduce conflict in state 63 resolved using rule (value -> INT)
WARNING: rejected rule (line -> ID EQUALSVAR INT) in state 63
WARNING: Rule (line -> ID EQUALSVAR INT) is never reduced
