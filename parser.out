Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPORT
    NEW
    PACKAGE
    PI
    POW
    PRINT
    WHILE
    XCENTAGE

Grammar

Rule 0     S' -> program
Rule 1     program -> repeatLines
Rule 2     value -> INT
Rule 3     value -> FLOAT
Rule 4     value -> STR
Rule 5     value -> ID
Rule 6     repeatLines -> line
Rule 7     repeatLines -> line repeatLines
Rule 8     line -> ID EQUALSVAR value
Rule 9     line -> stamentFor
Rule 10    line -> consulta
Rule 11    line -> push
Rule 12    line -> funcion
Rule 13    line -> array
Rule 14    line -> slice
Rule 15    line -> mathExpProd
Rule 16    line -> CASE INT TWODOTS line
Rule 17    line -> switch
Rule 18    line -> pila
Rule 19    line -> func_declaration
Rule 20    line -> ID EQUALSVAR INT
Rule 21    line -> retorno
Rule 22    line -> declaration
Rule 23    line -> sentence
Rule 24    line -> return
Rule 25    line -> defer_statement
Rule 26    line -> case_statements
Rule 27    line -> constant_declaration
Rule 28    line -> list_function
Rule 29    line -> emptySlice
Rule 30    line -> mainFunction
Rule 31    retorno -> ID
Rule 32    retorno -> ID COMMA
Rule 33    retorno -> RETURN retorno
Rule 34    expression -> ID comparator ID
Rule 35    expression -> ID comparator INT
Rule 36    expression -> ID
Rule 37    expression -> list_function comparator INT
Rule 38    expression -> list_function comparator ID
Rule 39    comparator -> COMPARE
Rule 40    comparator -> MORETHAN
Rule 41    comparator -> MINUSTHAN
Rule 42    operator -> DIVIDE
Rule 43    operator -> MINUS
Rule 44    operator -> PLUS
Rule 45    operator -> TIMES
Rule 46    stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
Rule 47    switch -> SWITCH ID LCURLY repeatLines RCURLY
Rule 48    consulta -> IF expression LCURLY statements RCURLY
Rule 49    consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
Rule 50    statements -> statement
Rule 51    statements -> statement COMMA statements
Rule 52    statement -> ID
Rule 53    statement -> sentence
Rule 54    number -> INT
Rule 55    number -> FLOAT
Rule 56    array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
Rule 57    elemArray -> number
Rule 58    elemArray -> number COMMA elemArray
Rule 59    slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
Rule 60    emptySlice -> ID LBRACKETS RBRACKETS ID
Rule 61    elemSlice -> number
Rule 62    elemSlice -> number COMMA elemSlice
Rule 63    pila -> TYPE STACK LBRACKETS RBRACKETS ID
Rule 64    pila -> TYPE STACK INTERFACE LCURLY RCURLY
Rule 65    pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
Rule 66    push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
Rule 67    funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 68    func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
Rule 69    return_types -> ID COMMA ID
Rule 70    return_types -> ID
Rule 71    funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 72    funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
Rule 73    mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
Rule 74    param_list -> param
Rule 75    param_list -> param_list COMMA param
Rule 76    param -> value ID
Rule 77    param -> emptySlice
Rule 78    list_function -> ID LPAREN param_list RPAREN
Rule 79    list_function -> LEN LPAREN ID RPAREN
Rule 80    declaration -> VAR ID ID
Rule 81    declaration -> VAR ID ID EQUALSVAR number
Rule 82    declaration -> VAR ID ID EQUALSVAR STR
Rule 83    mathExp -> number
Rule 84    mathExp -> number operator number
Rule 85    mathExpProd -> mathExp
Rule 86    mathExpProd -> mathExp operator mathExpProd
Rule 87    sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN
Rule 88    sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN
Rule 89    argument -> STR
Rule 90    argument -> ID
Rule 91    arguments -> argument
Rule 92    arguments -> argument COMMA arguments
Rule 93    return -> RETURN expression
Rule 94    return -> RETURN INT
Rule 95    return -> RETURN sentence
Rule 96    case_statements -> CASE INT TWODOTS line
Rule 97    case_statements -> CASE INT TWODOTS line case_statements
Rule 98    case_statements -> DEFAULT TWODOTS line
Rule 99    defer_statement -> DEFER line
Rule 100   constant_declaration -> CONST variablenum
Rule 101   variablenum -> ID EQUALS number

Terminals, with rules where they appear

APPEND               : 66
CASE                 : 16 96 97
COMMA                : 32 51 58 62 66 66 69 75 92
COMPARE              : 39
CONST                : 100
DEFAULT              : 98
DEFER                : 99
DIVIDE               : 42
DOTCOMA              : 46 46
ELSE                 : 49
EQUALS               : 46 101
EQUALSVAR            : 8 20 56 59 81 82
FLOAT                : 3 55
FMT                  : 87 88
FOR                  : 46
FUNC                 : 66 67 68 71 72 73
ID                   : 5 8 20 31 32 34 34 35 36 38 46 46 46 46 47 52 56 56 59 59 60 60 63 65 66 66 66 66 66 67 67 68 69 69 70 71 71 71 72 76 78 79 80 80 81 81 82 82 90 101
IF                   : 48 49
IMPORT               : 
INT                  : 2 16 20 35 37 46 54 56 94 96 97
INTERFACE            : 64
LBRACKETS            : 56 59 60 63 65
LCURLY               : 46 47 48 49 49 56 59 64 65 66 67 68 71 72 73
LEN                  : 46 79
LPAREN               : 46 66 66 67 68 68 71 72 73 78 79 87 88
MAIN                 : 73
MINUS                : 43
MINUSTHAN            : 41 46
MORETHAN             : 40
NEW                  : 
PACKAGE              : 
PERIOD               : 87 88
PI                   : 
PLUS                 : 44 46 46
POW                  : 
PRINT                : 
PRINTF               : 88
PRINTLN              : 87
PUSH                 : 66
RBRACKETS            : 56 59 60 63 65
RCURLY               : 46 47 48 49 49 56 59 64 65 66 67 68 71 72 73
RETURN               : 33 66 67 71 93 94 95
RPAREN               : 46 66 66 67 68 68 71 72 73 78 79 87 88
STACK                : 63 64 65 66 66
STR                  : 4 82 89
STRUCT               : 65
SWITCH               : 47
TIMES                : 45
TWODOTS              : 16 96 97 98
TYPE                 : 63 64 65
VAR                  : 80 81 82
WHILE                : 
XCENTAGE             : 
error                : 

Nonterminals, with rules where they appear

argument             : 91 92
arguments            : 87 88 92
array                : 13
case_statements      : 26 97
comparator           : 34 35 37 38
constant_declaration : 27
consulta             : 10
declaration          : 22
defer_statement      : 25
elemArray            : 56 58
elemSlice            : 59 62
emptySlice           : 29 77
expression           : 48 49 93
func_declaration     : 19
funcion              : 12
line                 : 6 7 16 96 97 98 99
list_function        : 28 37 38
mainFunction         : 30
mathExp              : 85 86
mathExpProd          : 15 86
number               : 57 58 61 62 81 83 84 84 101
operator             : 84 86
param                : 74 75
param_list           : 71 72 75 78
pila                 : 18
program              : 0
push                 : 11
repeatLines          : 1 7 46 47 67 68 71 72 73
retorno              : 21 33
return               : 24
return_types         : 68
sentence             : 23 53 95
slice                : 14
stamentFor           : 9
statement            : 50 51
statements           : 48 49 49 51
switch               : 17
value                : 8 65 67 76
variablenum          : 100

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    program                        shift and go to state 1
    repeatLines                    shift and go to state 2
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 1

    (0) S' -> program .



state 2

    (1) program -> repeatLines .

    $end            reduce using rule 1 (program -> repeatLines .)


state 3

    (6) repeatLines -> line .
    (7) repeatLines -> line . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 6 (repeatLines -> line .)
    RCURLY          reduce using rule 6 (repeatLines -> line .)
    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

  ! RETURN          [ reduce using rule 6 (repeatLines -> line .) ]

    line                           shift and go to state 3
    repeatLines                    shift and go to state 42
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 4

    (8) line -> ID . EQUALSVAR value
    (20) line -> ID . EQUALSVAR INT
    (56) array -> ID . EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> ID . EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (31) retorno -> ID .
    (32) retorno -> ID . COMMA
    (78) list_function -> ID . LPAREN param_list RPAREN
    (60) emptySlice -> ID . LBRACKETS RBRACKETS ID

    EQUALSVAR       shift and go to state 43
    ID              reduce using rule 31 (retorno -> ID .)
    CASE            reduce using rule 31 (retorno -> ID .)
    FOR             reduce using rule 31 (retorno -> ID .)
    IF              reduce using rule 31 (retorno -> ID .)
    FUNC            reduce using rule 31 (retorno -> ID .)
    SWITCH          reduce using rule 31 (retorno -> ID .)
    TYPE            reduce using rule 31 (retorno -> ID .)
    RETURN          reduce using rule 31 (retorno -> ID .)
    VAR             reduce using rule 31 (retorno -> ID .)
    FMT             reduce using rule 31 (retorno -> ID .)
    DEFER           reduce using rule 31 (retorno -> ID .)
    DEFAULT         reduce using rule 31 (retorno -> ID .)
    CONST           reduce using rule 31 (retorno -> ID .)
    LEN             reduce using rule 31 (retorno -> ID .)
    INT             reduce using rule 31 (retorno -> ID .)
    FLOAT           reduce using rule 31 (retorno -> ID .)
    $end            reduce using rule 31 (retorno -> ID .)
    RCURLY          reduce using rule 31 (retorno -> ID .)
    COMMA           shift and go to state 45
    LPAREN          shift and go to state 46
    LBRACKETS       shift and go to state 44


state 5

    (9) line -> stamentFor .

    ID              reduce using rule 9 (line -> stamentFor .)
    CASE            reduce using rule 9 (line -> stamentFor .)
    FOR             reduce using rule 9 (line -> stamentFor .)
    IF              reduce using rule 9 (line -> stamentFor .)
    FUNC            reduce using rule 9 (line -> stamentFor .)
    SWITCH          reduce using rule 9 (line -> stamentFor .)
    TYPE            reduce using rule 9 (line -> stamentFor .)
    RETURN          reduce using rule 9 (line -> stamentFor .)
    VAR             reduce using rule 9 (line -> stamentFor .)
    FMT             reduce using rule 9 (line -> stamentFor .)
    DEFER           reduce using rule 9 (line -> stamentFor .)
    DEFAULT         reduce using rule 9 (line -> stamentFor .)
    CONST           reduce using rule 9 (line -> stamentFor .)
    LEN             reduce using rule 9 (line -> stamentFor .)
    INT             reduce using rule 9 (line -> stamentFor .)
    FLOAT           reduce using rule 9 (line -> stamentFor .)
    $end            reduce using rule 9 (line -> stamentFor .)
    RCURLY          reduce using rule 9 (line -> stamentFor .)


state 6

    (10) line -> consulta .

    ID              reduce using rule 10 (line -> consulta .)
    CASE            reduce using rule 10 (line -> consulta .)
    FOR             reduce using rule 10 (line -> consulta .)
    IF              reduce using rule 10 (line -> consulta .)
    FUNC            reduce using rule 10 (line -> consulta .)
    SWITCH          reduce using rule 10 (line -> consulta .)
    TYPE            reduce using rule 10 (line -> consulta .)
    RETURN          reduce using rule 10 (line -> consulta .)
    VAR             reduce using rule 10 (line -> consulta .)
    FMT             reduce using rule 10 (line -> consulta .)
    DEFER           reduce using rule 10 (line -> consulta .)
    DEFAULT         reduce using rule 10 (line -> consulta .)
    CONST           reduce using rule 10 (line -> consulta .)
    LEN             reduce using rule 10 (line -> consulta .)
    INT             reduce using rule 10 (line -> consulta .)
    FLOAT           reduce using rule 10 (line -> consulta .)
    $end            reduce using rule 10 (line -> consulta .)
    RCURLY          reduce using rule 10 (line -> consulta .)


state 7

    (11) line -> push .

    ID              reduce using rule 11 (line -> push .)
    CASE            reduce using rule 11 (line -> push .)
    FOR             reduce using rule 11 (line -> push .)
    IF              reduce using rule 11 (line -> push .)
    FUNC            reduce using rule 11 (line -> push .)
    SWITCH          reduce using rule 11 (line -> push .)
    TYPE            reduce using rule 11 (line -> push .)
    RETURN          reduce using rule 11 (line -> push .)
    VAR             reduce using rule 11 (line -> push .)
    FMT             reduce using rule 11 (line -> push .)
    DEFER           reduce using rule 11 (line -> push .)
    DEFAULT         reduce using rule 11 (line -> push .)
    CONST           reduce using rule 11 (line -> push .)
    LEN             reduce using rule 11 (line -> push .)
    INT             reduce using rule 11 (line -> push .)
    FLOAT           reduce using rule 11 (line -> push .)
    $end            reduce using rule 11 (line -> push .)
    RCURLY          reduce using rule 11 (line -> push .)


state 8

    (12) line -> funcion .

    ID              reduce using rule 12 (line -> funcion .)
    CASE            reduce using rule 12 (line -> funcion .)
    FOR             reduce using rule 12 (line -> funcion .)
    IF              reduce using rule 12 (line -> funcion .)
    FUNC            reduce using rule 12 (line -> funcion .)
    SWITCH          reduce using rule 12 (line -> funcion .)
    TYPE            reduce using rule 12 (line -> funcion .)
    RETURN          reduce using rule 12 (line -> funcion .)
    VAR             reduce using rule 12 (line -> funcion .)
    FMT             reduce using rule 12 (line -> funcion .)
    DEFER           reduce using rule 12 (line -> funcion .)
    DEFAULT         reduce using rule 12 (line -> funcion .)
    CONST           reduce using rule 12 (line -> funcion .)
    LEN             reduce using rule 12 (line -> funcion .)
    INT             reduce using rule 12 (line -> funcion .)
    FLOAT           reduce using rule 12 (line -> funcion .)
    $end            reduce using rule 12 (line -> funcion .)
    RCURLY          reduce using rule 12 (line -> funcion .)


state 9

    (13) line -> array .

    ID              reduce using rule 13 (line -> array .)
    CASE            reduce using rule 13 (line -> array .)
    FOR             reduce using rule 13 (line -> array .)
    IF              reduce using rule 13 (line -> array .)
    FUNC            reduce using rule 13 (line -> array .)
    SWITCH          reduce using rule 13 (line -> array .)
    TYPE            reduce using rule 13 (line -> array .)
    RETURN          reduce using rule 13 (line -> array .)
    VAR             reduce using rule 13 (line -> array .)
    FMT             reduce using rule 13 (line -> array .)
    DEFER           reduce using rule 13 (line -> array .)
    DEFAULT         reduce using rule 13 (line -> array .)
    CONST           reduce using rule 13 (line -> array .)
    LEN             reduce using rule 13 (line -> array .)
    INT             reduce using rule 13 (line -> array .)
    FLOAT           reduce using rule 13 (line -> array .)
    $end            reduce using rule 13 (line -> array .)
    RCURLY          reduce using rule 13 (line -> array .)


state 10

    (14) line -> slice .

    ID              reduce using rule 14 (line -> slice .)
    CASE            reduce using rule 14 (line -> slice .)
    FOR             reduce using rule 14 (line -> slice .)
    IF              reduce using rule 14 (line -> slice .)
    FUNC            reduce using rule 14 (line -> slice .)
    SWITCH          reduce using rule 14 (line -> slice .)
    TYPE            reduce using rule 14 (line -> slice .)
    RETURN          reduce using rule 14 (line -> slice .)
    VAR             reduce using rule 14 (line -> slice .)
    FMT             reduce using rule 14 (line -> slice .)
    DEFER           reduce using rule 14 (line -> slice .)
    DEFAULT         reduce using rule 14 (line -> slice .)
    CONST           reduce using rule 14 (line -> slice .)
    LEN             reduce using rule 14 (line -> slice .)
    INT             reduce using rule 14 (line -> slice .)
    FLOAT           reduce using rule 14 (line -> slice .)
    $end            reduce using rule 14 (line -> slice .)
    RCURLY          reduce using rule 14 (line -> slice .)


state 11

    (15) line -> mathExpProd .

    ID              reduce using rule 15 (line -> mathExpProd .)
    CASE            reduce using rule 15 (line -> mathExpProd .)
    FOR             reduce using rule 15 (line -> mathExpProd .)
    IF              reduce using rule 15 (line -> mathExpProd .)
    FUNC            reduce using rule 15 (line -> mathExpProd .)
    SWITCH          reduce using rule 15 (line -> mathExpProd .)
    TYPE            reduce using rule 15 (line -> mathExpProd .)
    RETURN          reduce using rule 15 (line -> mathExpProd .)
    VAR             reduce using rule 15 (line -> mathExpProd .)
    FMT             reduce using rule 15 (line -> mathExpProd .)
    DEFER           reduce using rule 15 (line -> mathExpProd .)
    DEFAULT         reduce using rule 15 (line -> mathExpProd .)
    CONST           reduce using rule 15 (line -> mathExpProd .)
    LEN             reduce using rule 15 (line -> mathExpProd .)
    INT             reduce using rule 15 (line -> mathExpProd .)
    FLOAT           reduce using rule 15 (line -> mathExpProd .)
    $end            reduce using rule 15 (line -> mathExpProd .)
    RCURLY          reduce using rule 15 (line -> mathExpProd .)


state 12

    (16) line -> CASE . INT TWODOTS line
    (96) case_statements -> CASE . INT TWODOTS line
    (97) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 47


state 13

    (54) number -> INT .

    DIVIDE          reduce using rule 54 (number -> INT .)
    MINUS           reduce using rule 54 (number -> INT .)
    PLUS            reduce using rule 54 (number -> INT .)
    TIMES           reduce using rule 54 (number -> INT .)
    ID              reduce using rule 54 (number -> INT .)
    CASE            reduce using rule 54 (number -> INT .)
    FOR             reduce using rule 54 (number -> INT .)
    IF              reduce using rule 54 (number -> INT .)
    FUNC            reduce using rule 54 (number -> INT .)
    SWITCH          reduce using rule 54 (number -> INT .)
    TYPE            reduce using rule 54 (number -> INT .)
    RETURN          reduce using rule 54 (number -> INT .)
    VAR             reduce using rule 54 (number -> INT .)
    FMT             reduce using rule 54 (number -> INT .)
    DEFER           reduce using rule 54 (number -> INT .)
    DEFAULT         reduce using rule 54 (number -> INT .)
    CONST           reduce using rule 54 (number -> INT .)
    LEN             reduce using rule 54 (number -> INT .)
    INT             reduce using rule 54 (number -> INT .)
    FLOAT           reduce using rule 54 (number -> INT .)
    $end            reduce using rule 54 (number -> INT .)
    RCURLY          reduce using rule 54 (number -> INT .)
    COMMA           reduce using rule 54 (number -> INT .)


state 14

    (17) line -> switch .

    ID              reduce using rule 17 (line -> switch .)
    CASE            reduce using rule 17 (line -> switch .)
    FOR             reduce using rule 17 (line -> switch .)
    IF              reduce using rule 17 (line -> switch .)
    FUNC            reduce using rule 17 (line -> switch .)
    SWITCH          reduce using rule 17 (line -> switch .)
    TYPE            reduce using rule 17 (line -> switch .)
    RETURN          reduce using rule 17 (line -> switch .)
    VAR             reduce using rule 17 (line -> switch .)
    FMT             reduce using rule 17 (line -> switch .)
    DEFER           reduce using rule 17 (line -> switch .)
    DEFAULT         reduce using rule 17 (line -> switch .)
    CONST           reduce using rule 17 (line -> switch .)
    LEN             reduce using rule 17 (line -> switch .)
    INT             reduce using rule 17 (line -> switch .)
    FLOAT           reduce using rule 17 (line -> switch .)
    $end            reduce using rule 17 (line -> switch .)
    RCURLY          reduce using rule 17 (line -> switch .)


state 15

    (18) line -> pila .

    ID              reduce using rule 18 (line -> pila .)
    CASE            reduce using rule 18 (line -> pila .)
    FOR             reduce using rule 18 (line -> pila .)
    IF              reduce using rule 18 (line -> pila .)
    FUNC            reduce using rule 18 (line -> pila .)
    SWITCH          reduce using rule 18 (line -> pila .)
    TYPE            reduce using rule 18 (line -> pila .)
    RETURN          reduce using rule 18 (line -> pila .)
    VAR             reduce using rule 18 (line -> pila .)
    FMT             reduce using rule 18 (line -> pila .)
    DEFER           reduce using rule 18 (line -> pila .)
    DEFAULT         reduce using rule 18 (line -> pila .)
    CONST           reduce using rule 18 (line -> pila .)
    LEN             reduce using rule 18 (line -> pila .)
    INT             reduce using rule 18 (line -> pila .)
    FLOAT           reduce using rule 18 (line -> pila .)
    $end            reduce using rule 18 (line -> pila .)
    RCURLY          reduce using rule 18 (line -> pila .)


state 16

    (19) line -> func_declaration .

    ID              reduce using rule 19 (line -> func_declaration .)
    CASE            reduce using rule 19 (line -> func_declaration .)
    FOR             reduce using rule 19 (line -> func_declaration .)
    IF              reduce using rule 19 (line -> func_declaration .)
    FUNC            reduce using rule 19 (line -> func_declaration .)
    SWITCH          reduce using rule 19 (line -> func_declaration .)
    TYPE            reduce using rule 19 (line -> func_declaration .)
    RETURN          reduce using rule 19 (line -> func_declaration .)
    VAR             reduce using rule 19 (line -> func_declaration .)
    FMT             reduce using rule 19 (line -> func_declaration .)
    DEFER           reduce using rule 19 (line -> func_declaration .)
    DEFAULT         reduce using rule 19 (line -> func_declaration .)
    CONST           reduce using rule 19 (line -> func_declaration .)
    LEN             reduce using rule 19 (line -> func_declaration .)
    INT             reduce using rule 19 (line -> func_declaration .)
    FLOAT           reduce using rule 19 (line -> func_declaration .)
    $end            reduce using rule 19 (line -> func_declaration .)
    RCURLY          reduce using rule 19 (line -> func_declaration .)


state 17

    (21) line -> retorno .

    ID              reduce using rule 21 (line -> retorno .)
    CASE            reduce using rule 21 (line -> retorno .)
    FOR             reduce using rule 21 (line -> retorno .)
    IF              reduce using rule 21 (line -> retorno .)
    FUNC            reduce using rule 21 (line -> retorno .)
    SWITCH          reduce using rule 21 (line -> retorno .)
    TYPE            reduce using rule 21 (line -> retorno .)
    RETURN          reduce using rule 21 (line -> retorno .)
    VAR             reduce using rule 21 (line -> retorno .)
    FMT             reduce using rule 21 (line -> retorno .)
    DEFER           reduce using rule 21 (line -> retorno .)
    DEFAULT         reduce using rule 21 (line -> retorno .)
    CONST           reduce using rule 21 (line -> retorno .)
    LEN             reduce using rule 21 (line -> retorno .)
    INT             reduce using rule 21 (line -> retorno .)
    FLOAT           reduce using rule 21 (line -> retorno .)
    $end            reduce using rule 21 (line -> retorno .)
    RCURLY          reduce using rule 21 (line -> retorno .)


state 18

    (22) line -> declaration .

    ID              reduce using rule 22 (line -> declaration .)
    CASE            reduce using rule 22 (line -> declaration .)
    FOR             reduce using rule 22 (line -> declaration .)
    IF              reduce using rule 22 (line -> declaration .)
    FUNC            reduce using rule 22 (line -> declaration .)
    SWITCH          reduce using rule 22 (line -> declaration .)
    TYPE            reduce using rule 22 (line -> declaration .)
    RETURN          reduce using rule 22 (line -> declaration .)
    VAR             reduce using rule 22 (line -> declaration .)
    FMT             reduce using rule 22 (line -> declaration .)
    DEFER           reduce using rule 22 (line -> declaration .)
    DEFAULT         reduce using rule 22 (line -> declaration .)
    CONST           reduce using rule 22 (line -> declaration .)
    LEN             reduce using rule 22 (line -> declaration .)
    INT             reduce using rule 22 (line -> declaration .)
    FLOAT           reduce using rule 22 (line -> declaration .)
    $end            reduce using rule 22 (line -> declaration .)
    RCURLY          reduce using rule 22 (line -> declaration .)


state 19

    (23) line -> sentence .

    ID              reduce using rule 23 (line -> sentence .)
    CASE            reduce using rule 23 (line -> sentence .)
    FOR             reduce using rule 23 (line -> sentence .)
    IF              reduce using rule 23 (line -> sentence .)
    FUNC            reduce using rule 23 (line -> sentence .)
    SWITCH          reduce using rule 23 (line -> sentence .)
    TYPE            reduce using rule 23 (line -> sentence .)
    RETURN          reduce using rule 23 (line -> sentence .)
    VAR             reduce using rule 23 (line -> sentence .)
    FMT             reduce using rule 23 (line -> sentence .)
    DEFER           reduce using rule 23 (line -> sentence .)
    DEFAULT         reduce using rule 23 (line -> sentence .)
    CONST           reduce using rule 23 (line -> sentence .)
    LEN             reduce using rule 23 (line -> sentence .)
    INT             reduce using rule 23 (line -> sentence .)
    FLOAT           reduce using rule 23 (line -> sentence .)
    $end            reduce using rule 23 (line -> sentence .)
    RCURLY          reduce using rule 23 (line -> sentence .)


state 20

    (24) line -> return .

    ID              reduce using rule 24 (line -> return .)
    CASE            reduce using rule 24 (line -> return .)
    FOR             reduce using rule 24 (line -> return .)
    IF              reduce using rule 24 (line -> return .)
    FUNC            reduce using rule 24 (line -> return .)
    SWITCH          reduce using rule 24 (line -> return .)
    TYPE            reduce using rule 24 (line -> return .)
    RETURN          reduce using rule 24 (line -> return .)
    VAR             reduce using rule 24 (line -> return .)
    FMT             reduce using rule 24 (line -> return .)
    DEFER           reduce using rule 24 (line -> return .)
    DEFAULT         reduce using rule 24 (line -> return .)
    CONST           reduce using rule 24 (line -> return .)
    LEN             reduce using rule 24 (line -> return .)
    INT             reduce using rule 24 (line -> return .)
    FLOAT           reduce using rule 24 (line -> return .)
    $end            reduce using rule 24 (line -> return .)
    RCURLY          reduce using rule 24 (line -> return .)


state 21

    (25) line -> defer_statement .

    ID              reduce using rule 25 (line -> defer_statement .)
    CASE            reduce using rule 25 (line -> defer_statement .)
    FOR             reduce using rule 25 (line -> defer_statement .)
    IF              reduce using rule 25 (line -> defer_statement .)
    FUNC            reduce using rule 25 (line -> defer_statement .)
    SWITCH          reduce using rule 25 (line -> defer_statement .)
    TYPE            reduce using rule 25 (line -> defer_statement .)
    RETURN          reduce using rule 25 (line -> defer_statement .)
    VAR             reduce using rule 25 (line -> defer_statement .)
    FMT             reduce using rule 25 (line -> defer_statement .)
    DEFER           reduce using rule 25 (line -> defer_statement .)
    DEFAULT         reduce using rule 25 (line -> defer_statement .)
    CONST           reduce using rule 25 (line -> defer_statement .)
    LEN             reduce using rule 25 (line -> defer_statement .)
    INT             reduce using rule 25 (line -> defer_statement .)
    FLOAT           reduce using rule 25 (line -> defer_statement .)
    $end            reduce using rule 25 (line -> defer_statement .)
    RCURLY          reduce using rule 25 (line -> defer_statement .)


state 22

    (26) line -> case_statements .

    ID              reduce using rule 26 (line -> case_statements .)
    CASE            reduce using rule 26 (line -> case_statements .)
    FOR             reduce using rule 26 (line -> case_statements .)
    IF              reduce using rule 26 (line -> case_statements .)
    FUNC            reduce using rule 26 (line -> case_statements .)
    SWITCH          reduce using rule 26 (line -> case_statements .)
    TYPE            reduce using rule 26 (line -> case_statements .)
    RETURN          reduce using rule 26 (line -> case_statements .)
    VAR             reduce using rule 26 (line -> case_statements .)
    FMT             reduce using rule 26 (line -> case_statements .)
    DEFER           reduce using rule 26 (line -> case_statements .)
    DEFAULT         reduce using rule 26 (line -> case_statements .)
    CONST           reduce using rule 26 (line -> case_statements .)
    LEN             reduce using rule 26 (line -> case_statements .)
    INT             reduce using rule 26 (line -> case_statements .)
    FLOAT           reduce using rule 26 (line -> case_statements .)
    $end            reduce using rule 26 (line -> case_statements .)
    RCURLY          reduce using rule 26 (line -> case_statements .)


state 23

    (27) line -> constant_declaration .

    ID              reduce using rule 27 (line -> constant_declaration .)
    CASE            reduce using rule 27 (line -> constant_declaration .)
    FOR             reduce using rule 27 (line -> constant_declaration .)
    IF              reduce using rule 27 (line -> constant_declaration .)
    FUNC            reduce using rule 27 (line -> constant_declaration .)
    SWITCH          reduce using rule 27 (line -> constant_declaration .)
    TYPE            reduce using rule 27 (line -> constant_declaration .)
    RETURN          reduce using rule 27 (line -> constant_declaration .)
    VAR             reduce using rule 27 (line -> constant_declaration .)
    FMT             reduce using rule 27 (line -> constant_declaration .)
    DEFER           reduce using rule 27 (line -> constant_declaration .)
    DEFAULT         reduce using rule 27 (line -> constant_declaration .)
    CONST           reduce using rule 27 (line -> constant_declaration .)
    LEN             reduce using rule 27 (line -> constant_declaration .)
    INT             reduce using rule 27 (line -> constant_declaration .)
    FLOAT           reduce using rule 27 (line -> constant_declaration .)
    $end            reduce using rule 27 (line -> constant_declaration .)
    RCURLY          reduce using rule 27 (line -> constant_declaration .)


state 24

    (28) line -> list_function .

    ID              reduce using rule 28 (line -> list_function .)
    CASE            reduce using rule 28 (line -> list_function .)
    FOR             reduce using rule 28 (line -> list_function .)
    IF              reduce using rule 28 (line -> list_function .)
    FUNC            reduce using rule 28 (line -> list_function .)
    SWITCH          reduce using rule 28 (line -> list_function .)
    TYPE            reduce using rule 28 (line -> list_function .)
    RETURN          reduce using rule 28 (line -> list_function .)
    VAR             reduce using rule 28 (line -> list_function .)
    FMT             reduce using rule 28 (line -> list_function .)
    DEFER           reduce using rule 28 (line -> list_function .)
    DEFAULT         reduce using rule 28 (line -> list_function .)
    CONST           reduce using rule 28 (line -> list_function .)
    LEN             reduce using rule 28 (line -> list_function .)
    INT             reduce using rule 28 (line -> list_function .)
    FLOAT           reduce using rule 28 (line -> list_function .)
    $end            reduce using rule 28 (line -> list_function .)
    RCURLY          reduce using rule 28 (line -> list_function .)


state 25

    (29) line -> emptySlice .

    ID              reduce using rule 29 (line -> emptySlice .)
    CASE            reduce using rule 29 (line -> emptySlice .)
    FOR             reduce using rule 29 (line -> emptySlice .)
    IF              reduce using rule 29 (line -> emptySlice .)
    FUNC            reduce using rule 29 (line -> emptySlice .)
    SWITCH          reduce using rule 29 (line -> emptySlice .)
    TYPE            reduce using rule 29 (line -> emptySlice .)
    RETURN          reduce using rule 29 (line -> emptySlice .)
    VAR             reduce using rule 29 (line -> emptySlice .)
    FMT             reduce using rule 29 (line -> emptySlice .)
    DEFER           reduce using rule 29 (line -> emptySlice .)
    DEFAULT         reduce using rule 29 (line -> emptySlice .)
    CONST           reduce using rule 29 (line -> emptySlice .)
    LEN             reduce using rule 29 (line -> emptySlice .)
    INT             reduce using rule 29 (line -> emptySlice .)
    FLOAT           reduce using rule 29 (line -> emptySlice .)
    $end            reduce using rule 29 (line -> emptySlice .)
    RCURLY          reduce using rule 29 (line -> emptySlice .)


state 26

    (30) line -> mainFunction .

    ID              reduce using rule 30 (line -> mainFunction .)
    CASE            reduce using rule 30 (line -> mainFunction .)
    FOR             reduce using rule 30 (line -> mainFunction .)
    IF              reduce using rule 30 (line -> mainFunction .)
    FUNC            reduce using rule 30 (line -> mainFunction .)
    SWITCH          reduce using rule 30 (line -> mainFunction .)
    TYPE            reduce using rule 30 (line -> mainFunction .)
    RETURN          reduce using rule 30 (line -> mainFunction .)
    VAR             reduce using rule 30 (line -> mainFunction .)
    FMT             reduce using rule 30 (line -> mainFunction .)
    DEFER           reduce using rule 30 (line -> mainFunction .)
    DEFAULT         reduce using rule 30 (line -> mainFunction .)
    CONST           reduce using rule 30 (line -> mainFunction .)
    LEN             reduce using rule 30 (line -> mainFunction .)
    INT             reduce using rule 30 (line -> mainFunction .)
    FLOAT           reduce using rule 30 (line -> mainFunction .)
    $end            reduce using rule 30 (line -> mainFunction .)
    RCURLY          reduce using rule 30 (line -> mainFunction .)


state 27

    (46) stamentFor -> FOR . ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 48


state 28

    (79) list_function -> LEN . LPAREN ID RPAREN

    LPAREN          shift and go to state 49


state 29

    (48) consulta -> IF . expression LCURLY statements RCURLY
    (49) consulta -> IF . expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (34) expression -> . ID comparator ID
    (35) expression -> . ID comparator INT
    (36) expression -> . ID
    (37) expression -> . list_function comparator INT
    (38) expression -> . list_function comparator ID
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN

    ID              shift and go to state 51
    LEN             shift and go to state 28

    expression                     shift and go to state 50
    list_function                  shift and go to state 52

state 30

    (66) push -> FUNC . PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> FUNC . value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> FUNC . ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> FUNC . ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (68) func_declaration -> FUNC . ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (73) mainFunction -> FUNC . MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    PUSH            shift and go to state 53
    ID              shift and go to state 54
    MAIN            shift and go to state 56
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STR             shift and go to state 59

    value                          shift and go to state 55

state 31

    (33) retorno -> RETURN . retorno
    (93) return -> RETURN . expression
    (94) return -> RETURN . INT
    (95) return -> RETURN . sentence
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (34) expression -> . ID comparator ID
    (35) expression -> . ID comparator INT
    (36) expression -> . ID
    (37) expression -> . list_function comparator INT
    (38) expression -> . list_function comparator ID
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN

    INT             shift and go to state 63
    ID              shift and go to state 65
    RETURN          shift and go to state 60
    FMT             shift and go to state 37
    LEN             shift and go to state 28

    retorno                        shift and go to state 61
    expression                     shift and go to state 62
    sentence                       shift and go to state 64
    list_function                  shift and go to state 52

state 32

    (85) mathExpProd -> mathExp .
    (86) mathExpProd -> mathExp . operator mathExpProd
    (42) operator -> . DIVIDE
    (43) operator -> . MINUS
    (44) operator -> . PLUS
    (45) operator -> . TIMES

    ID              reduce using rule 85 (mathExpProd -> mathExp .)
    CASE            reduce using rule 85 (mathExpProd -> mathExp .)
    FOR             reduce using rule 85 (mathExpProd -> mathExp .)
    IF              reduce using rule 85 (mathExpProd -> mathExp .)
    FUNC            reduce using rule 85 (mathExpProd -> mathExp .)
    SWITCH          reduce using rule 85 (mathExpProd -> mathExp .)
    TYPE            reduce using rule 85 (mathExpProd -> mathExp .)
    RETURN          reduce using rule 85 (mathExpProd -> mathExp .)
    VAR             reduce using rule 85 (mathExpProd -> mathExp .)
    FMT             reduce using rule 85 (mathExpProd -> mathExp .)
    DEFER           reduce using rule 85 (mathExpProd -> mathExp .)
    DEFAULT         reduce using rule 85 (mathExpProd -> mathExp .)
    CONST           reduce using rule 85 (mathExpProd -> mathExp .)
    LEN             reduce using rule 85 (mathExpProd -> mathExp .)
    INT             reduce using rule 85 (mathExpProd -> mathExp .)
    FLOAT           reduce using rule 85 (mathExpProd -> mathExp .)
    $end            reduce using rule 85 (mathExpProd -> mathExp .)
    RCURLY          reduce using rule 85 (mathExpProd -> mathExp .)
    DIVIDE          shift and go to state 67
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70

    operator                       shift and go to state 66

state 33

    (47) switch -> SWITCH . ID LCURLY repeatLines RCURLY

    ID              shift and go to state 71


state 34

    (63) pila -> TYPE . STACK LBRACKETS RBRACKETS ID
    (64) pila -> TYPE . STACK INTERFACE LCURLY RCURLY
    (65) pila -> TYPE . STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    STACK           shift and go to state 72


state 35

    (80) declaration -> VAR . ID ID
    (81) declaration -> VAR . ID ID EQUALSVAR number
    (82) declaration -> VAR . ID ID EQUALSVAR STR

    ID              shift and go to state 73


state 36

    (83) mathExp -> number .
    (84) mathExp -> number . operator number
    (42) operator -> . DIVIDE
    (43) operator -> . MINUS
    (44) operator -> . PLUS
    (45) operator -> . TIMES

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 83 (mathExp -> number .)
    CASE            reduce using rule 83 (mathExp -> number .)
    FOR             reduce using rule 83 (mathExp -> number .)
    IF              reduce using rule 83 (mathExp -> number .)
    FUNC            reduce using rule 83 (mathExp -> number .)
    SWITCH          reduce using rule 83 (mathExp -> number .)
    TYPE            reduce using rule 83 (mathExp -> number .)
    RETURN          reduce using rule 83 (mathExp -> number .)
    VAR             reduce using rule 83 (mathExp -> number .)
    FMT             reduce using rule 83 (mathExp -> number .)
    DEFER           reduce using rule 83 (mathExp -> number .)
    DEFAULT         reduce using rule 83 (mathExp -> number .)
    CONST           reduce using rule 83 (mathExp -> number .)
    LEN             reduce using rule 83 (mathExp -> number .)
    INT             reduce using rule 83 (mathExp -> number .)
    FLOAT           reduce using rule 83 (mathExp -> number .)
    $end            reduce using rule 83 (mathExp -> number .)
    RCURLY          reduce using rule 83 (mathExp -> number .)
    DIVIDE          shift and go to state 67
    MINUS           shift and go to state 68
    PLUS            shift and go to state 69
    TIMES           shift and go to state 70

  ! DIVIDE          [ reduce using rule 83 (mathExp -> number .) ]
  ! MINUS           [ reduce using rule 83 (mathExp -> number .) ]
  ! PLUS            [ reduce using rule 83 (mathExp -> number .) ]
  ! TIMES           [ reduce using rule 83 (mathExp -> number .) ]

    operator                       shift and go to state 74

state 37

    (87) sentence -> FMT . PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> FMT . PERIOD PRINTF LPAREN arguments RPAREN

    PERIOD          shift and go to state 75


state 38

    (99) defer_statement -> DEFER . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    line                           shift and go to state 76
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 39

    (98) case_statements -> DEFAULT . TWODOTS line

    TWODOTS         shift and go to state 77


state 40

    (100) constant_declaration -> CONST . variablenum
    (101) variablenum -> . ID EQUALS number

    ID              shift and go to state 79

    variablenum                    shift and go to state 78

state 41

    (55) number -> FLOAT .

    DIVIDE          reduce using rule 55 (number -> FLOAT .)
    MINUS           reduce using rule 55 (number -> FLOAT .)
    PLUS            reduce using rule 55 (number -> FLOAT .)
    TIMES           reduce using rule 55 (number -> FLOAT .)
    ID              reduce using rule 55 (number -> FLOAT .)
    CASE            reduce using rule 55 (number -> FLOAT .)
    FOR             reduce using rule 55 (number -> FLOAT .)
    IF              reduce using rule 55 (number -> FLOAT .)
    FUNC            reduce using rule 55 (number -> FLOAT .)
    SWITCH          reduce using rule 55 (number -> FLOAT .)
    TYPE            reduce using rule 55 (number -> FLOAT .)
    RETURN          reduce using rule 55 (number -> FLOAT .)
    VAR             reduce using rule 55 (number -> FLOAT .)
    FMT             reduce using rule 55 (number -> FLOAT .)
    DEFER           reduce using rule 55 (number -> FLOAT .)
    DEFAULT         reduce using rule 55 (number -> FLOAT .)
    CONST           reduce using rule 55 (number -> FLOAT .)
    LEN             reduce using rule 55 (number -> FLOAT .)
    INT             reduce using rule 55 (number -> FLOAT .)
    FLOAT           reduce using rule 55 (number -> FLOAT .)
    $end            reduce using rule 55 (number -> FLOAT .)
    RCURLY          reduce using rule 55 (number -> FLOAT .)
    COMMA           reduce using rule 55 (number -> FLOAT .)


state 42

    (7) repeatLines -> line repeatLines .

    $end            reduce using rule 7 (repeatLines -> line repeatLines .)
    RCURLY          reduce using rule 7 (repeatLines -> line repeatLines .)
    RETURN          reduce using rule 7 (repeatLines -> line repeatLines .)


state 43

    (8) line -> ID EQUALSVAR . value
    (20) line -> ID EQUALSVAR . INT
    (56) array -> ID EQUALSVAR . LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> ID EQUALSVAR . LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 82
    LBRACKETS       shift and go to state 83
    FLOAT           shift and go to state 58
    STR             shift and go to state 59
    ID              shift and go to state 80

    value                          shift and go to state 81

state 44

    (60) emptySlice -> ID LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 84


state 45

    (32) retorno -> ID COMMA .

    ID              reduce using rule 32 (retorno -> ID COMMA .)
    CASE            reduce using rule 32 (retorno -> ID COMMA .)
    FOR             reduce using rule 32 (retorno -> ID COMMA .)
    IF              reduce using rule 32 (retorno -> ID COMMA .)
    FUNC            reduce using rule 32 (retorno -> ID COMMA .)
    SWITCH          reduce using rule 32 (retorno -> ID COMMA .)
    TYPE            reduce using rule 32 (retorno -> ID COMMA .)
    RETURN          reduce using rule 32 (retorno -> ID COMMA .)
    VAR             reduce using rule 32 (retorno -> ID COMMA .)
    FMT             reduce using rule 32 (retorno -> ID COMMA .)
    DEFER           reduce using rule 32 (retorno -> ID COMMA .)
    DEFAULT         reduce using rule 32 (retorno -> ID COMMA .)
    CONST           reduce using rule 32 (retorno -> ID COMMA .)
    LEN             reduce using rule 32 (retorno -> ID COMMA .)
    INT             reduce using rule 32 (retorno -> ID COMMA .)
    FLOAT           reduce using rule 32 (retorno -> ID COMMA .)
    $end            reduce using rule 32 (retorno -> ID COMMA .)
    RCURLY          reduce using rule 32 (retorno -> ID COMMA .)


state 46

    (78) list_function -> ID LPAREN . param_list RPAREN
    (74) param_list -> . param
    (75) param_list -> . param_list COMMA param
    (76) param -> . value ID
    (77) param -> . emptySlice
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STR             shift and go to state 59
    ID              shift and go to state 85

    param_list                     shift and go to state 86
    param                          shift and go to state 87
    value                          shift and go to state 88
    emptySlice                     shift and go to state 89

state 47

    (16) line -> CASE INT . TWODOTS line
    (96) case_statements -> CASE INT . TWODOTS line
    (97) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 90


state 48

    (46) stamentFor -> FOR ID . EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    EQUALS          shift and go to state 91


state 49

    (79) list_function -> LEN LPAREN . ID RPAREN

    ID              shift and go to state 92


state 50

    (48) consulta -> IF expression . LCURLY statements RCURLY
    (49) consulta -> IF expression . LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LCURLY          shift and go to state 93


state 51

    (34) expression -> ID . comparator ID
    (35) expression -> ID . comparator INT
    (36) expression -> ID .
    (78) list_function -> ID . LPAREN param_list RPAREN
    (39) comparator -> . COMPARE
    (40) comparator -> . MORETHAN
    (41) comparator -> . MINUSTHAN

    LCURLY          reduce using rule 36 (expression -> ID .)
    LPAREN          shift and go to state 46
    COMPARE         shift and go to state 95
    MORETHAN        shift and go to state 96
    MINUSTHAN       shift and go to state 97

    comparator                     shift and go to state 94

state 52

    (37) expression -> list_function . comparator INT
    (38) expression -> list_function . comparator ID
    (39) comparator -> . COMPARE
    (40) comparator -> . MORETHAN
    (41) comparator -> . MINUSTHAN

    COMPARE         shift and go to state 95
    MORETHAN        shift and go to state 96
    MINUSTHAN       shift and go to state 97

    comparator                     shift and go to state 98

state 53

    (66) push -> FUNC PUSH . LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 99


state 54

    (71) funcion -> FUNC ID . LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> FUNC ID . LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (68) func_declaration -> FUNC ID . LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (5) value -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 100

  ! LPAREN          [ reduce using rule 5 (value -> ID .) ]


state 55

    (67) funcion -> FUNC value . LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    LPAREN          shift and go to state 101


state 56

    (73) mainFunction -> FUNC MAIN . LPAREN RPAREN LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 102


state 57

    (2) value -> INT .

    LPAREN          reduce using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)


state 58

    (3) value -> FLOAT .

    LPAREN          reduce using rule 3 (value -> FLOAT .)
    ID              reduce using rule 3 (value -> FLOAT .)
    CASE            reduce using rule 3 (value -> FLOAT .)
    FOR             reduce using rule 3 (value -> FLOAT .)
    IF              reduce using rule 3 (value -> FLOAT .)
    FUNC            reduce using rule 3 (value -> FLOAT .)
    SWITCH          reduce using rule 3 (value -> FLOAT .)
    TYPE            reduce using rule 3 (value -> FLOAT .)
    RETURN          reduce using rule 3 (value -> FLOAT .)
    VAR             reduce using rule 3 (value -> FLOAT .)
    FMT             reduce using rule 3 (value -> FLOAT .)
    DEFER           reduce using rule 3 (value -> FLOAT .)
    DEFAULT         reduce using rule 3 (value -> FLOAT .)
    CONST           reduce using rule 3 (value -> FLOAT .)
    LEN             reduce using rule 3 (value -> FLOAT .)
    INT             reduce using rule 3 (value -> FLOAT .)
    FLOAT           reduce using rule 3 (value -> FLOAT .)
    $end            reduce using rule 3 (value -> FLOAT .)
    RCURLY          reduce using rule 3 (value -> FLOAT .)


state 59

    (4) value -> STR .

    LPAREN          reduce using rule 4 (value -> STR .)
    ID              reduce using rule 4 (value -> STR .)
    CASE            reduce using rule 4 (value -> STR .)
    FOR             reduce using rule 4 (value -> STR .)
    IF              reduce using rule 4 (value -> STR .)
    FUNC            reduce using rule 4 (value -> STR .)
    SWITCH          reduce using rule 4 (value -> STR .)
    TYPE            reduce using rule 4 (value -> STR .)
    RETURN          reduce using rule 4 (value -> STR .)
    VAR             reduce using rule 4 (value -> STR .)
    FMT             reduce using rule 4 (value -> STR .)
    DEFER           reduce using rule 4 (value -> STR .)
    DEFAULT         reduce using rule 4 (value -> STR .)
    CONST           reduce using rule 4 (value -> STR .)
    LEN             reduce using rule 4 (value -> STR .)
    INT             reduce using rule 4 (value -> STR .)
    FLOAT           reduce using rule 4 (value -> STR .)
    $end            reduce using rule 4 (value -> STR .)
    RCURLY          reduce using rule 4 (value -> STR .)


state 60

    (33) retorno -> RETURN . retorno
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno

    ID              shift and go to state 103
    RETURN          shift and go to state 60

    retorno                        shift and go to state 61

state 61

    (33) retorno -> RETURN retorno .

    ID              reduce using rule 33 (retorno -> RETURN retorno .)
    CASE            reduce using rule 33 (retorno -> RETURN retorno .)
    FOR             reduce using rule 33 (retorno -> RETURN retorno .)
    IF              reduce using rule 33 (retorno -> RETURN retorno .)
    FUNC            reduce using rule 33 (retorno -> RETURN retorno .)
    SWITCH          reduce using rule 33 (retorno -> RETURN retorno .)
    TYPE            reduce using rule 33 (retorno -> RETURN retorno .)
    RETURN          reduce using rule 33 (retorno -> RETURN retorno .)
    VAR             reduce using rule 33 (retorno -> RETURN retorno .)
    FMT             reduce using rule 33 (retorno -> RETURN retorno .)
    DEFER           reduce using rule 33 (retorno -> RETURN retorno .)
    DEFAULT         reduce using rule 33 (retorno -> RETURN retorno .)
    CONST           reduce using rule 33 (retorno -> RETURN retorno .)
    LEN             reduce using rule 33 (retorno -> RETURN retorno .)
    INT             reduce using rule 33 (retorno -> RETURN retorno .)
    FLOAT           reduce using rule 33 (retorno -> RETURN retorno .)
    $end            reduce using rule 33 (retorno -> RETURN retorno .)
    RCURLY          reduce using rule 33 (retorno -> RETURN retorno .)


state 62

    (93) return -> RETURN expression .

    ID              reduce using rule 93 (return -> RETURN expression .)
    CASE            reduce using rule 93 (return -> RETURN expression .)
    FOR             reduce using rule 93 (return -> RETURN expression .)
    IF              reduce using rule 93 (return -> RETURN expression .)
    FUNC            reduce using rule 93 (return -> RETURN expression .)
    SWITCH          reduce using rule 93 (return -> RETURN expression .)
    TYPE            reduce using rule 93 (return -> RETURN expression .)
    RETURN          reduce using rule 93 (return -> RETURN expression .)
    VAR             reduce using rule 93 (return -> RETURN expression .)
    FMT             reduce using rule 93 (return -> RETURN expression .)
    DEFER           reduce using rule 93 (return -> RETURN expression .)
    DEFAULT         reduce using rule 93 (return -> RETURN expression .)
    CONST           reduce using rule 93 (return -> RETURN expression .)
    LEN             reduce using rule 93 (return -> RETURN expression .)
    INT             reduce using rule 93 (return -> RETURN expression .)
    FLOAT           reduce using rule 93 (return -> RETURN expression .)
    $end            reduce using rule 93 (return -> RETURN expression .)
    RCURLY          reduce using rule 93 (return -> RETURN expression .)


state 63

    (94) return -> RETURN INT .

    ID              reduce using rule 94 (return -> RETURN INT .)
    CASE            reduce using rule 94 (return -> RETURN INT .)
    FOR             reduce using rule 94 (return -> RETURN INT .)
    IF              reduce using rule 94 (return -> RETURN INT .)
    FUNC            reduce using rule 94 (return -> RETURN INT .)
    SWITCH          reduce using rule 94 (return -> RETURN INT .)
    TYPE            reduce using rule 94 (return -> RETURN INT .)
    RETURN          reduce using rule 94 (return -> RETURN INT .)
    VAR             reduce using rule 94 (return -> RETURN INT .)
    FMT             reduce using rule 94 (return -> RETURN INT .)
    DEFER           reduce using rule 94 (return -> RETURN INT .)
    DEFAULT         reduce using rule 94 (return -> RETURN INT .)
    CONST           reduce using rule 94 (return -> RETURN INT .)
    LEN             reduce using rule 94 (return -> RETURN INT .)
    INT             reduce using rule 94 (return -> RETURN INT .)
    FLOAT           reduce using rule 94 (return -> RETURN INT .)
    $end            reduce using rule 94 (return -> RETURN INT .)
    RCURLY          reduce using rule 94 (return -> RETURN INT .)


state 64

    (95) return -> RETURN sentence .

    ID              reduce using rule 95 (return -> RETURN sentence .)
    CASE            reduce using rule 95 (return -> RETURN sentence .)
    FOR             reduce using rule 95 (return -> RETURN sentence .)
    IF              reduce using rule 95 (return -> RETURN sentence .)
    FUNC            reduce using rule 95 (return -> RETURN sentence .)
    SWITCH          reduce using rule 95 (return -> RETURN sentence .)
    TYPE            reduce using rule 95 (return -> RETURN sentence .)
    RETURN          reduce using rule 95 (return -> RETURN sentence .)
    VAR             reduce using rule 95 (return -> RETURN sentence .)
    FMT             reduce using rule 95 (return -> RETURN sentence .)
    DEFER           reduce using rule 95 (return -> RETURN sentence .)
    DEFAULT         reduce using rule 95 (return -> RETURN sentence .)
    CONST           reduce using rule 95 (return -> RETURN sentence .)
    LEN             reduce using rule 95 (return -> RETURN sentence .)
    INT             reduce using rule 95 (return -> RETURN sentence .)
    FLOAT           reduce using rule 95 (return -> RETURN sentence .)
    $end            reduce using rule 95 (return -> RETURN sentence .)
    RCURLY          reduce using rule 95 (return -> RETURN sentence .)


state 65

    (31) retorno -> ID .
    (32) retorno -> ID . COMMA
    (34) expression -> ID . comparator ID
    (35) expression -> ID . comparator INT
    (36) expression -> ID .
    (78) list_function -> ID . LPAREN param_list RPAREN
    (39) comparator -> . COMPARE
    (40) comparator -> . MORETHAN
    (41) comparator -> . MINUSTHAN

  ! reduce/reduce conflict for ID resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 31 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 31 (retorno -> ID .)
    ID              reduce using rule 31 (retorno -> ID .)
    CASE            reduce using rule 31 (retorno -> ID .)
    FOR             reduce using rule 31 (retorno -> ID .)
    IF              reduce using rule 31 (retorno -> ID .)
    FUNC            reduce using rule 31 (retorno -> ID .)
    SWITCH          reduce using rule 31 (retorno -> ID .)
    TYPE            reduce using rule 31 (retorno -> ID .)
    RETURN          reduce using rule 31 (retorno -> ID .)
    VAR             reduce using rule 31 (retorno -> ID .)
    FMT             reduce using rule 31 (retorno -> ID .)
    DEFER           reduce using rule 31 (retorno -> ID .)
    DEFAULT         reduce using rule 31 (retorno -> ID .)
    CONST           reduce using rule 31 (retorno -> ID .)
    LEN             reduce using rule 31 (retorno -> ID .)
    INT             reduce using rule 31 (retorno -> ID .)
    FLOAT           reduce using rule 31 (retorno -> ID .)
    $end            reduce using rule 31 (retorno -> ID .)
    RCURLY          reduce using rule 31 (retorno -> ID .)
    COMMA           shift and go to state 45
    LPAREN          shift and go to state 46
    COMPARE         shift and go to state 95
    MORETHAN        shift and go to state 96
    MINUSTHAN       shift and go to state 97

  ! ID              [ reduce using rule 36 (expression -> ID .) ]
  ! CASE            [ reduce using rule 36 (expression -> ID .) ]
  ! FOR             [ reduce using rule 36 (expression -> ID .) ]
  ! IF              [ reduce using rule 36 (expression -> ID .) ]
  ! FUNC            [ reduce using rule 36 (expression -> ID .) ]
  ! SWITCH          [ reduce using rule 36 (expression -> ID .) ]
  ! TYPE            [ reduce using rule 36 (expression -> ID .) ]
  ! RETURN          [ reduce using rule 36 (expression -> ID .) ]
  ! VAR             [ reduce using rule 36 (expression -> ID .) ]
  ! FMT             [ reduce using rule 36 (expression -> ID .) ]
  ! DEFER           [ reduce using rule 36 (expression -> ID .) ]
  ! DEFAULT         [ reduce using rule 36 (expression -> ID .) ]
  ! CONST           [ reduce using rule 36 (expression -> ID .) ]
  ! LEN             [ reduce using rule 36 (expression -> ID .) ]
  ! INT             [ reduce using rule 36 (expression -> ID .) ]
  ! FLOAT           [ reduce using rule 36 (expression -> ID .) ]
  ! $end            [ reduce using rule 36 (expression -> ID .) ]
  ! RCURLY          [ reduce using rule 36 (expression -> ID .) ]

    comparator                     shift and go to state 94

state 66

    (86) mathExpProd -> mathExp operator . mathExpProd
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    mathExp                        shift and go to state 32
    mathExpProd                    shift and go to state 104
    number                         shift and go to state 36

state 67

    (42) operator -> DIVIDE .

    INT             reduce using rule 42 (operator -> DIVIDE .)
    FLOAT           reduce using rule 42 (operator -> DIVIDE .)


state 68

    (43) operator -> MINUS .

    INT             reduce using rule 43 (operator -> MINUS .)
    FLOAT           reduce using rule 43 (operator -> MINUS .)


state 69

    (44) operator -> PLUS .

    INT             reduce using rule 44 (operator -> PLUS .)
    FLOAT           reduce using rule 44 (operator -> PLUS .)


state 70

    (45) operator -> TIMES .

    INT             reduce using rule 45 (operator -> TIMES .)
    FLOAT           reduce using rule 45 (operator -> TIMES .)


state 71

    (47) switch -> SWITCH ID . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 105


state 72

    (63) pila -> TYPE STACK . LBRACKETS RBRACKETS ID
    (64) pila -> TYPE STACK . INTERFACE LCURLY RCURLY
    (65) pila -> TYPE STACK . STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 106
    INTERFACE       shift and go to state 107
    STRUCT          shift and go to state 108


state 73

    (80) declaration -> VAR ID . ID
    (81) declaration -> VAR ID . ID EQUALSVAR number
    (82) declaration -> VAR ID . ID EQUALSVAR STR

    ID              shift and go to state 109


state 74

    (84) mathExp -> number operator . number
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    number                         shift and go to state 110

state 75

    (87) sentence -> FMT PERIOD . PRINTLN LPAREN arguments RPAREN
    (88) sentence -> FMT PERIOD . PRINTF LPAREN arguments RPAREN

    PRINTLN         shift and go to state 111
    PRINTF          shift and go to state 112


state 76

    (99) defer_statement -> DEFER line .

    ID              reduce using rule 99 (defer_statement -> DEFER line .)
    CASE            reduce using rule 99 (defer_statement -> DEFER line .)
    FOR             reduce using rule 99 (defer_statement -> DEFER line .)
    IF              reduce using rule 99 (defer_statement -> DEFER line .)
    FUNC            reduce using rule 99 (defer_statement -> DEFER line .)
    SWITCH          reduce using rule 99 (defer_statement -> DEFER line .)
    TYPE            reduce using rule 99 (defer_statement -> DEFER line .)
    RETURN          reduce using rule 99 (defer_statement -> DEFER line .)
    VAR             reduce using rule 99 (defer_statement -> DEFER line .)
    FMT             reduce using rule 99 (defer_statement -> DEFER line .)
    DEFER           reduce using rule 99 (defer_statement -> DEFER line .)
    DEFAULT         reduce using rule 99 (defer_statement -> DEFER line .)
    CONST           reduce using rule 99 (defer_statement -> DEFER line .)
    LEN             reduce using rule 99 (defer_statement -> DEFER line .)
    INT             reduce using rule 99 (defer_statement -> DEFER line .)
    FLOAT           reduce using rule 99 (defer_statement -> DEFER line .)
    $end            reduce using rule 99 (defer_statement -> DEFER line .)
    RCURLY          reduce using rule 99 (defer_statement -> DEFER line .)


state 77

    (98) case_statements -> DEFAULT TWODOTS . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    line                           shift and go to state 113
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 78

    (100) constant_declaration -> CONST variablenum .

    ID              reduce using rule 100 (constant_declaration -> CONST variablenum .)
    CASE            reduce using rule 100 (constant_declaration -> CONST variablenum .)
    FOR             reduce using rule 100 (constant_declaration -> CONST variablenum .)
    IF              reduce using rule 100 (constant_declaration -> CONST variablenum .)
    FUNC            reduce using rule 100 (constant_declaration -> CONST variablenum .)
    SWITCH          reduce using rule 100 (constant_declaration -> CONST variablenum .)
    TYPE            reduce using rule 100 (constant_declaration -> CONST variablenum .)
    RETURN          reduce using rule 100 (constant_declaration -> CONST variablenum .)
    VAR             reduce using rule 100 (constant_declaration -> CONST variablenum .)
    FMT             reduce using rule 100 (constant_declaration -> CONST variablenum .)
    DEFER           reduce using rule 100 (constant_declaration -> CONST variablenum .)
    DEFAULT         reduce using rule 100 (constant_declaration -> CONST variablenum .)
    CONST           reduce using rule 100 (constant_declaration -> CONST variablenum .)
    LEN             reduce using rule 100 (constant_declaration -> CONST variablenum .)
    INT             reduce using rule 100 (constant_declaration -> CONST variablenum .)
    FLOAT           reduce using rule 100 (constant_declaration -> CONST variablenum .)
    $end            reduce using rule 100 (constant_declaration -> CONST variablenum .)
    RCURLY          reduce using rule 100 (constant_declaration -> CONST variablenum .)


state 79

    (101) variablenum -> ID . EQUALS number

    EQUALS          shift and go to state 114


state 80

    (5) value -> ID .

    ID              reduce using rule 5 (value -> ID .)
    CASE            reduce using rule 5 (value -> ID .)
    FOR             reduce using rule 5 (value -> ID .)
    IF              reduce using rule 5 (value -> ID .)
    FUNC            reduce using rule 5 (value -> ID .)
    SWITCH          reduce using rule 5 (value -> ID .)
    TYPE            reduce using rule 5 (value -> ID .)
    RETURN          reduce using rule 5 (value -> ID .)
    VAR             reduce using rule 5 (value -> ID .)
    FMT             reduce using rule 5 (value -> ID .)
    DEFER           reduce using rule 5 (value -> ID .)
    DEFAULT         reduce using rule 5 (value -> ID .)
    CONST           reduce using rule 5 (value -> ID .)
    LEN             reduce using rule 5 (value -> ID .)
    INT             reduce using rule 5 (value -> ID .)
    FLOAT           reduce using rule 5 (value -> ID .)
    $end            reduce using rule 5 (value -> ID .)
    RCURLY          reduce using rule 5 (value -> ID .)


state 81

    (8) line -> ID EQUALSVAR value .

    ID              reduce using rule 8 (line -> ID EQUALSVAR value .)
    CASE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    FOR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    IF              reduce using rule 8 (line -> ID EQUALSVAR value .)
    FUNC            reduce using rule 8 (line -> ID EQUALSVAR value .)
    SWITCH          reduce using rule 8 (line -> ID EQUALSVAR value .)
    TYPE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RETURN          reduce using rule 8 (line -> ID EQUALSVAR value .)
    VAR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FMT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFER           reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFAULT         reduce using rule 8 (line -> ID EQUALSVAR value .)
    CONST           reduce using rule 8 (line -> ID EQUALSVAR value .)
    LEN             reduce using rule 8 (line -> ID EQUALSVAR value .)
    INT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FLOAT           reduce using rule 8 (line -> ID EQUALSVAR value .)
    $end            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RCURLY          reduce using rule 8 (line -> ID EQUALSVAR value .)


state 82

    (20) line -> ID EQUALSVAR INT .
    (2) value -> INT .

  ! reduce/reduce conflict for ID resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FUNC resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for TYPE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FMT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFER resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CONST resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for LEN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    CASE            reduce using rule 2 (value -> INT .)
    FOR             reduce using rule 2 (value -> INT .)
    IF              reduce using rule 2 (value -> INT .)
    FUNC            reduce using rule 2 (value -> INT .)
    SWITCH          reduce using rule 2 (value -> INT .)
    TYPE            reduce using rule 2 (value -> INT .)
    RETURN          reduce using rule 2 (value -> INT .)
    VAR             reduce using rule 2 (value -> INT .)
    FMT             reduce using rule 2 (value -> INT .)
    DEFER           reduce using rule 2 (value -> INT .)
    DEFAULT         reduce using rule 2 (value -> INT .)
    CONST           reduce using rule 2 (value -> INT .)
    LEN             reduce using rule 2 (value -> INT .)
    INT             reduce using rule 2 (value -> INT .)
    FLOAT           reduce using rule 2 (value -> INT .)
    $end            reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)

  ! ID              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CASE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FOR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! IF              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FUNC            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! SWITCH          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! TYPE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RETURN          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! VAR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FMT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFER           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFAULT         [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CONST           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! LEN             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! INT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FLOAT           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! $end            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RCURLY          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]


state 83

    (56) array -> ID EQUALSVAR LBRACKETS . INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> ID EQUALSVAR LBRACKETS . RBRACKETS ID LCURLY elemSlice RCURLY

    INT             shift and go to state 115
    RBRACKETS       shift and go to state 116


state 84

    (60) emptySlice -> ID LBRACKETS RBRACKETS . ID

    ID              shift and go to state 117


state 85

    (5) value -> ID .
    (60) emptySlice -> ID . LBRACKETS RBRACKETS ID

    ID              reduce using rule 5 (value -> ID .)
    LBRACKETS       shift and go to state 44


state 86

    (78) list_function -> ID LPAREN param_list . RPAREN
    (75) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 118
    COMMA           shift and go to state 119


state 87

    (74) param_list -> param .

    RPAREN          reduce using rule 74 (param_list -> param .)
    COMMA           reduce using rule 74 (param_list -> param .)


state 88

    (76) param -> value . ID

    ID              shift and go to state 120


state 89

    (77) param -> emptySlice .

    RPAREN          reduce using rule 77 (param -> emptySlice .)
    COMMA           reduce using rule 77 (param -> emptySlice .)


state 90

    (16) line -> CASE INT TWODOTS . line
    (96) case_statements -> CASE INT TWODOTS . line
    (97) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    line                           shift and go to state 121
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 91

    (46) stamentFor -> FOR ID EQUALS . INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    INT             shift and go to state 122


state 92

    (79) list_function -> LEN LPAREN ID . RPAREN

    RPAREN          shift and go to state 123


state 93

    (48) consulta -> IF expression LCURLY . statements RCURLY
    (49) consulta -> IF expression LCURLY . statements RCURLY ELSE LCURLY statements RCURLY
    (50) statements -> . statement
    (51) statements -> . statement COMMA statements
    (52) statement -> . ID
    (53) statement -> . sentence
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN

    ID              shift and go to state 126
    FMT             shift and go to state 37

    statements                     shift and go to state 124
    statement                      shift and go to state 125
    sentence                       shift and go to state 127

state 94

    (34) expression -> ID comparator . ID
    (35) expression -> ID comparator . INT

    ID              shift and go to state 128
    INT             shift and go to state 129


state 95

    (39) comparator -> COMPARE .

    ID              reduce using rule 39 (comparator -> COMPARE .)
    INT             reduce using rule 39 (comparator -> COMPARE .)


state 96

    (40) comparator -> MORETHAN .

    ID              reduce using rule 40 (comparator -> MORETHAN .)
    INT             reduce using rule 40 (comparator -> MORETHAN .)


state 97

    (41) comparator -> MINUSTHAN .

    ID              reduce using rule 41 (comparator -> MINUSTHAN .)
    INT             reduce using rule 41 (comparator -> MINUSTHAN .)


state 98

    (37) expression -> list_function comparator . INT
    (38) expression -> list_function comparator . ID

    INT             shift and go to state 130
    ID              shift and go to state 131


state 99

    (66) push -> FUNC PUSH LPAREN . ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 132


state 100

    (71) funcion -> FUNC ID LPAREN . param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> FUNC ID LPAREN . param_list RPAREN LCURLY repeatLines RCURLY
    (68) func_declaration -> FUNC ID LPAREN . RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (74) param_list -> . param
    (75) param_list -> . param_list COMMA param
    (76) param -> . value ID
    (77) param -> . emptySlice
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID

    RPAREN          shift and go to state 134
    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STR             shift and go to state 59
    ID              shift and go to state 85

    param_list                     shift and go to state 133
    param                          shift and go to state 87
    value                          shift and go to state 88
    emptySlice                     shift and go to state 89

state 101

    (67) funcion -> FUNC value LPAREN . RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    RPAREN          shift and go to state 135


state 102

    (73) mainFunction -> FUNC MAIN LPAREN . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 136


state 103

    (31) retorno -> ID .
    (32) retorno -> ID . COMMA

    ID              reduce using rule 31 (retorno -> ID .)
    CASE            reduce using rule 31 (retorno -> ID .)
    FOR             reduce using rule 31 (retorno -> ID .)
    IF              reduce using rule 31 (retorno -> ID .)
    FUNC            reduce using rule 31 (retorno -> ID .)
    SWITCH          reduce using rule 31 (retorno -> ID .)
    TYPE            reduce using rule 31 (retorno -> ID .)
    RETURN          reduce using rule 31 (retorno -> ID .)
    VAR             reduce using rule 31 (retorno -> ID .)
    FMT             reduce using rule 31 (retorno -> ID .)
    DEFER           reduce using rule 31 (retorno -> ID .)
    DEFAULT         reduce using rule 31 (retorno -> ID .)
    CONST           reduce using rule 31 (retorno -> ID .)
    LEN             reduce using rule 31 (retorno -> ID .)
    INT             reduce using rule 31 (retorno -> ID .)
    FLOAT           reduce using rule 31 (retorno -> ID .)
    $end            reduce using rule 31 (retorno -> ID .)
    RCURLY          reduce using rule 31 (retorno -> ID .)
    COMMA           shift and go to state 45


state 104

    (86) mathExpProd -> mathExp operator mathExpProd .

    ID              reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    CASE            reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    FOR             reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    IF              reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    FUNC            reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    SWITCH          reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    TYPE            reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    RETURN          reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    VAR             reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    FMT             reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    DEFER           reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    DEFAULT         reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    CONST           reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    LEN             reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    INT             reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    FLOAT           reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    $end            reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)
    RCURLY          reduce using rule 86 (mathExpProd -> mathExp operator mathExpProd .)


state 105

    (47) switch -> SWITCH ID LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 137
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 106

    (63) pila -> TYPE STACK LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 138


state 107

    (64) pila -> TYPE STACK INTERFACE . LCURLY RCURLY

    LCURLY          shift and go to state 139


state 108

    (65) pila -> TYPE STACK STRUCT . LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LCURLY          shift and go to state 140


state 109

    (80) declaration -> VAR ID ID .
    (81) declaration -> VAR ID ID . EQUALSVAR number
    (82) declaration -> VAR ID ID . EQUALSVAR STR

    ID              reduce using rule 80 (declaration -> VAR ID ID .)
    CASE            reduce using rule 80 (declaration -> VAR ID ID .)
    FOR             reduce using rule 80 (declaration -> VAR ID ID .)
    IF              reduce using rule 80 (declaration -> VAR ID ID .)
    FUNC            reduce using rule 80 (declaration -> VAR ID ID .)
    SWITCH          reduce using rule 80 (declaration -> VAR ID ID .)
    TYPE            reduce using rule 80 (declaration -> VAR ID ID .)
    RETURN          reduce using rule 80 (declaration -> VAR ID ID .)
    VAR             reduce using rule 80 (declaration -> VAR ID ID .)
    FMT             reduce using rule 80 (declaration -> VAR ID ID .)
    DEFER           reduce using rule 80 (declaration -> VAR ID ID .)
    DEFAULT         reduce using rule 80 (declaration -> VAR ID ID .)
    CONST           reduce using rule 80 (declaration -> VAR ID ID .)
    LEN             reduce using rule 80 (declaration -> VAR ID ID .)
    INT             reduce using rule 80 (declaration -> VAR ID ID .)
    FLOAT           reduce using rule 80 (declaration -> VAR ID ID .)
    $end            reduce using rule 80 (declaration -> VAR ID ID .)
    RCURLY          reduce using rule 80 (declaration -> VAR ID ID .)
    EQUALSVAR       shift and go to state 141


state 110

    (84) mathExp -> number operator number .

    DIVIDE          reduce using rule 84 (mathExp -> number operator number .)
    MINUS           reduce using rule 84 (mathExp -> number operator number .)
    PLUS            reduce using rule 84 (mathExp -> number operator number .)
    TIMES           reduce using rule 84 (mathExp -> number operator number .)
    ID              reduce using rule 84 (mathExp -> number operator number .)
    CASE            reduce using rule 84 (mathExp -> number operator number .)
    FOR             reduce using rule 84 (mathExp -> number operator number .)
    IF              reduce using rule 84 (mathExp -> number operator number .)
    FUNC            reduce using rule 84 (mathExp -> number operator number .)
    SWITCH          reduce using rule 84 (mathExp -> number operator number .)
    TYPE            reduce using rule 84 (mathExp -> number operator number .)
    RETURN          reduce using rule 84 (mathExp -> number operator number .)
    VAR             reduce using rule 84 (mathExp -> number operator number .)
    FMT             reduce using rule 84 (mathExp -> number operator number .)
    DEFER           reduce using rule 84 (mathExp -> number operator number .)
    DEFAULT         reduce using rule 84 (mathExp -> number operator number .)
    CONST           reduce using rule 84 (mathExp -> number operator number .)
    LEN             reduce using rule 84 (mathExp -> number operator number .)
    INT             reduce using rule 84 (mathExp -> number operator number .)
    FLOAT           reduce using rule 84 (mathExp -> number operator number .)
    $end            reduce using rule 84 (mathExp -> number operator number .)
    RCURLY          reduce using rule 84 (mathExp -> number operator number .)


state 111

    (87) sentence -> FMT PERIOD PRINTLN . LPAREN arguments RPAREN

    LPAREN          shift and go to state 142


state 112

    (88) sentence -> FMT PERIOD PRINTF . LPAREN arguments RPAREN

    LPAREN          shift and go to state 143


state 113

    (98) case_statements -> DEFAULT TWODOTS line .

    ID              reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    CASE            reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    FOR             reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    IF              reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    FUNC            reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    SWITCH          reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    TYPE            reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    RETURN          reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    VAR             reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    FMT             reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    DEFER           reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    DEFAULT         reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    CONST           reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    LEN             reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    INT             reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    FLOAT           reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    $end            reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)
    RCURLY          reduce using rule 98 (case_statements -> DEFAULT TWODOTS line .)


state 114

    (101) variablenum -> ID EQUALS . number
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    number                         shift and go to state 144

state 115

    (56) array -> ID EQUALSVAR LBRACKETS INT . RBRACKETS ID LCURLY elemArray RCURLY

    RBRACKETS       shift and go to state 145


state 116

    (59) slice -> ID EQUALSVAR LBRACKETS RBRACKETS . ID LCURLY elemSlice RCURLY

    ID              shift and go to state 146


state 117

    (60) emptySlice -> ID LBRACKETS RBRACKETS ID .

    ID              reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    DEFER           reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    DEFAULT         reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    CONST           reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    LEN             reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RPAREN          reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    COMMA           reduce using rule 60 (emptySlice -> ID LBRACKETS RBRACKETS ID .)


state 118

    (78) list_function -> ID LPAREN param_list RPAREN .

    ID              reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    CASE            reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    FOR             reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    IF              reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    FUNC            reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    SWITCH          reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    TYPE            reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    RETURN          reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    VAR             reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    FMT             reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    DEFER           reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    DEFAULT         reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    CONST           reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    LEN             reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    INT             reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    $end            reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    RCURLY          reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    COMPARE         reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    MORETHAN        reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)
    MINUSTHAN       reduce using rule 78 (list_function -> ID LPAREN param_list RPAREN .)


state 119

    (75) param_list -> param_list COMMA . param
    (76) param -> . value ID
    (77) param -> . emptySlice
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STR             shift and go to state 59
    ID              shift and go to state 85

    param                          shift and go to state 147
    value                          shift and go to state 88
    emptySlice                     shift and go to state 89

state 120

    (76) param -> value ID .

    RPAREN          reduce using rule 76 (param -> value ID .)
    COMMA           reduce using rule 76 (param -> value ID .)


state 121

    (16) line -> CASE INT TWODOTS line .
    (96) case_statements -> CASE INT TWODOTS line .
    (97) case_statements -> CASE INT TWODOTS line . case_statements
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line

  ! reduce/reduce conflict for ID resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CASE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for IF resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FUNC resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for TYPE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FMT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFER resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CONST resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for LEN resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for INT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for $end resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RCURLY resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FOR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    IF              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    VAR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FMT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CONST           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    LEN             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    INT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    $end            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CASE            shift and go to state 148
    DEFAULT         shift and go to state 39

  ! CASE            [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! ID              [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! CASE            [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! FOR             [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! IF              [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! FUNC            [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! SWITCH          [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! TYPE            [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! RETURN          [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! VAR             [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! FMT             [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFER           [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! CONST           [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! LEN             [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! INT             [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! FLOAT           [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! $end            [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! RCURLY          [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 149

state 122

    (46) stamentFor -> FOR ID EQUALS INT . DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 150


state 123

    (79) list_function -> LEN LPAREN ID RPAREN .

    ID              reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    CASE            reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    FOR             reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    IF              reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    FUNC            reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    SWITCH          reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    TYPE            reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    RETURN          reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    VAR             reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    FMT             reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    DEFER           reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    DEFAULT         reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    CONST           reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    LEN             reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    INT             reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    FLOAT           reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    $end            reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    RCURLY          reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    COMPARE         reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    MORETHAN        reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)
    MINUSTHAN       reduce using rule 79 (list_function -> LEN LPAREN ID RPAREN .)


state 124

    (48) consulta -> IF expression LCURLY statements . RCURLY
    (49) consulta -> IF expression LCURLY statements . RCURLY ELSE LCURLY statements RCURLY

    RCURLY          shift and go to state 151


state 125

    (50) statements -> statement .
    (51) statements -> statement . COMMA statements

    RCURLY          reduce using rule 50 (statements -> statement .)
    COMMA           shift and go to state 152


state 126

    (52) statement -> ID .

    COMMA           reduce using rule 52 (statement -> ID .)
    RCURLY          reduce using rule 52 (statement -> ID .)


state 127

    (53) statement -> sentence .

    COMMA           reduce using rule 53 (statement -> sentence .)
    RCURLY          reduce using rule 53 (statement -> sentence .)


state 128

    (34) expression -> ID comparator ID .

    LCURLY          reduce using rule 34 (expression -> ID comparator ID .)
    ID              reduce using rule 34 (expression -> ID comparator ID .)
    CASE            reduce using rule 34 (expression -> ID comparator ID .)
    FOR             reduce using rule 34 (expression -> ID comparator ID .)
    IF              reduce using rule 34 (expression -> ID comparator ID .)
    FUNC            reduce using rule 34 (expression -> ID comparator ID .)
    SWITCH          reduce using rule 34 (expression -> ID comparator ID .)
    TYPE            reduce using rule 34 (expression -> ID comparator ID .)
    RETURN          reduce using rule 34 (expression -> ID comparator ID .)
    VAR             reduce using rule 34 (expression -> ID comparator ID .)
    FMT             reduce using rule 34 (expression -> ID comparator ID .)
    DEFER           reduce using rule 34 (expression -> ID comparator ID .)
    DEFAULT         reduce using rule 34 (expression -> ID comparator ID .)
    CONST           reduce using rule 34 (expression -> ID comparator ID .)
    LEN             reduce using rule 34 (expression -> ID comparator ID .)
    INT             reduce using rule 34 (expression -> ID comparator ID .)
    FLOAT           reduce using rule 34 (expression -> ID comparator ID .)
    $end            reduce using rule 34 (expression -> ID comparator ID .)
    RCURLY          reduce using rule 34 (expression -> ID comparator ID .)


state 129

    (35) expression -> ID comparator INT .

    LCURLY          reduce using rule 35 (expression -> ID comparator INT .)
    ID              reduce using rule 35 (expression -> ID comparator INT .)
    CASE            reduce using rule 35 (expression -> ID comparator INT .)
    FOR             reduce using rule 35 (expression -> ID comparator INT .)
    IF              reduce using rule 35 (expression -> ID comparator INT .)
    FUNC            reduce using rule 35 (expression -> ID comparator INT .)
    SWITCH          reduce using rule 35 (expression -> ID comparator INT .)
    TYPE            reduce using rule 35 (expression -> ID comparator INT .)
    RETURN          reduce using rule 35 (expression -> ID comparator INT .)
    VAR             reduce using rule 35 (expression -> ID comparator INT .)
    FMT             reduce using rule 35 (expression -> ID comparator INT .)
    DEFER           reduce using rule 35 (expression -> ID comparator INT .)
    DEFAULT         reduce using rule 35 (expression -> ID comparator INT .)
    CONST           reduce using rule 35 (expression -> ID comparator INT .)
    LEN             reduce using rule 35 (expression -> ID comparator INT .)
    INT             reduce using rule 35 (expression -> ID comparator INT .)
    FLOAT           reduce using rule 35 (expression -> ID comparator INT .)
    $end            reduce using rule 35 (expression -> ID comparator INT .)
    RCURLY          reduce using rule 35 (expression -> ID comparator INT .)


state 130

    (37) expression -> list_function comparator INT .

    LCURLY          reduce using rule 37 (expression -> list_function comparator INT .)
    ID              reduce using rule 37 (expression -> list_function comparator INT .)
    CASE            reduce using rule 37 (expression -> list_function comparator INT .)
    FOR             reduce using rule 37 (expression -> list_function comparator INT .)
    IF              reduce using rule 37 (expression -> list_function comparator INT .)
    FUNC            reduce using rule 37 (expression -> list_function comparator INT .)
    SWITCH          reduce using rule 37 (expression -> list_function comparator INT .)
    TYPE            reduce using rule 37 (expression -> list_function comparator INT .)
    RETURN          reduce using rule 37 (expression -> list_function comparator INT .)
    VAR             reduce using rule 37 (expression -> list_function comparator INT .)
    FMT             reduce using rule 37 (expression -> list_function comparator INT .)
    DEFER           reduce using rule 37 (expression -> list_function comparator INT .)
    DEFAULT         reduce using rule 37 (expression -> list_function comparator INT .)
    CONST           reduce using rule 37 (expression -> list_function comparator INT .)
    LEN             reduce using rule 37 (expression -> list_function comparator INT .)
    INT             reduce using rule 37 (expression -> list_function comparator INT .)
    FLOAT           reduce using rule 37 (expression -> list_function comparator INT .)
    $end            reduce using rule 37 (expression -> list_function comparator INT .)
    RCURLY          reduce using rule 37 (expression -> list_function comparator INT .)


state 131

    (38) expression -> list_function comparator ID .

    LCURLY          reduce using rule 38 (expression -> list_function comparator ID .)
    ID              reduce using rule 38 (expression -> list_function comparator ID .)
    CASE            reduce using rule 38 (expression -> list_function comparator ID .)
    FOR             reduce using rule 38 (expression -> list_function comparator ID .)
    IF              reduce using rule 38 (expression -> list_function comparator ID .)
    FUNC            reduce using rule 38 (expression -> list_function comparator ID .)
    SWITCH          reduce using rule 38 (expression -> list_function comparator ID .)
    TYPE            reduce using rule 38 (expression -> list_function comparator ID .)
    RETURN          reduce using rule 38 (expression -> list_function comparator ID .)
    VAR             reduce using rule 38 (expression -> list_function comparator ID .)
    FMT             reduce using rule 38 (expression -> list_function comparator ID .)
    DEFER           reduce using rule 38 (expression -> list_function comparator ID .)
    DEFAULT         reduce using rule 38 (expression -> list_function comparator ID .)
    CONST           reduce using rule 38 (expression -> list_function comparator ID .)
    LEN             reduce using rule 38 (expression -> list_function comparator ID .)
    INT             reduce using rule 38 (expression -> list_function comparator ID .)
    FLOAT           reduce using rule 38 (expression -> list_function comparator ID .)
    $end            reduce using rule 38 (expression -> list_function comparator ID .)
    RCURLY          reduce using rule 38 (expression -> list_function comparator ID .)


state 132

    (66) push -> FUNC PUSH LPAREN ID . STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 153


state 133

    (71) funcion -> FUNC ID LPAREN param_list . RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> FUNC ID LPAREN param_list . RPAREN LCURLY repeatLines RCURLY
    (75) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 154
    COMMA           shift and go to state 119


state 134

    (68) func_declaration -> FUNC ID LPAREN RPAREN . LPAREN return_types RPAREN LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 155


state 135

    (67) funcion -> FUNC value LPAREN RPAREN . ID LCURLY repeatLines RETURN ID RCURLY

    ID              shift and go to state 156


state 136

    (73) mainFunction -> FUNC MAIN LPAREN RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 157


state 137

    (47) switch -> SWITCH ID LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 158


state 138

    (63) pila -> TYPE STACK LBRACKETS RBRACKETS . ID

    ID              shift and go to state 159


state 139

    (64) pila -> TYPE STACK INTERFACE LCURLY . RCURLY

    RCURLY          shift and go to state 160


state 140

    (65) pila -> TYPE STACK STRUCT LCURLY . ID LBRACKETS RBRACKETS value RCURLY

    ID              shift and go to state 161


state 141

    (81) declaration -> VAR ID ID EQUALSVAR . number
    (82) declaration -> VAR ID ID EQUALSVAR . STR
    (54) number -> . INT
    (55) number -> . FLOAT

    STR             shift and go to state 163
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    number                         shift and go to state 162

state 142

    (87) sentence -> FMT PERIOD PRINTLN LPAREN . arguments RPAREN
    (91) arguments -> . argument
    (92) arguments -> . argument COMMA arguments
    (89) argument -> . STR
    (90) argument -> . ID

    STR             shift and go to state 166
    ID              shift and go to state 167

    arguments                      shift and go to state 164
    argument                       shift and go to state 165

state 143

    (88) sentence -> FMT PERIOD PRINTF LPAREN . arguments RPAREN
    (91) arguments -> . argument
    (92) arguments -> . argument COMMA arguments
    (89) argument -> . STR
    (90) argument -> . ID

    STR             shift and go to state 166
    ID              shift and go to state 167

    arguments                      shift and go to state 168
    argument                       shift and go to state 165

state 144

    (101) variablenum -> ID EQUALS number .

    ID              reduce using rule 101 (variablenum -> ID EQUALS number .)
    CASE            reduce using rule 101 (variablenum -> ID EQUALS number .)
    FOR             reduce using rule 101 (variablenum -> ID EQUALS number .)
    IF              reduce using rule 101 (variablenum -> ID EQUALS number .)
    FUNC            reduce using rule 101 (variablenum -> ID EQUALS number .)
    SWITCH          reduce using rule 101 (variablenum -> ID EQUALS number .)
    TYPE            reduce using rule 101 (variablenum -> ID EQUALS number .)
    RETURN          reduce using rule 101 (variablenum -> ID EQUALS number .)
    VAR             reduce using rule 101 (variablenum -> ID EQUALS number .)
    FMT             reduce using rule 101 (variablenum -> ID EQUALS number .)
    DEFER           reduce using rule 101 (variablenum -> ID EQUALS number .)
    DEFAULT         reduce using rule 101 (variablenum -> ID EQUALS number .)
    CONST           reduce using rule 101 (variablenum -> ID EQUALS number .)
    LEN             reduce using rule 101 (variablenum -> ID EQUALS number .)
    INT             reduce using rule 101 (variablenum -> ID EQUALS number .)
    FLOAT           reduce using rule 101 (variablenum -> ID EQUALS number .)
    $end            reduce using rule 101 (variablenum -> ID EQUALS number .)
    RCURLY          reduce using rule 101 (variablenum -> ID EQUALS number .)


state 145

    (56) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS . ID LCURLY elemArray RCURLY

    ID              shift and go to state 169


state 146

    (59) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID . LCURLY elemSlice RCURLY

    LCURLY          shift and go to state 170


state 147

    (75) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 75 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 75 (param_list -> param_list COMMA param .)


state 148

    (96) case_statements -> CASE . INT TWODOTS line
    (97) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 171


state 149

    (97) case_statements -> CASE INT TWODOTS line case_statements .

    ID              reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    CASE            reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    FOR             reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    IF              reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    FUNC            reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    SWITCH          reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    TYPE            reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    RETURN          reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    VAR             reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    FMT             reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFER           reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFAULT         reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    CONST           reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    LEN             reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    INT             reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    FLOAT           reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    $end            reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)
    RCURLY          reduce using rule 97 (case_statements -> CASE INT TWODOTS line case_statements .)


state 150

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA . ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 172


state 151

    (48) consulta -> IF expression LCURLY statements RCURLY .
    (49) consulta -> IF expression LCURLY statements RCURLY . ELSE LCURLY statements RCURLY

    ID              reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    CASE            reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    FOR             reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    IF              reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    FUNC            reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    SWITCH          reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    TYPE            reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    RETURN          reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    VAR             reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    FMT             reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFER           reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    CONST           reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    LEN             reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    INT             reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    FLOAT           reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    $end            reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    RCURLY          reduce using rule 48 (consulta -> IF expression LCURLY statements RCURLY .)
    ELSE            shift and go to state 173


state 152

    (51) statements -> statement COMMA . statements
    (50) statements -> . statement
    (51) statements -> . statement COMMA statements
    (52) statement -> . ID
    (53) statement -> . sentence
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN

    ID              shift and go to state 126
    FMT             shift and go to state 37

    statement                      shift and go to state 125
    statements                     shift and go to state 174
    sentence                       shift and go to state 127

state 153

    (66) push -> FUNC PUSH LPAREN ID STACK . COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 175


state 154

    (71) funcion -> FUNC ID LPAREN param_list RPAREN . ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> FUNC ID LPAREN param_list RPAREN . LCURLY repeatLines RCURLY

    ID              shift and go to state 176
    LCURLY          shift and go to state 177


state 155

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN . return_types RPAREN LCURLY repeatLines RCURLY
    (69) return_types -> . ID COMMA ID
    (70) return_types -> . ID

    ID              shift and go to state 178

    return_types                   shift and go to state 179

state 156

    (67) funcion -> FUNC value LPAREN RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 180


state 157

    (73) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 181
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 158

    (47) switch -> SWITCH ID LCURLY repeatLines RCURLY .

    ID              reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    IF              reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    INT             reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    $end            reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 47 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)


state 159

    (63) pila -> TYPE STACK LBRACKETS RBRACKETS ID .

    ID              reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFER           reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFAULT         reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CONST           reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    LEN             reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 63 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)


state 160

    (64) pila -> TYPE STACK INTERFACE LCURLY RCURLY .

    ID              reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CASE            reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FOR             reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    IF              reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FUNC            reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    SWITCH          reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    TYPE            reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RETURN          reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    VAR             reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FMT             reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFER           reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFAULT         reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CONST           reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    LEN             reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    INT             reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FLOAT           reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    $end            reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RCURLY          reduce using rule 64 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)


state 161

    (65) pila -> TYPE STACK STRUCT LCURLY ID . LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 182


state 162

    (81) declaration -> VAR ID ID EQUALSVAR number .

    ID              reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    CASE            reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    FOR             reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    IF              reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    FUNC            reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    SWITCH          reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    TYPE            reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    RETURN          reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    VAR             reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    FMT             reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFER           reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFAULT         reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    CONST           reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    LEN             reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    INT             reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    FLOAT           reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    $end            reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)
    RCURLY          reduce using rule 81 (declaration -> VAR ID ID EQUALSVAR number .)


state 163

    (82) declaration -> VAR ID ID EQUALSVAR STR .

    ID              reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    CASE            reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    FOR             reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    IF              reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    FUNC            reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    SWITCH          reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    TYPE            reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    RETURN          reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    VAR             reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    FMT             reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFER           reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFAULT         reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    CONST           reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    LEN             reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    INT             reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    FLOAT           reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    $end            reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)
    RCURLY          reduce using rule 82 (declaration -> VAR ID ID EQUALSVAR STR .)


state 164

    (87) sentence -> FMT PERIOD PRINTLN LPAREN arguments . RPAREN

    RPAREN          shift and go to state 183


state 165

    (91) arguments -> argument .
    (92) arguments -> argument . COMMA arguments

    RPAREN          reduce using rule 91 (arguments -> argument .)
    COMMA           shift and go to state 184


state 166

    (89) argument -> STR .

    COMMA           reduce using rule 89 (argument -> STR .)
    RPAREN          reduce using rule 89 (argument -> STR .)


state 167

    (90) argument -> ID .

    COMMA           reduce using rule 90 (argument -> ID .)
    RPAREN          reduce using rule 90 (argument -> ID .)


state 168

    (88) sentence -> FMT PERIOD PRINTF LPAREN arguments . RPAREN

    RPAREN          shift and go to state 185


state 169

    (56) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID . LCURLY elemArray RCURLY

    LCURLY          shift and go to state 186


state 170

    (59) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY . elemSlice RCURLY
    (61) elemSlice -> . number
    (62) elemSlice -> . number COMMA elemSlice
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    elemSlice                      shift and go to state 187
    number                         shift and go to state 188

state 171

    (96) case_statements -> CASE INT . TWODOTS line
    (97) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 189


state 172

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID . MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    MINUSTHAN       shift and go to state 190


state 173

    (49) consulta -> IF expression LCURLY statements RCURLY ELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 191


state 174

    (51) statements -> statement COMMA statements .

    RCURLY          reduce using rule 51 (statements -> statement COMMA statements .)


state 175

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA . ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 192


state 176

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 193


state 177

    (72) funcion -> FUNC ID LPAREN param_list RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 194
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 178

    (69) return_types -> ID . COMMA ID
    (70) return_types -> ID .

    COMMA           shift and go to state 195
    RPAREN          reduce using rule 70 (return_types -> ID .)


state 179

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 196


state 180

    (67) funcion -> FUNC value LPAREN RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 197
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 181

    (73) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 198


state 182

    (65) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS . RBRACKETS value RCURLY

    RBRACKETS       shift and go to state 199


state 183

    (87) sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .

    ID              reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    CASE            reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FOR             reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    IF              reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FUNC            reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    TYPE            reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    RETURN          reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    VAR             reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FMT             reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    DEFER           reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    CONST           reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    LEN             reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    INT             reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    $end            reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    RCURLY          reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    COMMA           reduce using rule 87 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)


state 184

    (92) arguments -> argument COMMA . arguments
    (91) arguments -> . argument
    (92) arguments -> . argument COMMA arguments
    (89) argument -> . STR
    (90) argument -> . ID

    STR             shift and go to state 166
    ID              shift and go to state 167

    argument                       shift and go to state 165
    arguments                      shift and go to state 200

state 185

    (88) sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .

    ID              reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    CASE            reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FOR             reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    IF              reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FUNC            reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    TYPE            reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    RETURN          reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    VAR             reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FMT             reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    DEFER           reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    CONST           reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    LEN             reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    INT             reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    $end            reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    RCURLY          reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    COMMA           reduce using rule 88 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)


state 186

    (56) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY . elemArray RCURLY
    (57) elemArray -> . number
    (58) elemArray -> . number COMMA elemArray
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    elemArray                      shift and go to state 201
    number                         shift and go to state 202

state 187

    (59) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice . RCURLY

    RCURLY          shift and go to state 203


state 188

    (61) elemSlice -> number .
    (62) elemSlice -> number . COMMA elemSlice

    RCURLY          reduce using rule 61 (elemSlice -> number .)
    COMMA           shift and go to state 204


state 189

    (96) case_statements -> CASE INT TWODOTS . line
    (97) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    line                           shift and go to state 205
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 190

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN . LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LEN             shift and go to state 206


state 191

    (49) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY . statements RCURLY
    (50) statements -> . statement
    (51) statements -> . statement COMMA statements
    (52) statement -> . ID
    (53) statement -> . sentence
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN

    ID              shift and go to state 126
    FMT             shift and go to state 37

    statements                     shift and go to state 207
    statement                      shift and go to state 125
    sentence                       shift and go to state 127

state 192

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID . ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 208


state 193

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 209
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 194

    (72) funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 210


state 195

    (69) return_types -> ID COMMA . ID

    ID              shift and go to state 211


state 196

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 212


state 197

    (67) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 213


state 198

    (73) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 73 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)


state 199

    (65) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS . value RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 57
    FLOAT           shift and go to state 58
    STR             shift and go to state 59
    ID              shift and go to state 80

    value                          shift and go to state 214

state 200

    (92) arguments -> argument COMMA arguments .

    RPAREN          reduce using rule 92 (arguments -> argument COMMA arguments .)


state 201

    (56) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray . RCURLY

    RCURLY          shift and go to state 215


state 202

    (57) elemArray -> number .
    (58) elemArray -> number . COMMA elemArray

    RCURLY          reduce using rule 57 (elemArray -> number .)
    COMMA           shift and go to state 216


state 203

    (59) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .

    ID              reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CASE            reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FOR             reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    IF              reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FUNC            reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    SWITCH          reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    TYPE            reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RETURN          reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    VAR             reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FMT             reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFER           reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFAULT         reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CONST           reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    LEN             reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    INT             reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FLOAT           reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    $end            reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RCURLY          reduce using rule 59 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)


state 204

    (62) elemSlice -> number COMMA . elemSlice
    (61) elemSlice -> . number
    (62) elemSlice -> . number COMMA elemSlice
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    number                         shift and go to state 188
    elemSlice                      shift and go to state 217

state 205

    (96) case_statements -> CASE INT TWODOTS line .
    (97) case_statements -> CASE INT TWODOTS line . case_statements
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    FOR             reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    IF              reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    VAR             reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    FMT             reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    CONST           reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    LEN             reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    INT             reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    $end            reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 96 (case_statements -> CASE INT TWODOTS line .)
    CASE            shift and go to state 148
    DEFAULT         shift and go to state 39

  ! CASE            [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 96 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 149

state 206

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN . LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 218


state 207

    (49) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 219


state 208

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID . RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RPAREN          shift and go to state 220


state 209

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 221


state 210

    (72) funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 72 (funcion -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)


state 211

    (69) return_types -> ID COMMA ID .

    RPAREN          reduce using rule 69 (return_types -> ID COMMA ID .)


state 212

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 222
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 213

    (67) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 223


state 214

    (65) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value . RCURLY

    RCURLY          shift and go to state 224


state 215

    (56) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .

    ID              reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CASE            reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FOR             reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    IF              reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FUNC            reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    SWITCH          reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    TYPE            reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RETURN          reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    VAR             reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FMT             reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFER           reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFAULT         reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CONST           reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    LEN             reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    INT             reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FLOAT           reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    $end            reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RCURLY          reduce using rule 56 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)


state 216

    (58) elemArray -> number COMMA . elemArray
    (57) elemArray -> . number
    (58) elemArray -> . number COMMA elemArray
    (54) number -> . INT
    (55) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    number                         shift and go to state 202
    elemArray                      shift and go to state 225

state 217

    (62) elemSlice -> number COMMA elemSlice .

    RCURLY          reduce using rule 62 (elemSlice -> number COMMA elemSlice .)


state 218

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN . ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 226


state 219

    (49) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .

    ID              reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CASE            reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FUNC            reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    SWITCH          reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    TYPE            reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    VAR             reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FMT             reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFER           reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CONST           reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    LEN             reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    INT             reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FLOAT           reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    $end            reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 49 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)


state 220

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN . STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 227


state 221

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 228


state 222

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 229


state 223

    (67) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 230


state 224

    (65) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .

    ID              reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CASE            reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FOR             reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    IF              reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FUNC            reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    SWITCH          reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    TYPE            reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RETURN          reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    VAR             reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FMT             reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFER           reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFAULT         reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CONST           reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    LEN             reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    INT             reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FLOAT           reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    $end            reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RCURLY          reduce using rule 65 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)


state 225

    (58) elemArray -> number COMMA elemArray .

    RCURLY          reduce using rule 58 (elemArray -> number COMMA elemArray .)


state 226

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID . RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 231


state 227

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK . LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LCURLY          shift and go to state 232


state 228

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 233


state 229

    (68) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 68 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)


state 230

    (67) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFER           reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFAULT         reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CONST           reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    LEN             reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 67 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 231

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN . DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 234


state 232

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY . RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RETURN          shift and go to state 235


state 233

    (71) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFER           reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFAULT         reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CONST           reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    LEN             reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 71 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 234

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA . ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 236


state 235

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN . APPEND LPAREN ID COMMA ID RPAREN RCURLY

    APPEND          shift and go to state 237


state 236

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID . PLUS PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 238


state 237

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND . LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 239


state 238

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS . PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 240


state 239

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN . ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 241


state 240

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 242


state 241

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID . COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 243


state 242

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (46) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (48) consulta -> . IF expression LCURLY statements RCURLY
    (49) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (66) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (67) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (71) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (72) funcion -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (56) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (59) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (85) mathExpProd -> . mathExp
    (86) mathExpProd -> . mathExp operator mathExpProd
    (47) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (63) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (64) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (65) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (68) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (31) retorno -> . ID
    (32) retorno -> . ID COMMA
    (33) retorno -> . RETURN retorno
    (80) declaration -> . VAR ID ID
    (81) declaration -> . VAR ID ID EQUALSVAR number
    (82) declaration -> . VAR ID ID EQUALSVAR STR
    (87) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (88) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (93) return -> . RETURN expression
    (94) return -> . RETURN INT
    (95) return -> . RETURN sentence
    (99) defer_statement -> . DEFER line
    (96) case_statements -> . CASE INT TWODOTS line
    (97) case_statements -> . CASE INT TWODOTS line case_statements
    (98) case_statements -> . DEFAULT TWODOTS line
    (100) constant_declaration -> . CONST variablenum
    (78) list_function -> . ID LPAREN param_list RPAREN
    (79) list_function -> . LEN LPAREN ID RPAREN
    (60) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (73) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (83) mathExp -> . number
    (84) mathExp -> . number operator number
    (54) number -> . INT
    (55) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 27
    IF              shift and go to state 29
    FUNC            shift and go to state 30
    SWITCH          shift and go to state 33
    TYPE            shift and go to state 34
    RETURN          shift and go to state 31
    VAR             shift and go to state 35
    FMT             shift and go to state 37
    DEFER           shift and go to state 38
    DEFAULT         shift and go to state 39
    CONST           shift and go to state 40
    LEN             shift and go to state 28
    INT             shift and go to state 13
    FLOAT           shift and go to state 41

    repeatLines                    shift and go to state 244
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    mathExp                        shift and go to state 32
    number                         shift and go to state 36

state 243

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA . ID RPAREN RCURLY

    ID              shift and go to state 245


state 244

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 246


state 245

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID . RPAREN RCURLY

    RPAREN          shift and go to state 247


state 246

    (46) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .

    ID              reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    IF              reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    INT             reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    $end            reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 46 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)


state 247

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN . RCURLY

    RCURLY          shift and go to state 248


state 248

    (66) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .

    ID              reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CASE            reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FOR             reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    IF              reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FUNC            reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    SWITCH          reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    TYPE            reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RETURN          reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    VAR             reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FMT             reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFER           reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFAULT         reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CONST           reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    LEN             reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    INT             reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FLOAT           reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    $end            reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RCURLY          reduce using rule 66 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 36 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 36 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 36 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 36 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 54 resolved as shift
WARNING: shift/reduce conflict for CASE in state 121 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 121 resolved as shift
WARNING: shift/reduce conflict for CASE in state 205 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 205 resolved as shift
WARNING: reduce/reduce conflict in state 65 resolved using rule (retorno -> ID)
WARNING: rejected rule (expression -> ID) in state 65
WARNING: reduce/reduce conflict in state 82 resolved using rule (value -> INT)
WARNING: rejected rule (line -> ID EQUALSVAR INT) in state 82
WARNING: reduce/reduce conflict in state 121 resolved using rule (line -> CASE INT TWODOTS line)
WARNING: rejected rule (case_statements -> CASE INT TWODOTS line) in state 121
WARNING: Rule (line -> ID EQUALSVAR INT) is never reduced
