Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPORT
    NEW
    PACKAGE
    PI
    POW
    PRINT
    WHILE
    XCENTAGE

Grammar

Rule 0     S' -> program
Rule 1     program -> repeatLines
Rule 2     value -> INT
Rule 3     value -> FLOAT
Rule 4     value -> STR
Rule 5     value -> ID
Rule 6     repeatLines -> line
Rule 7     repeatLines -> line repeatLines
Rule 8     line -> ID EQUALSVAR value
Rule 9     line -> stamentFor
Rule 10    line -> consulta
Rule 11    line -> push
Rule 12    line -> function
Rule 13    line -> array
Rule 14    line -> slice
Rule 15    line -> mathExpProd
Rule 16    line -> CASE INT TWODOTS line
Rule 17    line -> switch
Rule 18    line -> pila
Rule 19    line -> func_declaration
Rule 20    line -> ID EQUALSVAR INT
Rule 21    line -> retorno
Rule 22    line -> declaration
Rule 23    line -> sentence
Rule 24    line -> return
Rule 25    line -> defer_statement
Rule 26    line -> case_statements
Rule 27    line -> constant_declaration
Rule 28    line -> list_function
Rule 29    line -> emptySlice
Rule 30    line -> mainFunction
Rule 31    line -> expression
Rule 32    line -> statement
Rule 33    line -> functionAppend
Rule 34    line -> funcion
Rule 35    retorno -> ID
Rule 36    retorno -> ID COMMA
Rule 37    retorno -> RETURN retorno
Rule 38    expression -> ID comparator ID
Rule 39    expression -> ID comparator INT
Rule 40    expression -> ID
Rule 41    expression -> list_function comparator INT
Rule 42    expression -> list_function comparator ID
Rule 43    expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID
Rule 44    comparator -> COMPARE
Rule 45    comparator -> MORETHAN
Rule 46    comparator -> MINUSTHAN
Rule 47    operator -> DIVIDE
Rule 48    operator -> MINUS
Rule 49    operator -> PLUS
Rule 50    operator -> TIMES
Rule 51    stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
Rule 52    switch -> SWITCH ID LCURLY repeatLines RCURLY
Rule 53    consulta -> IF expression LCURLY statements RCURLY
Rule 54    consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
Rule 55    statements -> statement
Rule 56    statements -> statement statements
Rule 57    statement -> ID
Rule 58    statement -> sentence
Rule 59    statement -> ID EQUALS ID LBRACKETS ID RBRACKETS
Rule 60    statement -> functionAppend
Rule 61    number -> INT
Rule 62    number -> FLOAT
Rule 63    array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
Rule 64    elemArray -> number
Rule 65    elemArray -> number COMMA elemArray
Rule 66    slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
Rule 67    emptySlice -> ID LBRACKETS RBRACKETS ID
Rule 68    elemSlice -> number
Rule 69    elemSlice -> number COMMA elemSlice
Rule 70    pila -> TYPE STACK LBRACKETS RBRACKETS ID
Rule 71    pila -> TYPE STACK INTERFACE LCURLY RCURLY
Rule 72    pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
Rule 73    push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
Rule 74    funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
Rule 75    func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
Rule 76    return_types -> ID COMMA ID
Rule 77    return_types -> ID
Rule 78    function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 79    function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
Rule 80    functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN
Rule 81    mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
Rule 82    param_list -> param
Rule 83    param_list -> param_list COMMA param
Rule 84    param -> value ID
Rule 85    param -> emptySlice
Rule 86    param -> ID
Rule 87    param -> STR
Rule 88    param -> INT
Rule 89    list_function -> ID LPAREN param_list RPAREN
Rule 90    list_function -> LEN LPAREN ID RPAREN
Rule 91    call -> ID LPAREN param_list RPAREN
Rule 92    declaration -> VAR ID ID
Rule 93    declaration -> VAR ID ID EQUALSVAR number
Rule 94    declaration -> VAR ID ID EQUALSVAR STR
Rule 95    declaration -> VAR ID ID EQUALSVAR ID
Rule 96    declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
Rule 97    mathExp -> number
Rule 98    mathExp -> number operator number
Rule 99    mathExpProd -> mathExp
Rule 100   mathExpProd -> mathExp operator mathExpProd
Rule 101   sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN
Rule 102   sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN
Rule 103   argument -> STR
Rule 104   argument -> ID
Rule 105   arguments -> argument
Rule 106   arguments -> argument COMMA arguments
Rule 107   return -> RETURN expression
Rule 108   return -> RETURN INT
Rule 109   return -> RETURN sentence
Rule 110   case_statements -> CASE INT TWODOTS line
Rule 111   case_statements -> CASE INT TWODOTS line case_statements
Rule 112   case_statements -> DEFAULT TWODOTS line
Rule 113   defer_statement -> DEFER line
Rule 114   constant_declaration -> CONST variablenum
Rule 115   variablenum -> ID EQUALS number

Terminals, with rules where they appear

APPEND               : 73 80
CASE                 : 16 110 111
COMMA                : 36 65 69 73 73 76 83 106
COMPARE              : 44
CONST                : 114
DEFAULT              : 112
DEFER                : 113
DIVIDE               : 47
DOTCOMA              : 51 51
ELSE                 : 54
EQUALS               : 59 115
EQUALSVAR            : 8 20 51 63 66 80 93 94 95 96
FLOAT                : 3 62
FMT                  : 101 102
FOR                  : 51
FUNC                 : 73 74 75 78 79 81
ID                   : 5 8 20 35 36 38 38 39 40 42 43 43 43 51 51 51 51 52 57 59 59 59 63 63 66 66 67 67 70 72 73 73 73 73 73 74 74 75 76 76 77 78 78 78 79 80 84 86 89 90 91 92 92 93 93 94 94 95 95 95 96 96 104 115
IF                   : 53 54
IMPORT               : 
INT                  : 2 16 20 39 41 51 61 63 88 96 108 110 111
INTERFACE            : 71
LBRACKETS            : 43 59 63 66 67 70 72 96
LCURLY               : 51 52 53 54 54 63 66 71 72 73 74 75 78 79 81
LEN                  : 51 90
LPAREN               : 51 73 73 74 75 75 78 79 80 81 89 90 91 101 102
MAIN                 : 81
MINUS                : 48
MINUSTHAN            : 46 51
MORETHAN             : 43 45
NEW                  : 
PACKAGE              : 
PERIOD               : 101 102
PI                   : 
PLUS                 : 49 51 51
POW                  : 
PRINT                : 
PRINTF               : 102
PRINTLN              : 101
PUSH                 : 73
RBRACKETS            : 43 59 63 66 67 70 72 96
RCURLY               : 51 52 53 54 54 63 66 71 72 73 74 75 78 79 81
RETURN               : 37 73 78 107 108 109
RPAREN               : 51 73 73 74 75 75 78 79 80 81 89 90 91 101 102
STACK                : 70 71 72 73 73
STR                  : 4 87 94 103
STRUCT               : 72
SWITCH               : 52
TIMES                : 50
TWODOTS              : 16 110 111 112
TYPE                 : 70 71 72
VAR                  : 92 93 94 95 96
WHILE                : 
XCENTAGE             : 
error                : 

Nonterminals, with rules where they appear

argument             : 105 106
arguments            : 101 102 106
array                : 13
call                 : 
case_statements      : 26 111
comparator           : 38 39 41 42
constant_declaration : 27
consulta             : 10
declaration          : 22
defer_statement      : 25
elemArray            : 63 65
elemSlice            : 66 69
emptySlice           : 29 85
expression           : 31 53 54 107
func_declaration     : 19
funcion              : 34
function             : 12
functionAppend       : 33 60
line                 : 6 7 16 110 111 112 113
list_function        : 28 41 42
mainFunction         : 30
mathExp              : 99 100
mathExpProd          : 15 100
number               : 64 65 68 69 93 97 98 98 115
operator             : 98 100
param                : 82 83
param_list           : 78 79 80 83 89 91
pila                 : 18
program              : 0
push                 : 11
repeatLines          : 1 7 51 52 74 75 78 79 81
retorno              : 21 37
return               : 24
return_types         : 75
sentence             : 23 58 109
slice                : 14
stamentFor           : 9
statement            : 32 55 56
statements           : 53 54 54 56
switch               : 17
value                : 8 72 84
variablenum          : 114

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    program                        shift and go to state 1
    repeatLines                    shift and go to state 2
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 1

    (0) S' -> program .



state 2

    (1) program -> repeatLines .

    $end            reduce using rule 1 (program -> repeatLines .)


state 3

    (6) repeatLines -> line .
    (7) repeatLines -> line . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 6 (repeatLines -> line .)
    RCURLY          reduce using rule 6 (repeatLines -> line .)
    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

  ! RETURN          [ reduce using rule 6 (repeatLines -> line .) ]

    line                           shift and go to state 3
    repeatLines                    shift and go to state 46
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 4

    (8) line -> ID . EQUALSVAR value
    (20) line -> ID . EQUALSVAR INT
    (63) array -> ID . EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> ID . EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (35) retorno -> ID .
    (36) retorno -> ID . COMMA
    (89) list_function -> ID . LPAREN param_list RPAREN
    (67) emptySlice -> ID . LBRACKETS RBRACKETS ID
    (38) expression -> ID . comparator ID
    (39) expression -> ID . comparator INT
    (40) expression -> ID .
    (43) expression -> ID . LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> ID .
    (59) statement -> ID . EQUALS ID LBRACKETS ID RBRACKETS
    (80) functionAppend -> ID . EQUALSVAR APPEND LPAREN param_list RPAREN
    (44) comparator -> . COMPARE
    (45) comparator -> . MORETHAN
    (46) comparator -> . MINUSTHAN

  ! reduce/reduce conflict for ID resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for ID resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 35 (retorno -> ID .)
    EQUALSVAR       shift and go to state 47
    ID              reduce using rule 35 (retorno -> ID .)
    CASE            reduce using rule 35 (retorno -> ID .)
    FOR             reduce using rule 35 (retorno -> ID .)
    IF              reduce using rule 35 (retorno -> ID .)
    FUNC            reduce using rule 35 (retorno -> ID .)
    SWITCH          reduce using rule 35 (retorno -> ID .)
    TYPE            reduce using rule 35 (retorno -> ID .)
    RETURN          reduce using rule 35 (retorno -> ID .)
    VAR             reduce using rule 35 (retorno -> ID .)
    FMT             reduce using rule 35 (retorno -> ID .)
    DEFER           reduce using rule 35 (retorno -> ID .)
    DEFAULT         reduce using rule 35 (retorno -> ID .)
    CONST           reduce using rule 35 (retorno -> ID .)
    LEN             reduce using rule 35 (retorno -> ID .)
    INT             reduce using rule 35 (retorno -> ID .)
    FLOAT           reduce using rule 35 (retorno -> ID .)
    $end            reduce using rule 35 (retorno -> ID .)
    RCURLY          reduce using rule 35 (retorno -> ID .)
    COMMA           shift and go to state 49
    LPAREN          shift and go to state 50
    LBRACKETS       shift and go to state 48
    EQUALS          shift and go to state 53
    COMPARE         shift and go to state 54
    MORETHAN        shift and go to state 52
    MINUSTHAN       shift and go to state 55

  ! ID              [ reduce using rule 40 (expression -> ID .) ]
  ! CASE            [ reduce using rule 40 (expression -> ID .) ]
  ! FOR             [ reduce using rule 40 (expression -> ID .) ]
  ! IF              [ reduce using rule 40 (expression -> ID .) ]
  ! FUNC            [ reduce using rule 40 (expression -> ID .) ]
  ! SWITCH          [ reduce using rule 40 (expression -> ID .) ]
  ! TYPE            [ reduce using rule 40 (expression -> ID .) ]
  ! RETURN          [ reduce using rule 40 (expression -> ID .) ]
  ! VAR             [ reduce using rule 40 (expression -> ID .) ]
  ! FMT             [ reduce using rule 40 (expression -> ID .) ]
  ! DEFER           [ reduce using rule 40 (expression -> ID .) ]
  ! DEFAULT         [ reduce using rule 40 (expression -> ID .) ]
  ! CONST           [ reduce using rule 40 (expression -> ID .) ]
  ! LEN             [ reduce using rule 40 (expression -> ID .) ]
  ! INT             [ reduce using rule 40 (expression -> ID .) ]
  ! FLOAT           [ reduce using rule 40 (expression -> ID .) ]
  ! $end            [ reduce using rule 40 (expression -> ID .) ]
  ! RCURLY          [ reduce using rule 40 (expression -> ID .) ]
  ! ID              [ reduce using rule 57 (statement -> ID .) ]
  ! CASE            [ reduce using rule 57 (statement -> ID .) ]
  ! FOR             [ reduce using rule 57 (statement -> ID .) ]
  ! IF              [ reduce using rule 57 (statement -> ID .) ]
  ! FUNC            [ reduce using rule 57 (statement -> ID .) ]
  ! SWITCH          [ reduce using rule 57 (statement -> ID .) ]
  ! TYPE            [ reduce using rule 57 (statement -> ID .) ]
  ! RETURN          [ reduce using rule 57 (statement -> ID .) ]
  ! VAR             [ reduce using rule 57 (statement -> ID .) ]
  ! FMT             [ reduce using rule 57 (statement -> ID .) ]
  ! DEFER           [ reduce using rule 57 (statement -> ID .) ]
  ! DEFAULT         [ reduce using rule 57 (statement -> ID .) ]
  ! CONST           [ reduce using rule 57 (statement -> ID .) ]
  ! LEN             [ reduce using rule 57 (statement -> ID .) ]
  ! INT             [ reduce using rule 57 (statement -> ID .) ]
  ! FLOAT           [ reduce using rule 57 (statement -> ID .) ]
  ! $end            [ reduce using rule 57 (statement -> ID .) ]
  ! RCURLY          [ reduce using rule 57 (statement -> ID .) ]

    comparator                     shift and go to state 51

state 5

    (9) line -> stamentFor .

    ID              reduce using rule 9 (line -> stamentFor .)
    CASE            reduce using rule 9 (line -> stamentFor .)
    FOR             reduce using rule 9 (line -> stamentFor .)
    IF              reduce using rule 9 (line -> stamentFor .)
    FUNC            reduce using rule 9 (line -> stamentFor .)
    SWITCH          reduce using rule 9 (line -> stamentFor .)
    TYPE            reduce using rule 9 (line -> stamentFor .)
    RETURN          reduce using rule 9 (line -> stamentFor .)
    VAR             reduce using rule 9 (line -> stamentFor .)
    FMT             reduce using rule 9 (line -> stamentFor .)
    DEFER           reduce using rule 9 (line -> stamentFor .)
    DEFAULT         reduce using rule 9 (line -> stamentFor .)
    CONST           reduce using rule 9 (line -> stamentFor .)
    LEN             reduce using rule 9 (line -> stamentFor .)
    INT             reduce using rule 9 (line -> stamentFor .)
    FLOAT           reduce using rule 9 (line -> stamentFor .)
    $end            reduce using rule 9 (line -> stamentFor .)
    RCURLY          reduce using rule 9 (line -> stamentFor .)


state 6

    (10) line -> consulta .

    ID              reduce using rule 10 (line -> consulta .)
    CASE            reduce using rule 10 (line -> consulta .)
    FOR             reduce using rule 10 (line -> consulta .)
    IF              reduce using rule 10 (line -> consulta .)
    FUNC            reduce using rule 10 (line -> consulta .)
    SWITCH          reduce using rule 10 (line -> consulta .)
    TYPE            reduce using rule 10 (line -> consulta .)
    RETURN          reduce using rule 10 (line -> consulta .)
    VAR             reduce using rule 10 (line -> consulta .)
    FMT             reduce using rule 10 (line -> consulta .)
    DEFER           reduce using rule 10 (line -> consulta .)
    DEFAULT         reduce using rule 10 (line -> consulta .)
    CONST           reduce using rule 10 (line -> consulta .)
    LEN             reduce using rule 10 (line -> consulta .)
    INT             reduce using rule 10 (line -> consulta .)
    FLOAT           reduce using rule 10 (line -> consulta .)
    $end            reduce using rule 10 (line -> consulta .)
    RCURLY          reduce using rule 10 (line -> consulta .)


state 7

    (11) line -> push .

    ID              reduce using rule 11 (line -> push .)
    CASE            reduce using rule 11 (line -> push .)
    FOR             reduce using rule 11 (line -> push .)
    IF              reduce using rule 11 (line -> push .)
    FUNC            reduce using rule 11 (line -> push .)
    SWITCH          reduce using rule 11 (line -> push .)
    TYPE            reduce using rule 11 (line -> push .)
    RETURN          reduce using rule 11 (line -> push .)
    VAR             reduce using rule 11 (line -> push .)
    FMT             reduce using rule 11 (line -> push .)
    DEFER           reduce using rule 11 (line -> push .)
    DEFAULT         reduce using rule 11 (line -> push .)
    CONST           reduce using rule 11 (line -> push .)
    LEN             reduce using rule 11 (line -> push .)
    INT             reduce using rule 11 (line -> push .)
    FLOAT           reduce using rule 11 (line -> push .)
    $end            reduce using rule 11 (line -> push .)
    RCURLY          reduce using rule 11 (line -> push .)


state 8

    (12) line -> function .

    ID              reduce using rule 12 (line -> function .)
    CASE            reduce using rule 12 (line -> function .)
    FOR             reduce using rule 12 (line -> function .)
    IF              reduce using rule 12 (line -> function .)
    FUNC            reduce using rule 12 (line -> function .)
    SWITCH          reduce using rule 12 (line -> function .)
    TYPE            reduce using rule 12 (line -> function .)
    RETURN          reduce using rule 12 (line -> function .)
    VAR             reduce using rule 12 (line -> function .)
    FMT             reduce using rule 12 (line -> function .)
    DEFER           reduce using rule 12 (line -> function .)
    DEFAULT         reduce using rule 12 (line -> function .)
    CONST           reduce using rule 12 (line -> function .)
    LEN             reduce using rule 12 (line -> function .)
    INT             reduce using rule 12 (line -> function .)
    FLOAT           reduce using rule 12 (line -> function .)
    $end            reduce using rule 12 (line -> function .)
    RCURLY          reduce using rule 12 (line -> function .)


state 9

    (13) line -> array .

    ID              reduce using rule 13 (line -> array .)
    CASE            reduce using rule 13 (line -> array .)
    FOR             reduce using rule 13 (line -> array .)
    IF              reduce using rule 13 (line -> array .)
    FUNC            reduce using rule 13 (line -> array .)
    SWITCH          reduce using rule 13 (line -> array .)
    TYPE            reduce using rule 13 (line -> array .)
    RETURN          reduce using rule 13 (line -> array .)
    VAR             reduce using rule 13 (line -> array .)
    FMT             reduce using rule 13 (line -> array .)
    DEFER           reduce using rule 13 (line -> array .)
    DEFAULT         reduce using rule 13 (line -> array .)
    CONST           reduce using rule 13 (line -> array .)
    LEN             reduce using rule 13 (line -> array .)
    INT             reduce using rule 13 (line -> array .)
    FLOAT           reduce using rule 13 (line -> array .)
    $end            reduce using rule 13 (line -> array .)
    RCURLY          reduce using rule 13 (line -> array .)


state 10

    (14) line -> slice .

    ID              reduce using rule 14 (line -> slice .)
    CASE            reduce using rule 14 (line -> slice .)
    FOR             reduce using rule 14 (line -> slice .)
    IF              reduce using rule 14 (line -> slice .)
    FUNC            reduce using rule 14 (line -> slice .)
    SWITCH          reduce using rule 14 (line -> slice .)
    TYPE            reduce using rule 14 (line -> slice .)
    RETURN          reduce using rule 14 (line -> slice .)
    VAR             reduce using rule 14 (line -> slice .)
    FMT             reduce using rule 14 (line -> slice .)
    DEFER           reduce using rule 14 (line -> slice .)
    DEFAULT         reduce using rule 14 (line -> slice .)
    CONST           reduce using rule 14 (line -> slice .)
    LEN             reduce using rule 14 (line -> slice .)
    INT             reduce using rule 14 (line -> slice .)
    FLOAT           reduce using rule 14 (line -> slice .)
    $end            reduce using rule 14 (line -> slice .)
    RCURLY          reduce using rule 14 (line -> slice .)


state 11

    (15) line -> mathExpProd .

    ID              reduce using rule 15 (line -> mathExpProd .)
    CASE            reduce using rule 15 (line -> mathExpProd .)
    FOR             reduce using rule 15 (line -> mathExpProd .)
    IF              reduce using rule 15 (line -> mathExpProd .)
    FUNC            reduce using rule 15 (line -> mathExpProd .)
    SWITCH          reduce using rule 15 (line -> mathExpProd .)
    TYPE            reduce using rule 15 (line -> mathExpProd .)
    RETURN          reduce using rule 15 (line -> mathExpProd .)
    VAR             reduce using rule 15 (line -> mathExpProd .)
    FMT             reduce using rule 15 (line -> mathExpProd .)
    DEFER           reduce using rule 15 (line -> mathExpProd .)
    DEFAULT         reduce using rule 15 (line -> mathExpProd .)
    CONST           reduce using rule 15 (line -> mathExpProd .)
    LEN             reduce using rule 15 (line -> mathExpProd .)
    INT             reduce using rule 15 (line -> mathExpProd .)
    FLOAT           reduce using rule 15 (line -> mathExpProd .)
    $end            reduce using rule 15 (line -> mathExpProd .)
    RCURLY          reduce using rule 15 (line -> mathExpProd .)


state 12

    (16) line -> CASE . INT TWODOTS line
    (110) case_statements -> CASE . INT TWODOTS line
    (111) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 56


state 13

    (61) number -> INT .

    DIVIDE          reduce using rule 61 (number -> INT .)
    MINUS           reduce using rule 61 (number -> INT .)
    PLUS            reduce using rule 61 (number -> INT .)
    TIMES           reduce using rule 61 (number -> INT .)
    ID              reduce using rule 61 (number -> INT .)
    CASE            reduce using rule 61 (number -> INT .)
    FOR             reduce using rule 61 (number -> INT .)
    IF              reduce using rule 61 (number -> INT .)
    FUNC            reduce using rule 61 (number -> INT .)
    SWITCH          reduce using rule 61 (number -> INT .)
    TYPE            reduce using rule 61 (number -> INT .)
    RETURN          reduce using rule 61 (number -> INT .)
    VAR             reduce using rule 61 (number -> INT .)
    FMT             reduce using rule 61 (number -> INT .)
    DEFER           reduce using rule 61 (number -> INT .)
    DEFAULT         reduce using rule 61 (number -> INT .)
    CONST           reduce using rule 61 (number -> INT .)
    LEN             reduce using rule 61 (number -> INT .)
    INT             reduce using rule 61 (number -> INT .)
    FLOAT           reduce using rule 61 (number -> INT .)
    $end            reduce using rule 61 (number -> INT .)
    RCURLY          reduce using rule 61 (number -> INT .)
    COMMA           reduce using rule 61 (number -> INT .)


state 14

    (17) line -> switch .

    ID              reduce using rule 17 (line -> switch .)
    CASE            reduce using rule 17 (line -> switch .)
    FOR             reduce using rule 17 (line -> switch .)
    IF              reduce using rule 17 (line -> switch .)
    FUNC            reduce using rule 17 (line -> switch .)
    SWITCH          reduce using rule 17 (line -> switch .)
    TYPE            reduce using rule 17 (line -> switch .)
    RETURN          reduce using rule 17 (line -> switch .)
    VAR             reduce using rule 17 (line -> switch .)
    FMT             reduce using rule 17 (line -> switch .)
    DEFER           reduce using rule 17 (line -> switch .)
    DEFAULT         reduce using rule 17 (line -> switch .)
    CONST           reduce using rule 17 (line -> switch .)
    LEN             reduce using rule 17 (line -> switch .)
    INT             reduce using rule 17 (line -> switch .)
    FLOAT           reduce using rule 17 (line -> switch .)
    $end            reduce using rule 17 (line -> switch .)
    RCURLY          reduce using rule 17 (line -> switch .)


state 15

    (18) line -> pila .

    ID              reduce using rule 18 (line -> pila .)
    CASE            reduce using rule 18 (line -> pila .)
    FOR             reduce using rule 18 (line -> pila .)
    IF              reduce using rule 18 (line -> pila .)
    FUNC            reduce using rule 18 (line -> pila .)
    SWITCH          reduce using rule 18 (line -> pila .)
    TYPE            reduce using rule 18 (line -> pila .)
    RETURN          reduce using rule 18 (line -> pila .)
    VAR             reduce using rule 18 (line -> pila .)
    FMT             reduce using rule 18 (line -> pila .)
    DEFER           reduce using rule 18 (line -> pila .)
    DEFAULT         reduce using rule 18 (line -> pila .)
    CONST           reduce using rule 18 (line -> pila .)
    LEN             reduce using rule 18 (line -> pila .)
    INT             reduce using rule 18 (line -> pila .)
    FLOAT           reduce using rule 18 (line -> pila .)
    $end            reduce using rule 18 (line -> pila .)
    RCURLY          reduce using rule 18 (line -> pila .)


state 16

    (19) line -> func_declaration .

    ID              reduce using rule 19 (line -> func_declaration .)
    CASE            reduce using rule 19 (line -> func_declaration .)
    FOR             reduce using rule 19 (line -> func_declaration .)
    IF              reduce using rule 19 (line -> func_declaration .)
    FUNC            reduce using rule 19 (line -> func_declaration .)
    SWITCH          reduce using rule 19 (line -> func_declaration .)
    TYPE            reduce using rule 19 (line -> func_declaration .)
    RETURN          reduce using rule 19 (line -> func_declaration .)
    VAR             reduce using rule 19 (line -> func_declaration .)
    FMT             reduce using rule 19 (line -> func_declaration .)
    DEFER           reduce using rule 19 (line -> func_declaration .)
    DEFAULT         reduce using rule 19 (line -> func_declaration .)
    CONST           reduce using rule 19 (line -> func_declaration .)
    LEN             reduce using rule 19 (line -> func_declaration .)
    INT             reduce using rule 19 (line -> func_declaration .)
    FLOAT           reduce using rule 19 (line -> func_declaration .)
    $end            reduce using rule 19 (line -> func_declaration .)
    RCURLY          reduce using rule 19 (line -> func_declaration .)


state 17

    (21) line -> retorno .

    ID              reduce using rule 21 (line -> retorno .)
    CASE            reduce using rule 21 (line -> retorno .)
    FOR             reduce using rule 21 (line -> retorno .)
    IF              reduce using rule 21 (line -> retorno .)
    FUNC            reduce using rule 21 (line -> retorno .)
    SWITCH          reduce using rule 21 (line -> retorno .)
    TYPE            reduce using rule 21 (line -> retorno .)
    RETURN          reduce using rule 21 (line -> retorno .)
    VAR             reduce using rule 21 (line -> retorno .)
    FMT             reduce using rule 21 (line -> retorno .)
    DEFER           reduce using rule 21 (line -> retorno .)
    DEFAULT         reduce using rule 21 (line -> retorno .)
    CONST           reduce using rule 21 (line -> retorno .)
    LEN             reduce using rule 21 (line -> retorno .)
    INT             reduce using rule 21 (line -> retorno .)
    FLOAT           reduce using rule 21 (line -> retorno .)
    $end            reduce using rule 21 (line -> retorno .)
    RCURLY          reduce using rule 21 (line -> retorno .)


state 18

    (22) line -> declaration .

    ID              reduce using rule 22 (line -> declaration .)
    CASE            reduce using rule 22 (line -> declaration .)
    FOR             reduce using rule 22 (line -> declaration .)
    IF              reduce using rule 22 (line -> declaration .)
    FUNC            reduce using rule 22 (line -> declaration .)
    SWITCH          reduce using rule 22 (line -> declaration .)
    TYPE            reduce using rule 22 (line -> declaration .)
    RETURN          reduce using rule 22 (line -> declaration .)
    VAR             reduce using rule 22 (line -> declaration .)
    FMT             reduce using rule 22 (line -> declaration .)
    DEFER           reduce using rule 22 (line -> declaration .)
    DEFAULT         reduce using rule 22 (line -> declaration .)
    CONST           reduce using rule 22 (line -> declaration .)
    LEN             reduce using rule 22 (line -> declaration .)
    INT             reduce using rule 22 (line -> declaration .)
    FLOAT           reduce using rule 22 (line -> declaration .)
    $end            reduce using rule 22 (line -> declaration .)
    RCURLY          reduce using rule 22 (line -> declaration .)


state 19

    (23) line -> sentence .
    (58) statement -> sentence .

  ! reduce/reduce conflict for ID resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for CASE resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for FOR resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for IF resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for FUNC resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for SWITCH resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for TYPE resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for RETURN resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for VAR resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for FMT resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for DEFER resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for CONST resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for LEN resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for INT resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for FLOAT resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for $end resolved using rule 23 (line -> sentence .)
  ! reduce/reduce conflict for RCURLY resolved using rule 23 (line -> sentence .)
    ID              reduce using rule 23 (line -> sentence .)
    CASE            reduce using rule 23 (line -> sentence .)
    FOR             reduce using rule 23 (line -> sentence .)
    IF              reduce using rule 23 (line -> sentence .)
    FUNC            reduce using rule 23 (line -> sentence .)
    SWITCH          reduce using rule 23 (line -> sentence .)
    TYPE            reduce using rule 23 (line -> sentence .)
    RETURN          reduce using rule 23 (line -> sentence .)
    VAR             reduce using rule 23 (line -> sentence .)
    FMT             reduce using rule 23 (line -> sentence .)
    DEFER           reduce using rule 23 (line -> sentence .)
    DEFAULT         reduce using rule 23 (line -> sentence .)
    CONST           reduce using rule 23 (line -> sentence .)
    LEN             reduce using rule 23 (line -> sentence .)
    INT             reduce using rule 23 (line -> sentence .)
    FLOAT           reduce using rule 23 (line -> sentence .)
    $end            reduce using rule 23 (line -> sentence .)
    RCURLY          reduce using rule 23 (line -> sentence .)

  ! ID              [ reduce using rule 58 (statement -> sentence .) ]
  ! CASE            [ reduce using rule 58 (statement -> sentence .) ]
  ! FOR             [ reduce using rule 58 (statement -> sentence .) ]
  ! IF              [ reduce using rule 58 (statement -> sentence .) ]
  ! FUNC            [ reduce using rule 58 (statement -> sentence .) ]
  ! SWITCH          [ reduce using rule 58 (statement -> sentence .) ]
  ! TYPE            [ reduce using rule 58 (statement -> sentence .) ]
  ! RETURN          [ reduce using rule 58 (statement -> sentence .) ]
  ! VAR             [ reduce using rule 58 (statement -> sentence .) ]
  ! FMT             [ reduce using rule 58 (statement -> sentence .) ]
  ! DEFER           [ reduce using rule 58 (statement -> sentence .) ]
  ! DEFAULT         [ reduce using rule 58 (statement -> sentence .) ]
  ! CONST           [ reduce using rule 58 (statement -> sentence .) ]
  ! LEN             [ reduce using rule 58 (statement -> sentence .) ]
  ! INT             [ reduce using rule 58 (statement -> sentence .) ]
  ! FLOAT           [ reduce using rule 58 (statement -> sentence .) ]
  ! $end            [ reduce using rule 58 (statement -> sentence .) ]
  ! RCURLY          [ reduce using rule 58 (statement -> sentence .) ]


state 20

    (24) line -> return .

    ID              reduce using rule 24 (line -> return .)
    CASE            reduce using rule 24 (line -> return .)
    FOR             reduce using rule 24 (line -> return .)
    IF              reduce using rule 24 (line -> return .)
    FUNC            reduce using rule 24 (line -> return .)
    SWITCH          reduce using rule 24 (line -> return .)
    TYPE            reduce using rule 24 (line -> return .)
    RETURN          reduce using rule 24 (line -> return .)
    VAR             reduce using rule 24 (line -> return .)
    FMT             reduce using rule 24 (line -> return .)
    DEFER           reduce using rule 24 (line -> return .)
    DEFAULT         reduce using rule 24 (line -> return .)
    CONST           reduce using rule 24 (line -> return .)
    LEN             reduce using rule 24 (line -> return .)
    INT             reduce using rule 24 (line -> return .)
    FLOAT           reduce using rule 24 (line -> return .)
    $end            reduce using rule 24 (line -> return .)
    RCURLY          reduce using rule 24 (line -> return .)


state 21

    (25) line -> defer_statement .

    ID              reduce using rule 25 (line -> defer_statement .)
    CASE            reduce using rule 25 (line -> defer_statement .)
    FOR             reduce using rule 25 (line -> defer_statement .)
    IF              reduce using rule 25 (line -> defer_statement .)
    FUNC            reduce using rule 25 (line -> defer_statement .)
    SWITCH          reduce using rule 25 (line -> defer_statement .)
    TYPE            reduce using rule 25 (line -> defer_statement .)
    RETURN          reduce using rule 25 (line -> defer_statement .)
    VAR             reduce using rule 25 (line -> defer_statement .)
    FMT             reduce using rule 25 (line -> defer_statement .)
    DEFER           reduce using rule 25 (line -> defer_statement .)
    DEFAULT         reduce using rule 25 (line -> defer_statement .)
    CONST           reduce using rule 25 (line -> defer_statement .)
    LEN             reduce using rule 25 (line -> defer_statement .)
    INT             reduce using rule 25 (line -> defer_statement .)
    FLOAT           reduce using rule 25 (line -> defer_statement .)
    $end            reduce using rule 25 (line -> defer_statement .)
    RCURLY          reduce using rule 25 (line -> defer_statement .)


state 22

    (26) line -> case_statements .

    ID              reduce using rule 26 (line -> case_statements .)
    CASE            reduce using rule 26 (line -> case_statements .)
    FOR             reduce using rule 26 (line -> case_statements .)
    IF              reduce using rule 26 (line -> case_statements .)
    FUNC            reduce using rule 26 (line -> case_statements .)
    SWITCH          reduce using rule 26 (line -> case_statements .)
    TYPE            reduce using rule 26 (line -> case_statements .)
    RETURN          reduce using rule 26 (line -> case_statements .)
    VAR             reduce using rule 26 (line -> case_statements .)
    FMT             reduce using rule 26 (line -> case_statements .)
    DEFER           reduce using rule 26 (line -> case_statements .)
    DEFAULT         reduce using rule 26 (line -> case_statements .)
    CONST           reduce using rule 26 (line -> case_statements .)
    LEN             reduce using rule 26 (line -> case_statements .)
    INT             reduce using rule 26 (line -> case_statements .)
    FLOAT           reduce using rule 26 (line -> case_statements .)
    $end            reduce using rule 26 (line -> case_statements .)
    RCURLY          reduce using rule 26 (line -> case_statements .)


state 23

    (27) line -> constant_declaration .

    ID              reduce using rule 27 (line -> constant_declaration .)
    CASE            reduce using rule 27 (line -> constant_declaration .)
    FOR             reduce using rule 27 (line -> constant_declaration .)
    IF              reduce using rule 27 (line -> constant_declaration .)
    FUNC            reduce using rule 27 (line -> constant_declaration .)
    SWITCH          reduce using rule 27 (line -> constant_declaration .)
    TYPE            reduce using rule 27 (line -> constant_declaration .)
    RETURN          reduce using rule 27 (line -> constant_declaration .)
    VAR             reduce using rule 27 (line -> constant_declaration .)
    FMT             reduce using rule 27 (line -> constant_declaration .)
    DEFER           reduce using rule 27 (line -> constant_declaration .)
    DEFAULT         reduce using rule 27 (line -> constant_declaration .)
    CONST           reduce using rule 27 (line -> constant_declaration .)
    LEN             reduce using rule 27 (line -> constant_declaration .)
    INT             reduce using rule 27 (line -> constant_declaration .)
    FLOAT           reduce using rule 27 (line -> constant_declaration .)
    $end            reduce using rule 27 (line -> constant_declaration .)
    RCURLY          reduce using rule 27 (line -> constant_declaration .)


state 24

    (28) line -> list_function .
    (41) expression -> list_function . comparator INT
    (42) expression -> list_function . comparator ID
    (44) comparator -> . COMPARE
    (45) comparator -> . MORETHAN
    (46) comparator -> . MINUSTHAN

    ID              reduce using rule 28 (line -> list_function .)
    CASE            reduce using rule 28 (line -> list_function .)
    FOR             reduce using rule 28 (line -> list_function .)
    IF              reduce using rule 28 (line -> list_function .)
    FUNC            reduce using rule 28 (line -> list_function .)
    SWITCH          reduce using rule 28 (line -> list_function .)
    TYPE            reduce using rule 28 (line -> list_function .)
    RETURN          reduce using rule 28 (line -> list_function .)
    VAR             reduce using rule 28 (line -> list_function .)
    FMT             reduce using rule 28 (line -> list_function .)
    DEFER           reduce using rule 28 (line -> list_function .)
    DEFAULT         reduce using rule 28 (line -> list_function .)
    CONST           reduce using rule 28 (line -> list_function .)
    LEN             reduce using rule 28 (line -> list_function .)
    INT             reduce using rule 28 (line -> list_function .)
    FLOAT           reduce using rule 28 (line -> list_function .)
    $end            reduce using rule 28 (line -> list_function .)
    RCURLY          reduce using rule 28 (line -> list_function .)
    COMPARE         shift and go to state 54
    MORETHAN        shift and go to state 52
    MINUSTHAN       shift and go to state 55

    comparator                     shift and go to state 57

state 25

    (29) line -> emptySlice .

    ID              reduce using rule 29 (line -> emptySlice .)
    CASE            reduce using rule 29 (line -> emptySlice .)
    FOR             reduce using rule 29 (line -> emptySlice .)
    IF              reduce using rule 29 (line -> emptySlice .)
    FUNC            reduce using rule 29 (line -> emptySlice .)
    SWITCH          reduce using rule 29 (line -> emptySlice .)
    TYPE            reduce using rule 29 (line -> emptySlice .)
    RETURN          reduce using rule 29 (line -> emptySlice .)
    VAR             reduce using rule 29 (line -> emptySlice .)
    FMT             reduce using rule 29 (line -> emptySlice .)
    DEFER           reduce using rule 29 (line -> emptySlice .)
    DEFAULT         reduce using rule 29 (line -> emptySlice .)
    CONST           reduce using rule 29 (line -> emptySlice .)
    LEN             reduce using rule 29 (line -> emptySlice .)
    INT             reduce using rule 29 (line -> emptySlice .)
    FLOAT           reduce using rule 29 (line -> emptySlice .)
    $end            reduce using rule 29 (line -> emptySlice .)
    RCURLY          reduce using rule 29 (line -> emptySlice .)


state 26

    (30) line -> mainFunction .

    ID              reduce using rule 30 (line -> mainFunction .)
    CASE            reduce using rule 30 (line -> mainFunction .)
    FOR             reduce using rule 30 (line -> mainFunction .)
    IF              reduce using rule 30 (line -> mainFunction .)
    FUNC            reduce using rule 30 (line -> mainFunction .)
    SWITCH          reduce using rule 30 (line -> mainFunction .)
    TYPE            reduce using rule 30 (line -> mainFunction .)
    RETURN          reduce using rule 30 (line -> mainFunction .)
    VAR             reduce using rule 30 (line -> mainFunction .)
    FMT             reduce using rule 30 (line -> mainFunction .)
    DEFER           reduce using rule 30 (line -> mainFunction .)
    DEFAULT         reduce using rule 30 (line -> mainFunction .)
    CONST           reduce using rule 30 (line -> mainFunction .)
    LEN             reduce using rule 30 (line -> mainFunction .)
    INT             reduce using rule 30 (line -> mainFunction .)
    FLOAT           reduce using rule 30 (line -> mainFunction .)
    $end            reduce using rule 30 (line -> mainFunction .)
    RCURLY          reduce using rule 30 (line -> mainFunction .)


state 27

    (31) line -> expression .

    ID              reduce using rule 31 (line -> expression .)
    CASE            reduce using rule 31 (line -> expression .)
    FOR             reduce using rule 31 (line -> expression .)
    IF              reduce using rule 31 (line -> expression .)
    FUNC            reduce using rule 31 (line -> expression .)
    SWITCH          reduce using rule 31 (line -> expression .)
    TYPE            reduce using rule 31 (line -> expression .)
    RETURN          reduce using rule 31 (line -> expression .)
    VAR             reduce using rule 31 (line -> expression .)
    FMT             reduce using rule 31 (line -> expression .)
    DEFER           reduce using rule 31 (line -> expression .)
    DEFAULT         reduce using rule 31 (line -> expression .)
    CONST           reduce using rule 31 (line -> expression .)
    LEN             reduce using rule 31 (line -> expression .)
    INT             reduce using rule 31 (line -> expression .)
    FLOAT           reduce using rule 31 (line -> expression .)
    $end            reduce using rule 31 (line -> expression .)
    RCURLY          reduce using rule 31 (line -> expression .)


state 28

    (32) line -> statement .

    ID              reduce using rule 32 (line -> statement .)
    CASE            reduce using rule 32 (line -> statement .)
    FOR             reduce using rule 32 (line -> statement .)
    IF              reduce using rule 32 (line -> statement .)
    FUNC            reduce using rule 32 (line -> statement .)
    SWITCH          reduce using rule 32 (line -> statement .)
    TYPE            reduce using rule 32 (line -> statement .)
    RETURN          reduce using rule 32 (line -> statement .)
    VAR             reduce using rule 32 (line -> statement .)
    FMT             reduce using rule 32 (line -> statement .)
    DEFER           reduce using rule 32 (line -> statement .)
    DEFAULT         reduce using rule 32 (line -> statement .)
    CONST           reduce using rule 32 (line -> statement .)
    LEN             reduce using rule 32 (line -> statement .)
    INT             reduce using rule 32 (line -> statement .)
    FLOAT           reduce using rule 32 (line -> statement .)
    $end            reduce using rule 32 (line -> statement .)
    RCURLY          reduce using rule 32 (line -> statement .)


state 29

    (33) line -> functionAppend .
    (60) statement -> functionAppend .

  ! reduce/reduce conflict for ID resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for CASE resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for FOR resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for IF resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for FUNC resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for SWITCH resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for TYPE resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for RETURN resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for VAR resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for FMT resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for DEFER resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for CONST resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for LEN resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for INT resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for FLOAT resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for $end resolved using rule 33 (line -> functionAppend .)
  ! reduce/reduce conflict for RCURLY resolved using rule 33 (line -> functionAppend .)
    ID              reduce using rule 33 (line -> functionAppend .)
    CASE            reduce using rule 33 (line -> functionAppend .)
    FOR             reduce using rule 33 (line -> functionAppend .)
    IF              reduce using rule 33 (line -> functionAppend .)
    FUNC            reduce using rule 33 (line -> functionAppend .)
    SWITCH          reduce using rule 33 (line -> functionAppend .)
    TYPE            reduce using rule 33 (line -> functionAppend .)
    RETURN          reduce using rule 33 (line -> functionAppend .)
    VAR             reduce using rule 33 (line -> functionAppend .)
    FMT             reduce using rule 33 (line -> functionAppend .)
    DEFER           reduce using rule 33 (line -> functionAppend .)
    DEFAULT         reduce using rule 33 (line -> functionAppend .)
    CONST           reduce using rule 33 (line -> functionAppend .)
    LEN             reduce using rule 33 (line -> functionAppend .)
    INT             reduce using rule 33 (line -> functionAppend .)
    FLOAT           reduce using rule 33 (line -> functionAppend .)
    $end            reduce using rule 33 (line -> functionAppend .)
    RCURLY          reduce using rule 33 (line -> functionAppend .)

  ! ID              [ reduce using rule 60 (statement -> functionAppend .) ]
  ! CASE            [ reduce using rule 60 (statement -> functionAppend .) ]
  ! FOR             [ reduce using rule 60 (statement -> functionAppend .) ]
  ! IF              [ reduce using rule 60 (statement -> functionAppend .) ]
  ! FUNC            [ reduce using rule 60 (statement -> functionAppend .) ]
  ! SWITCH          [ reduce using rule 60 (statement -> functionAppend .) ]
  ! TYPE            [ reduce using rule 60 (statement -> functionAppend .) ]
  ! RETURN          [ reduce using rule 60 (statement -> functionAppend .) ]
  ! VAR             [ reduce using rule 60 (statement -> functionAppend .) ]
  ! FMT             [ reduce using rule 60 (statement -> functionAppend .) ]
  ! DEFER           [ reduce using rule 60 (statement -> functionAppend .) ]
  ! DEFAULT         [ reduce using rule 60 (statement -> functionAppend .) ]
  ! CONST           [ reduce using rule 60 (statement -> functionAppend .) ]
  ! LEN             [ reduce using rule 60 (statement -> functionAppend .) ]
  ! INT             [ reduce using rule 60 (statement -> functionAppend .) ]
  ! FLOAT           [ reduce using rule 60 (statement -> functionAppend .) ]
  ! $end            [ reduce using rule 60 (statement -> functionAppend .) ]
  ! RCURLY          [ reduce using rule 60 (statement -> functionAppend .) ]


state 30

    (34) line -> funcion .

    ID              reduce using rule 34 (line -> funcion .)
    CASE            reduce using rule 34 (line -> funcion .)
    FOR             reduce using rule 34 (line -> funcion .)
    IF              reduce using rule 34 (line -> funcion .)
    FUNC            reduce using rule 34 (line -> funcion .)
    SWITCH          reduce using rule 34 (line -> funcion .)
    TYPE            reduce using rule 34 (line -> funcion .)
    RETURN          reduce using rule 34 (line -> funcion .)
    VAR             reduce using rule 34 (line -> funcion .)
    FMT             reduce using rule 34 (line -> funcion .)
    DEFER           reduce using rule 34 (line -> funcion .)
    DEFAULT         reduce using rule 34 (line -> funcion .)
    CONST           reduce using rule 34 (line -> funcion .)
    LEN             reduce using rule 34 (line -> funcion .)
    INT             reduce using rule 34 (line -> funcion .)
    FLOAT           reduce using rule 34 (line -> funcion .)
    $end            reduce using rule 34 (line -> funcion .)
    RCURLY          reduce using rule 34 (line -> funcion .)


state 31

    (51) stamentFor -> FOR . ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 58


state 32

    (90) list_function -> LEN . LPAREN ID RPAREN

    LPAREN          shift and go to state 59


state 33

    (53) consulta -> IF . expression LCURLY statements RCURLY
    (54) consulta -> IF . expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN

    ID              shift and go to state 61
    LEN             shift and go to state 32

    expression                     shift and go to state 60
    list_function                  shift and go to state 62

state 34

    (73) push -> FUNC . PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> FUNC . ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> FUNC . ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (75) func_declaration -> FUNC . ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (81) mainFunction -> FUNC . MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (74) funcion -> FUNC . ID LPAREN RPAREN ID LCURLY repeatLines RCURLY

    PUSH            shift and go to state 63
    ID              shift and go to state 64
    MAIN            shift and go to state 65


state 35

    (37) retorno -> RETURN . retorno
    (107) return -> RETURN . expression
    (108) return -> RETURN . INT
    (109) return -> RETURN . sentence
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN

    INT             shift and go to state 69
    ID              shift and go to state 71
    RETURN          shift and go to state 66
    FMT             shift and go to state 41
    LEN             shift and go to state 32

    retorno                        shift and go to state 67
    expression                     shift and go to state 68
    sentence                       shift and go to state 70
    list_function                  shift and go to state 62

state 36

    (99) mathExpProd -> mathExp .
    (100) mathExpProd -> mathExp . operator mathExpProd
    (47) operator -> . DIVIDE
    (48) operator -> . MINUS
    (49) operator -> . PLUS
    (50) operator -> . TIMES

    ID              reduce using rule 99 (mathExpProd -> mathExp .)
    CASE            reduce using rule 99 (mathExpProd -> mathExp .)
    FOR             reduce using rule 99 (mathExpProd -> mathExp .)
    IF              reduce using rule 99 (mathExpProd -> mathExp .)
    FUNC            reduce using rule 99 (mathExpProd -> mathExp .)
    SWITCH          reduce using rule 99 (mathExpProd -> mathExp .)
    TYPE            reduce using rule 99 (mathExpProd -> mathExp .)
    RETURN          reduce using rule 99 (mathExpProd -> mathExp .)
    VAR             reduce using rule 99 (mathExpProd -> mathExp .)
    FMT             reduce using rule 99 (mathExpProd -> mathExp .)
    DEFER           reduce using rule 99 (mathExpProd -> mathExp .)
    DEFAULT         reduce using rule 99 (mathExpProd -> mathExp .)
    CONST           reduce using rule 99 (mathExpProd -> mathExp .)
    LEN             reduce using rule 99 (mathExpProd -> mathExp .)
    INT             reduce using rule 99 (mathExpProd -> mathExp .)
    FLOAT           reduce using rule 99 (mathExpProd -> mathExp .)
    $end            reduce using rule 99 (mathExpProd -> mathExp .)
    RCURLY          reduce using rule 99 (mathExpProd -> mathExp .)
    DIVIDE          shift and go to state 73
    MINUS           shift and go to state 74
    PLUS            shift and go to state 75
    TIMES           shift and go to state 76

    operator                       shift and go to state 72

state 37

    (52) switch -> SWITCH . ID LCURLY repeatLines RCURLY

    ID              shift and go to state 77


state 38

    (70) pila -> TYPE . STACK LBRACKETS RBRACKETS ID
    (71) pila -> TYPE . STACK INTERFACE LCURLY RCURLY
    (72) pila -> TYPE . STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    STACK           shift and go to state 78


state 39

    (92) declaration -> VAR . ID ID
    (93) declaration -> VAR . ID ID EQUALSVAR number
    (94) declaration -> VAR . ID ID EQUALSVAR STR
    (95) declaration -> VAR . ID ID EQUALSVAR ID
    (96) declaration -> VAR . ID EQUALSVAR ID LBRACKETS INT RBRACKETS

    ID              shift and go to state 79


state 40

    (97) mathExp -> number .
    (98) mathExp -> number . operator number
    (47) operator -> . DIVIDE
    (48) operator -> . MINUS
    (49) operator -> . PLUS
    (50) operator -> . TIMES

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 97 (mathExp -> number .)
    CASE            reduce using rule 97 (mathExp -> number .)
    FOR             reduce using rule 97 (mathExp -> number .)
    IF              reduce using rule 97 (mathExp -> number .)
    FUNC            reduce using rule 97 (mathExp -> number .)
    SWITCH          reduce using rule 97 (mathExp -> number .)
    TYPE            reduce using rule 97 (mathExp -> number .)
    RETURN          reduce using rule 97 (mathExp -> number .)
    VAR             reduce using rule 97 (mathExp -> number .)
    FMT             reduce using rule 97 (mathExp -> number .)
    DEFER           reduce using rule 97 (mathExp -> number .)
    DEFAULT         reduce using rule 97 (mathExp -> number .)
    CONST           reduce using rule 97 (mathExp -> number .)
    LEN             reduce using rule 97 (mathExp -> number .)
    INT             reduce using rule 97 (mathExp -> number .)
    FLOAT           reduce using rule 97 (mathExp -> number .)
    $end            reduce using rule 97 (mathExp -> number .)
    RCURLY          reduce using rule 97 (mathExp -> number .)
    DIVIDE          shift and go to state 73
    MINUS           shift and go to state 74
    PLUS            shift and go to state 75
    TIMES           shift and go to state 76

  ! DIVIDE          [ reduce using rule 97 (mathExp -> number .) ]
  ! MINUS           [ reduce using rule 97 (mathExp -> number .) ]
  ! PLUS            [ reduce using rule 97 (mathExp -> number .) ]
  ! TIMES           [ reduce using rule 97 (mathExp -> number .) ]

    operator                       shift and go to state 80

state 41

    (101) sentence -> FMT . PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> FMT . PERIOD PRINTF LPAREN arguments RPAREN

    PERIOD          shift and go to state 81


state 42

    (113) defer_statement -> DEFER . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    line                           shift and go to state 82
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 43

    (112) case_statements -> DEFAULT . TWODOTS line

    TWODOTS         shift and go to state 83


state 44

    (114) constant_declaration -> CONST . variablenum
    (115) variablenum -> . ID EQUALS number

    ID              shift and go to state 85

    variablenum                    shift and go to state 84

state 45

    (62) number -> FLOAT .

    DIVIDE          reduce using rule 62 (number -> FLOAT .)
    MINUS           reduce using rule 62 (number -> FLOAT .)
    PLUS            reduce using rule 62 (number -> FLOAT .)
    TIMES           reduce using rule 62 (number -> FLOAT .)
    ID              reduce using rule 62 (number -> FLOAT .)
    CASE            reduce using rule 62 (number -> FLOAT .)
    FOR             reduce using rule 62 (number -> FLOAT .)
    IF              reduce using rule 62 (number -> FLOAT .)
    FUNC            reduce using rule 62 (number -> FLOAT .)
    SWITCH          reduce using rule 62 (number -> FLOAT .)
    TYPE            reduce using rule 62 (number -> FLOAT .)
    RETURN          reduce using rule 62 (number -> FLOAT .)
    VAR             reduce using rule 62 (number -> FLOAT .)
    FMT             reduce using rule 62 (number -> FLOAT .)
    DEFER           reduce using rule 62 (number -> FLOAT .)
    DEFAULT         reduce using rule 62 (number -> FLOAT .)
    CONST           reduce using rule 62 (number -> FLOAT .)
    LEN             reduce using rule 62 (number -> FLOAT .)
    INT             reduce using rule 62 (number -> FLOAT .)
    FLOAT           reduce using rule 62 (number -> FLOAT .)
    $end            reduce using rule 62 (number -> FLOAT .)
    RCURLY          reduce using rule 62 (number -> FLOAT .)
    COMMA           reduce using rule 62 (number -> FLOAT .)


state 46

    (7) repeatLines -> line repeatLines .

    $end            reduce using rule 7 (repeatLines -> line repeatLines .)
    RCURLY          reduce using rule 7 (repeatLines -> line repeatLines .)
    RETURN          reduce using rule 7 (repeatLines -> line repeatLines .)


state 47

    (8) line -> ID EQUALSVAR . value
    (20) line -> ID EQUALSVAR . INT
    (63) array -> ID EQUALSVAR . LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> ID EQUALSVAR . LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (80) functionAppend -> ID EQUALSVAR . APPEND LPAREN param_list RPAREN
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 88
    LBRACKETS       shift and go to state 89
    APPEND          shift and go to state 90
    FLOAT           shift and go to state 91
    STR             shift and go to state 92
    ID              shift and go to state 86

    value                          shift and go to state 87

state 48

    (67) emptySlice -> ID LBRACKETS . RBRACKETS ID
    (43) expression -> ID LBRACKETS . ID RBRACKETS MORETHAN ID

    RBRACKETS       shift and go to state 94
    ID              shift and go to state 93


state 49

    (36) retorno -> ID COMMA .

    ID              reduce using rule 36 (retorno -> ID COMMA .)
    CASE            reduce using rule 36 (retorno -> ID COMMA .)
    FOR             reduce using rule 36 (retorno -> ID COMMA .)
    IF              reduce using rule 36 (retorno -> ID COMMA .)
    FUNC            reduce using rule 36 (retorno -> ID COMMA .)
    SWITCH          reduce using rule 36 (retorno -> ID COMMA .)
    TYPE            reduce using rule 36 (retorno -> ID COMMA .)
    RETURN          reduce using rule 36 (retorno -> ID COMMA .)
    VAR             reduce using rule 36 (retorno -> ID COMMA .)
    FMT             reduce using rule 36 (retorno -> ID COMMA .)
    DEFER           reduce using rule 36 (retorno -> ID COMMA .)
    DEFAULT         reduce using rule 36 (retorno -> ID COMMA .)
    CONST           reduce using rule 36 (retorno -> ID COMMA .)
    LEN             reduce using rule 36 (retorno -> ID COMMA .)
    INT             reduce using rule 36 (retorno -> ID COMMA .)
    FLOAT           reduce using rule 36 (retorno -> ID COMMA .)
    $end            reduce using rule 36 (retorno -> ID COMMA .)
    RCURLY          reduce using rule 36 (retorno -> ID COMMA .)


state 50

    (89) list_function -> ID LPAREN . param_list RPAREN
    (82) param_list -> . param
    (83) param_list -> . param_list COMMA param
    (84) param -> . value ID
    (85) param -> . emptySlice
    (86) param -> . ID
    (87) param -> . STR
    (88) param -> . INT
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID

    ID              shift and go to state 95
    STR             shift and go to state 100
    INT             shift and go to state 101
    FLOAT           shift and go to state 91

    param_list                     shift and go to state 96
    param                          shift and go to state 97
    value                          shift and go to state 98
    emptySlice                     shift and go to state 99

state 51

    (38) expression -> ID comparator . ID
    (39) expression -> ID comparator . INT

    ID              shift and go to state 102
    INT             shift and go to state 103


state 52

    (45) comparator -> MORETHAN .

    ID              reduce using rule 45 (comparator -> MORETHAN .)
    INT             reduce using rule 45 (comparator -> MORETHAN .)


state 53

    (59) statement -> ID EQUALS . ID LBRACKETS ID RBRACKETS

    ID              shift and go to state 104


state 54

    (44) comparator -> COMPARE .

    ID              reduce using rule 44 (comparator -> COMPARE .)
    INT             reduce using rule 44 (comparator -> COMPARE .)


state 55

    (46) comparator -> MINUSTHAN .

    ID              reduce using rule 46 (comparator -> MINUSTHAN .)
    INT             reduce using rule 46 (comparator -> MINUSTHAN .)


state 56

    (16) line -> CASE INT . TWODOTS line
    (110) case_statements -> CASE INT . TWODOTS line
    (111) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 105


state 57

    (41) expression -> list_function comparator . INT
    (42) expression -> list_function comparator . ID

    INT             shift and go to state 106
    ID              shift and go to state 107


state 58

    (51) stamentFor -> FOR ID . EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    EQUALSVAR       shift and go to state 108


state 59

    (90) list_function -> LEN LPAREN . ID RPAREN

    ID              shift and go to state 109


state 60

    (53) consulta -> IF expression . LCURLY statements RCURLY
    (54) consulta -> IF expression . LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LCURLY          shift and go to state 110


state 61

    (38) expression -> ID . comparator ID
    (39) expression -> ID . comparator INT
    (40) expression -> ID .
    (43) expression -> ID . LBRACKETS ID RBRACKETS MORETHAN ID
    (89) list_function -> ID . LPAREN param_list RPAREN
    (44) comparator -> . COMPARE
    (45) comparator -> . MORETHAN
    (46) comparator -> . MINUSTHAN

    LCURLY          reduce using rule 40 (expression -> ID .)
    LBRACKETS       shift and go to state 111
    LPAREN          shift and go to state 50
    COMPARE         shift and go to state 54
    MORETHAN        shift and go to state 52
    MINUSTHAN       shift and go to state 55

    comparator                     shift and go to state 51

state 62

    (41) expression -> list_function . comparator INT
    (42) expression -> list_function . comparator ID
    (44) comparator -> . COMPARE
    (45) comparator -> . MORETHAN
    (46) comparator -> . MINUSTHAN

    COMPARE         shift and go to state 54
    MORETHAN        shift and go to state 52
    MINUSTHAN       shift and go to state 55

    comparator                     shift and go to state 57

state 63

    (73) push -> FUNC PUSH . LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 112


state 64

    (78) function -> FUNC ID . LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> FUNC ID . LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (75) func_declaration -> FUNC ID . LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (74) funcion -> FUNC ID . LPAREN RPAREN ID LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 113


state 65

    (81) mainFunction -> FUNC MAIN . LPAREN RPAREN LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 114


state 66

    (37) retorno -> RETURN . retorno
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno

    ID              shift and go to state 115
    RETURN          shift and go to state 66

    retorno                        shift and go to state 67

state 67

    (37) retorno -> RETURN retorno .

    ID              reduce using rule 37 (retorno -> RETURN retorno .)
    CASE            reduce using rule 37 (retorno -> RETURN retorno .)
    FOR             reduce using rule 37 (retorno -> RETURN retorno .)
    IF              reduce using rule 37 (retorno -> RETURN retorno .)
    FUNC            reduce using rule 37 (retorno -> RETURN retorno .)
    SWITCH          reduce using rule 37 (retorno -> RETURN retorno .)
    TYPE            reduce using rule 37 (retorno -> RETURN retorno .)
    RETURN          reduce using rule 37 (retorno -> RETURN retorno .)
    VAR             reduce using rule 37 (retorno -> RETURN retorno .)
    FMT             reduce using rule 37 (retorno -> RETURN retorno .)
    DEFER           reduce using rule 37 (retorno -> RETURN retorno .)
    DEFAULT         reduce using rule 37 (retorno -> RETURN retorno .)
    CONST           reduce using rule 37 (retorno -> RETURN retorno .)
    LEN             reduce using rule 37 (retorno -> RETURN retorno .)
    INT             reduce using rule 37 (retorno -> RETURN retorno .)
    FLOAT           reduce using rule 37 (retorno -> RETURN retorno .)
    $end            reduce using rule 37 (retorno -> RETURN retorno .)
    RCURLY          reduce using rule 37 (retorno -> RETURN retorno .)


state 68

    (107) return -> RETURN expression .

    ID              reduce using rule 107 (return -> RETURN expression .)
    CASE            reduce using rule 107 (return -> RETURN expression .)
    FOR             reduce using rule 107 (return -> RETURN expression .)
    IF              reduce using rule 107 (return -> RETURN expression .)
    FUNC            reduce using rule 107 (return -> RETURN expression .)
    SWITCH          reduce using rule 107 (return -> RETURN expression .)
    TYPE            reduce using rule 107 (return -> RETURN expression .)
    RETURN          reduce using rule 107 (return -> RETURN expression .)
    VAR             reduce using rule 107 (return -> RETURN expression .)
    FMT             reduce using rule 107 (return -> RETURN expression .)
    DEFER           reduce using rule 107 (return -> RETURN expression .)
    DEFAULT         reduce using rule 107 (return -> RETURN expression .)
    CONST           reduce using rule 107 (return -> RETURN expression .)
    LEN             reduce using rule 107 (return -> RETURN expression .)
    INT             reduce using rule 107 (return -> RETURN expression .)
    FLOAT           reduce using rule 107 (return -> RETURN expression .)
    $end            reduce using rule 107 (return -> RETURN expression .)
    RCURLY          reduce using rule 107 (return -> RETURN expression .)


state 69

    (108) return -> RETURN INT .

    ID              reduce using rule 108 (return -> RETURN INT .)
    CASE            reduce using rule 108 (return -> RETURN INT .)
    FOR             reduce using rule 108 (return -> RETURN INT .)
    IF              reduce using rule 108 (return -> RETURN INT .)
    FUNC            reduce using rule 108 (return -> RETURN INT .)
    SWITCH          reduce using rule 108 (return -> RETURN INT .)
    TYPE            reduce using rule 108 (return -> RETURN INT .)
    RETURN          reduce using rule 108 (return -> RETURN INT .)
    VAR             reduce using rule 108 (return -> RETURN INT .)
    FMT             reduce using rule 108 (return -> RETURN INT .)
    DEFER           reduce using rule 108 (return -> RETURN INT .)
    DEFAULT         reduce using rule 108 (return -> RETURN INT .)
    CONST           reduce using rule 108 (return -> RETURN INT .)
    LEN             reduce using rule 108 (return -> RETURN INT .)
    INT             reduce using rule 108 (return -> RETURN INT .)
    FLOAT           reduce using rule 108 (return -> RETURN INT .)
    $end            reduce using rule 108 (return -> RETURN INT .)
    RCURLY          reduce using rule 108 (return -> RETURN INT .)


state 70

    (109) return -> RETURN sentence .

    ID              reduce using rule 109 (return -> RETURN sentence .)
    CASE            reduce using rule 109 (return -> RETURN sentence .)
    FOR             reduce using rule 109 (return -> RETURN sentence .)
    IF              reduce using rule 109 (return -> RETURN sentence .)
    FUNC            reduce using rule 109 (return -> RETURN sentence .)
    SWITCH          reduce using rule 109 (return -> RETURN sentence .)
    TYPE            reduce using rule 109 (return -> RETURN sentence .)
    RETURN          reduce using rule 109 (return -> RETURN sentence .)
    VAR             reduce using rule 109 (return -> RETURN sentence .)
    FMT             reduce using rule 109 (return -> RETURN sentence .)
    DEFER           reduce using rule 109 (return -> RETURN sentence .)
    DEFAULT         reduce using rule 109 (return -> RETURN sentence .)
    CONST           reduce using rule 109 (return -> RETURN sentence .)
    LEN             reduce using rule 109 (return -> RETURN sentence .)
    INT             reduce using rule 109 (return -> RETURN sentence .)
    FLOAT           reduce using rule 109 (return -> RETURN sentence .)
    $end            reduce using rule 109 (return -> RETURN sentence .)
    RCURLY          reduce using rule 109 (return -> RETURN sentence .)


state 71

    (35) retorno -> ID .
    (36) retorno -> ID . COMMA
    (38) expression -> ID . comparator ID
    (39) expression -> ID . comparator INT
    (40) expression -> ID .
    (43) expression -> ID . LBRACKETS ID RBRACKETS MORETHAN ID
    (89) list_function -> ID . LPAREN param_list RPAREN
    (44) comparator -> . COMPARE
    (45) comparator -> . MORETHAN
    (46) comparator -> . MINUSTHAN

  ! reduce/reduce conflict for ID resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for LEN resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 35 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 35 (retorno -> ID .)
    ID              reduce using rule 35 (retorno -> ID .)
    CASE            reduce using rule 35 (retorno -> ID .)
    FOR             reduce using rule 35 (retorno -> ID .)
    IF              reduce using rule 35 (retorno -> ID .)
    FUNC            reduce using rule 35 (retorno -> ID .)
    SWITCH          reduce using rule 35 (retorno -> ID .)
    TYPE            reduce using rule 35 (retorno -> ID .)
    RETURN          reduce using rule 35 (retorno -> ID .)
    VAR             reduce using rule 35 (retorno -> ID .)
    FMT             reduce using rule 35 (retorno -> ID .)
    DEFER           reduce using rule 35 (retorno -> ID .)
    DEFAULT         reduce using rule 35 (retorno -> ID .)
    CONST           reduce using rule 35 (retorno -> ID .)
    LEN             reduce using rule 35 (retorno -> ID .)
    INT             reduce using rule 35 (retorno -> ID .)
    FLOAT           reduce using rule 35 (retorno -> ID .)
    $end            reduce using rule 35 (retorno -> ID .)
    RCURLY          reduce using rule 35 (retorno -> ID .)
    COMMA           shift and go to state 49
    LBRACKETS       shift and go to state 111
    LPAREN          shift and go to state 50
    COMPARE         shift and go to state 54
    MORETHAN        shift and go to state 52
    MINUSTHAN       shift and go to state 55

  ! ID              [ reduce using rule 40 (expression -> ID .) ]
  ! CASE            [ reduce using rule 40 (expression -> ID .) ]
  ! FOR             [ reduce using rule 40 (expression -> ID .) ]
  ! IF              [ reduce using rule 40 (expression -> ID .) ]
  ! FUNC            [ reduce using rule 40 (expression -> ID .) ]
  ! SWITCH          [ reduce using rule 40 (expression -> ID .) ]
  ! TYPE            [ reduce using rule 40 (expression -> ID .) ]
  ! RETURN          [ reduce using rule 40 (expression -> ID .) ]
  ! VAR             [ reduce using rule 40 (expression -> ID .) ]
  ! FMT             [ reduce using rule 40 (expression -> ID .) ]
  ! DEFER           [ reduce using rule 40 (expression -> ID .) ]
  ! DEFAULT         [ reduce using rule 40 (expression -> ID .) ]
  ! CONST           [ reduce using rule 40 (expression -> ID .) ]
  ! LEN             [ reduce using rule 40 (expression -> ID .) ]
  ! INT             [ reduce using rule 40 (expression -> ID .) ]
  ! FLOAT           [ reduce using rule 40 (expression -> ID .) ]
  ! $end            [ reduce using rule 40 (expression -> ID .) ]
  ! RCURLY          [ reduce using rule 40 (expression -> ID .) ]

    comparator                     shift and go to state 51

state 72

    (100) mathExpProd -> mathExp operator . mathExpProd
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    mathExp                        shift and go to state 36
    mathExpProd                    shift and go to state 116
    number                         shift and go to state 40

state 73

    (47) operator -> DIVIDE .

    INT             reduce using rule 47 (operator -> DIVIDE .)
    FLOAT           reduce using rule 47 (operator -> DIVIDE .)


state 74

    (48) operator -> MINUS .

    INT             reduce using rule 48 (operator -> MINUS .)
    FLOAT           reduce using rule 48 (operator -> MINUS .)


state 75

    (49) operator -> PLUS .

    INT             reduce using rule 49 (operator -> PLUS .)
    FLOAT           reduce using rule 49 (operator -> PLUS .)


state 76

    (50) operator -> TIMES .

    INT             reduce using rule 50 (operator -> TIMES .)
    FLOAT           reduce using rule 50 (operator -> TIMES .)


state 77

    (52) switch -> SWITCH ID . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 117


state 78

    (70) pila -> TYPE STACK . LBRACKETS RBRACKETS ID
    (71) pila -> TYPE STACK . INTERFACE LCURLY RCURLY
    (72) pila -> TYPE STACK . STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 118
    INTERFACE       shift and go to state 119
    STRUCT          shift and go to state 120


state 79

    (92) declaration -> VAR ID . ID
    (93) declaration -> VAR ID . ID EQUALSVAR number
    (94) declaration -> VAR ID . ID EQUALSVAR STR
    (95) declaration -> VAR ID . ID EQUALSVAR ID
    (96) declaration -> VAR ID . EQUALSVAR ID LBRACKETS INT RBRACKETS

    ID              shift and go to state 121
    EQUALSVAR       shift and go to state 122


state 80

    (98) mathExp -> number operator . number
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    number                         shift and go to state 123

state 81

    (101) sentence -> FMT PERIOD . PRINTLN LPAREN arguments RPAREN
    (102) sentence -> FMT PERIOD . PRINTF LPAREN arguments RPAREN

    PRINTLN         shift and go to state 124
    PRINTF          shift and go to state 125


state 82

    (113) defer_statement -> DEFER line .

    ID              reduce using rule 113 (defer_statement -> DEFER line .)
    CASE            reduce using rule 113 (defer_statement -> DEFER line .)
    FOR             reduce using rule 113 (defer_statement -> DEFER line .)
    IF              reduce using rule 113 (defer_statement -> DEFER line .)
    FUNC            reduce using rule 113 (defer_statement -> DEFER line .)
    SWITCH          reduce using rule 113 (defer_statement -> DEFER line .)
    TYPE            reduce using rule 113 (defer_statement -> DEFER line .)
    RETURN          reduce using rule 113 (defer_statement -> DEFER line .)
    VAR             reduce using rule 113 (defer_statement -> DEFER line .)
    FMT             reduce using rule 113 (defer_statement -> DEFER line .)
    DEFER           reduce using rule 113 (defer_statement -> DEFER line .)
    DEFAULT         reduce using rule 113 (defer_statement -> DEFER line .)
    CONST           reduce using rule 113 (defer_statement -> DEFER line .)
    LEN             reduce using rule 113 (defer_statement -> DEFER line .)
    INT             reduce using rule 113 (defer_statement -> DEFER line .)
    FLOAT           reduce using rule 113 (defer_statement -> DEFER line .)
    $end            reduce using rule 113 (defer_statement -> DEFER line .)
    RCURLY          reduce using rule 113 (defer_statement -> DEFER line .)


state 83

    (112) case_statements -> DEFAULT TWODOTS . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    line                           shift and go to state 126
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 84

    (114) constant_declaration -> CONST variablenum .

    ID              reduce using rule 114 (constant_declaration -> CONST variablenum .)
    CASE            reduce using rule 114 (constant_declaration -> CONST variablenum .)
    FOR             reduce using rule 114 (constant_declaration -> CONST variablenum .)
    IF              reduce using rule 114 (constant_declaration -> CONST variablenum .)
    FUNC            reduce using rule 114 (constant_declaration -> CONST variablenum .)
    SWITCH          reduce using rule 114 (constant_declaration -> CONST variablenum .)
    TYPE            reduce using rule 114 (constant_declaration -> CONST variablenum .)
    RETURN          reduce using rule 114 (constant_declaration -> CONST variablenum .)
    VAR             reduce using rule 114 (constant_declaration -> CONST variablenum .)
    FMT             reduce using rule 114 (constant_declaration -> CONST variablenum .)
    DEFER           reduce using rule 114 (constant_declaration -> CONST variablenum .)
    DEFAULT         reduce using rule 114 (constant_declaration -> CONST variablenum .)
    CONST           reduce using rule 114 (constant_declaration -> CONST variablenum .)
    LEN             reduce using rule 114 (constant_declaration -> CONST variablenum .)
    INT             reduce using rule 114 (constant_declaration -> CONST variablenum .)
    FLOAT           reduce using rule 114 (constant_declaration -> CONST variablenum .)
    $end            reduce using rule 114 (constant_declaration -> CONST variablenum .)
    RCURLY          reduce using rule 114 (constant_declaration -> CONST variablenum .)


state 85

    (115) variablenum -> ID . EQUALS number

    EQUALS          shift and go to state 127


state 86

    (5) value -> ID .

    ID              reduce using rule 5 (value -> ID .)
    CASE            reduce using rule 5 (value -> ID .)
    FOR             reduce using rule 5 (value -> ID .)
    IF              reduce using rule 5 (value -> ID .)
    FUNC            reduce using rule 5 (value -> ID .)
    SWITCH          reduce using rule 5 (value -> ID .)
    TYPE            reduce using rule 5 (value -> ID .)
    RETURN          reduce using rule 5 (value -> ID .)
    VAR             reduce using rule 5 (value -> ID .)
    FMT             reduce using rule 5 (value -> ID .)
    DEFER           reduce using rule 5 (value -> ID .)
    DEFAULT         reduce using rule 5 (value -> ID .)
    CONST           reduce using rule 5 (value -> ID .)
    LEN             reduce using rule 5 (value -> ID .)
    INT             reduce using rule 5 (value -> ID .)
    FLOAT           reduce using rule 5 (value -> ID .)
    $end            reduce using rule 5 (value -> ID .)
    RCURLY          reduce using rule 5 (value -> ID .)


state 87

    (8) line -> ID EQUALSVAR value .

    ID              reduce using rule 8 (line -> ID EQUALSVAR value .)
    CASE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    FOR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    IF              reduce using rule 8 (line -> ID EQUALSVAR value .)
    FUNC            reduce using rule 8 (line -> ID EQUALSVAR value .)
    SWITCH          reduce using rule 8 (line -> ID EQUALSVAR value .)
    TYPE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RETURN          reduce using rule 8 (line -> ID EQUALSVAR value .)
    VAR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FMT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFER           reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFAULT         reduce using rule 8 (line -> ID EQUALSVAR value .)
    CONST           reduce using rule 8 (line -> ID EQUALSVAR value .)
    LEN             reduce using rule 8 (line -> ID EQUALSVAR value .)
    INT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FLOAT           reduce using rule 8 (line -> ID EQUALSVAR value .)
    $end            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RCURLY          reduce using rule 8 (line -> ID EQUALSVAR value .)


state 88

    (20) line -> ID EQUALSVAR INT .
    (2) value -> INT .

  ! reduce/reduce conflict for ID resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FUNC resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for TYPE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FMT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFER resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CONST resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for LEN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    CASE            reduce using rule 2 (value -> INT .)
    FOR             reduce using rule 2 (value -> INT .)
    IF              reduce using rule 2 (value -> INT .)
    FUNC            reduce using rule 2 (value -> INT .)
    SWITCH          reduce using rule 2 (value -> INT .)
    TYPE            reduce using rule 2 (value -> INT .)
    RETURN          reduce using rule 2 (value -> INT .)
    VAR             reduce using rule 2 (value -> INT .)
    FMT             reduce using rule 2 (value -> INT .)
    DEFER           reduce using rule 2 (value -> INT .)
    DEFAULT         reduce using rule 2 (value -> INT .)
    CONST           reduce using rule 2 (value -> INT .)
    LEN             reduce using rule 2 (value -> INT .)
    INT             reduce using rule 2 (value -> INT .)
    FLOAT           reduce using rule 2 (value -> INT .)
    $end            reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)

  ! ID              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CASE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FOR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! IF              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FUNC            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! SWITCH          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! TYPE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RETURN          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! VAR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FMT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFER           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFAULT         [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CONST           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! LEN             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! INT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FLOAT           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! $end            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RCURLY          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]


state 89

    (63) array -> ID EQUALSVAR LBRACKETS . INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> ID EQUALSVAR LBRACKETS . RBRACKETS ID LCURLY elemSlice RCURLY

    INT             shift and go to state 128
    RBRACKETS       shift and go to state 129


state 90

    (80) functionAppend -> ID EQUALSVAR APPEND . LPAREN param_list RPAREN

    LPAREN          shift and go to state 130


state 91

    (3) value -> FLOAT .

    ID              reduce using rule 3 (value -> FLOAT .)
    CASE            reduce using rule 3 (value -> FLOAT .)
    FOR             reduce using rule 3 (value -> FLOAT .)
    IF              reduce using rule 3 (value -> FLOAT .)
    FUNC            reduce using rule 3 (value -> FLOAT .)
    SWITCH          reduce using rule 3 (value -> FLOAT .)
    TYPE            reduce using rule 3 (value -> FLOAT .)
    RETURN          reduce using rule 3 (value -> FLOAT .)
    VAR             reduce using rule 3 (value -> FLOAT .)
    FMT             reduce using rule 3 (value -> FLOAT .)
    DEFER           reduce using rule 3 (value -> FLOAT .)
    DEFAULT         reduce using rule 3 (value -> FLOAT .)
    CONST           reduce using rule 3 (value -> FLOAT .)
    LEN             reduce using rule 3 (value -> FLOAT .)
    INT             reduce using rule 3 (value -> FLOAT .)
    FLOAT           reduce using rule 3 (value -> FLOAT .)
    $end            reduce using rule 3 (value -> FLOAT .)
    RCURLY          reduce using rule 3 (value -> FLOAT .)


state 92

    (4) value -> STR .

    ID              reduce using rule 4 (value -> STR .)
    CASE            reduce using rule 4 (value -> STR .)
    FOR             reduce using rule 4 (value -> STR .)
    IF              reduce using rule 4 (value -> STR .)
    FUNC            reduce using rule 4 (value -> STR .)
    SWITCH          reduce using rule 4 (value -> STR .)
    TYPE            reduce using rule 4 (value -> STR .)
    RETURN          reduce using rule 4 (value -> STR .)
    VAR             reduce using rule 4 (value -> STR .)
    FMT             reduce using rule 4 (value -> STR .)
    DEFER           reduce using rule 4 (value -> STR .)
    DEFAULT         reduce using rule 4 (value -> STR .)
    CONST           reduce using rule 4 (value -> STR .)
    LEN             reduce using rule 4 (value -> STR .)
    INT             reduce using rule 4 (value -> STR .)
    FLOAT           reduce using rule 4 (value -> STR .)
    $end            reduce using rule 4 (value -> STR .)
    RCURLY          reduce using rule 4 (value -> STR .)


state 93

    (43) expression -> ID LBRACKETS ID . RBRACKETS MORETHAN ID

    RBRACKETS       shift and go to state 131


state 94

    (67) emptySlice -> ID LBRACKETS RBRACKETS . ID

    ID              shift and go to state 132


state 95

    (86) param -> ID .
    (5) value -> ID .
    (67) emptySlice -> ID . LBRACKETS RBRACKETS ID

    RPAREN          reduce using rule 86 (param -> ID .)
    COMMA           reduce using rule 86 (param -> ID .)
    ID              reduce using rule 5 (value -> ID .)
    LBRACKETS       shift and go to state 133


state 96

    (89) list_function -> ID LPAREN param_list . RPAREN
    (83) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 134
    COMMA           shift and go to state 135


state 97

    (82) param_list -> param .

    RPAREN          reduce using rule 82 (param_list -> param .)
    COMMA           reduce using rule 82 (param_list -> param .)


state 98

    (84) param -> value . ID

    ID              shift and go to state 136


state 99

    (85) param -> emptySlice .

    RPAREN          reduce using rule 85 (param -> emptySlice .)
    COMMA           reduce using rule 85 (param -> emptySlice .)


state 100

    (87) param -> STR .
    (4) value -> STR .

    RPAREN          reduce using rule 87 (param -> STR .)
    COMMA           reduce using rule 87 (param -> STR .)
    ID              reduce using rule 4 (value -> STR .)


state 101

    (88) param -> INT .
    (2) value -> INT .

    RPAREN          reduce using rule 88 (param -> INT .)
    COMMA           reduce using rule 88 (param -> INT .)
    ID              reduce using rule 2 (value -> INT .)


state 102

    (38) expression -> ID comparator ID .

    ID              reduce using rule 38 (expression -> ID comparator ID .)
    CASE            reduce using rule 38 (expression -> ID comparator ID .)
    FOR             reduce using rule 38 (expression -> ID comparator ID .)
    IF              reduce using rule 38 (expression -> ID comparator ID .)
    FUNC            reduce using rule 38 (expression -> ID comparator ID .)
    SWITCH          reduce using rule 38 (expression -> ID comparator ID .)
    TYPE            reduce using rule 38 (expression -> ID comparator ID .)
    RETURN          reduce using rule 38 (expression -> ID comparator ID .)
    VAR             reduce using rule 38 (expression -> ID comparator ID .)
    FMT             reduce using rule 38 (expression -> ID comparator ID .)
    DEFER           reduce using rule 38 (expression -> ID comparator ID .)
    DEFAULT         reduce using rule 38 (expression -> ID comparator ID .)
    CONST           reduce using rule 38 (expression -> ID comparator ID .)
    LEN             reduce using rule 38 (expression -> ID comparator ID .)
    INT             reduce using rule 38 (expression -> ID comparator ID .)
    FLOAT           reduce using rule 38 (expression -> ID comparator ID .)
    $end            reduce using rule 38 (expression -> ID comparator ID .)
    RCURLY          reduce using rule 38 (expression -> ID comparator ID .)
    LCURLY          reduce using rule 38 (expression -> ID comparator ID .)


state 103

    (39) expression -> ID comparator INT .

    ID              reduce using rule 39 (expression -> ID comparator INT .)
    CASE            reduce using rule 39 (expression -> ID comparator INT .)
    FOR             reduce using rule 39 (expression -> ID comparator INT .)
    IF              reduce using rule 39 (expression -> ID comparator INT .)
    FUNC            reduce using rule 39 (expression -> ID comparator INT .)
    SWITCH          reduce using rule 39 (expression -> ID comparator INT .)
    TYPE            reduce using rule 39 (expression -> ID comparator INT .)
    RETURN          reduce using rule 39 (expression -> ID comparator INT .)
    VAR             reduce using rule 39 (expression -> ID comparator INT .)
    FMT             reduce using rule 39 (expression -> ID comparator INT .)
    DEFER           reduce using rule 39 (expression -> ID comparator INT .)
    DEFAULT         reduce using rule 39 (expression -> ID comparator INT .)
    CONST           reduce using rule 39 (expression -> ID comparator INT .)
    LEN             reduce using rule 39 (expression -> ID comparator INT .)
    INT             reduce using rule 39 (expression -> ID comparator INT .)
    FLOAT           reduce using rule 39 (expression -> ID comparator INT .)
    $end            reduce using rule 39 (expression -> ID comparator INT .)
    RCURLY          reduce using rule 39 (expression -> ID comparator INT .)
    LCURLY          reduce using rule 39 (expression -> ID comparator INT .)


state 104

    (59) statement -> ID EQUALS ID . LBRACKETS ID RBRACKETS

    LBRACKETS       shift and go to state 137


state 105

    (16) line -> CASE INT TWODOTS . line
    (110) case_statements -> CASE INT TWODOTS . line
    (111) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    line                           shift and go to state 138
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 106

    (41) expression -> list_function comparator INT .

    ID              reduce using rule 41 (expression -> list_function comparator INT .)
    CASE            reduce using rule 41 (expression -> list_function comparator INT .)
    FOR             reduce using rule 41 (expression -> list_function comparator INT .)
    IF              reduce using rule 41 (expression -> list_function comparator INT .)
    FUNC            reduce using rule 41 (expression -> list_function comparator INT .)
    SWITCH          reduce using rule 41 (expression -> list_function comparator INT .)
    TYPE            reduce using rule 41 (expression -> list_function comparator INT .)
    RETURN          reduce using rule 41 (expression -> list_function comparator INT .)
    VAR             reduce using rule 41 (expression -> list_function comparator INT .)
    FMT             reduce using rule 41 (expression -> list_function comparator INT .)
    DEFER           reduce using rule 41 (expression -> list_function comparator INT .)
    DEFAULT         reduce using rule 41 (expression -> list_function comparator INT .)
    CONST           reduce using rule 41 (expression -> list_function comparator INT .)
    LEN             reduce using rule 41 (expression -> list_function comparator INT .)
    INT             reduce using rule 41 (expression -> list_function comparator INT .)
    FLOAT           reduce using rule 41 (expression -> list_function comparator INT .)
    $end            reduce using rule 41 (expression -> list_function comparator INT .)
    RCURLY          reduce using rule 41 (expression -> list_function comparator INT .)
    LCURLY          reduce using rule 41 (expression -> list_function comparator INT .)


state 107

    (42) expression -> list_function comparator ID .

    ID              reduce using rule 42 (expression -> list_function comparator ID .)
    CASE            reduce using rule 42 (expression -> list_function comparator ID .)
    FOR             reduce using rule 42 (expression -> list_function comparator ID .)
    IF              reduce using rule 42 (expression -> list_function comparator ID .)
    FUNC            reduce using rule 42 (expression -> list_function comparator ID .)
    SWITCH          reduce using rule 42 (expression -> list_function comparator ID .)
    TYPE            reduce using rule 42 (expression -> list_function comparator ID .)
    RETURN          reduce using rule 42 (expression -> list_function comparator ID .)
    VAR             reduce using rule 42 (expression -> list_function comparator ID .)
    FMT             reduce using rule 42 (expression -> list_function comparator ID .)
    DEFER           reduce using rule 42 (expression -> list_function comparator ID .)
    DEFAULT         reduce using rule 42 (expression -> list_function comparator ID .)
    CONST           reduce using rule 42 (expression -> list_function comparator ID .)
    LEN             reduce using rule 42 (expression -> list_function comparator ID .)
    INT             reduce using rule 42 (expression -> list_function comparator ID .)
    FLOAT           reduce using rule 42 (expression -> list_function comparator ID .)
    $end            reduce using rule 42 (expression -> list_function comparator ID .)
    RCURLY          reduce using rule 42 (expression -> list_function comparator ID .)
    LCURLY          reduce using rule 42 (expression -> list_function comparator ID .)


state 108

    (51) stamentFor -> FOR ID EQUALSVAR . INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    INT             shift and go to state 139


state 109

    (90) list_function -> LEN LPAREN ID . RPAREN

    RPAREN          shift and go to state 140


state 110

    (53) consulta -> IF expression LCURLY . statements RCURLY
    (54) consulta -> IF expression LCURLY . statements RCURLY ELSE LCURLY statements RCURLY
    (55) statements -> . statement
    (56) statements -> . statement statements
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN

    ID              shift and go to state 143
    FMT             shift and go to state 41

    statements                     shift and go to state 141
    statement                      shift and go to state 142
    sentence                       shift and go to state 144
    functionAppend                 shift and go to state 145

state 111

    (43) expression -> ID LBRACKETS . ID RBRACKETS MORETHAN ID

    ID              shift and go to state 93


state 112

    (73) push -> FUNC PUSH LPAREN . ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 146


state 113

    (78) function -> FUNC ID LPAREN . param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> FUNC ID LPAREN . param_list RPAREN LCURLY repeatLines RCURLY
    (75) func_declaration -> FUNC ID LPAREN . RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (74) funcion -> FUNC ID LPAREN . RPAREN ID LCURLY repeatLines RCURLY
    (82) param_list -> . param
    (83) param_list -> . param_list COMMA param
    (84) param -> . value ID
    (85) param -> . emptySlice
    (86) param -> . ID
    (87) param -> . STR
    (88) param -> . INT
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID

    RPAREN          shift and go to state 148
    ID              shift and go to state 95
    STR             shift and go to state 100
    INT             shift and go to state 101
    FLOAT           shift and go to state 91

    param_list                     shift and go to state 147
    param                          shift and go to state 97
    value                          shift and go to state 98
    emptySlice                     shift and go to state 99

state 114

    (81) mainFunction -> FUNC MAIN LPAREN . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 149


state 115

    (35) retorno -> ID .
    (36) retorno -> ID . COMMA

    ID              reduce using rule 35 (retorno -> ID .)
    CASE            reduce using rule 35 (retorno -> ID .)
    FOR             reduce using rule 35 (retorno -> ID .)
    IF              reduce using rule 35 (retorno -> ID .)
    FUNC            reduce using rule 35 (retorno -> ID .)
    SWITCH          reduce using rule 35 (retorno -> ID .)
    TYPE            reduce using rule 35 (retorno -> ID .)
    RETURN          reduce using rule 35 (retorno -> ID .)
    VAR             reduce using rule 35 (retorno -> ID .)
    FMT             reduce using rule 35 (retorno -> ID .)
    DEFER           reduce using rule 35 (retorno -> ID .)
    DEFAULT         reduce using rule 35 (retorno -> ID .)
    CONST           reduce using rule 35 (retorno -> ID .)
    LEN             reduce using rule 35 (retorno -> ID .)
    INT             reduce using rule 35 (retorno -> ID .)
    FLOAT           reduce using rule 35 (retorno -> ID .)
    $end            reduce using rule 35 (retorno -> ID .)
    RCURLY          reduce using rule 35 (retorno -> ID .)
    COMMA           shift and go to state 49


state 116

    (100) mathExpProd -> mathExp operator mathExpProd .

    ID              reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    CASE            reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    FOR             reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    IF              reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    FUNC            reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    SWITCH          reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    TYPE            reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    RETURN          reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    VAR             reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    FMT             reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    DEFER           reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    DEFAULT         reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    CONST           reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    LEN             reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    INT             reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    FLOAT           reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    $end            reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)
    RCURLY          reduce using rule 100 (mathExpProd -> mathExp operator mathExpProd .)


state 117

    (52) switch -> SWITCH ID LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 150
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 118

    (70) pila -> TYPE STACK LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 151


state 119

    (71) pila -> TYPE STACK INTERFACE . LCURLY RCURLY

    LCURLY          shift and go to state 152


state 120

    (72) pila -> TYPE STACK STRUCT . LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LCURLY          shift and go to state 153


state 121

    (92) declaration -> VAR ID ID .
    (93) declaration -> VAR ID ID . EQUALSVAR number
    (94) declaration -> VAR ID ID . EQUALSVAR STR
    (95) declaration -> VAR ID ID . EQUALSVAR ID

    ID              reduce using rule 92 (declaration -> VAR ID ID .)
    CASE            reduce using rule 92 (declaration -> VAR ID ID .)
    FOR             reduce using rule 92 (declaration -> VAR ID ID .)
    IF              reduce using rule 92 (declaration -> VAR ID ID .)
    FUNC            reduce using rule 92 (declaration -> VAR ID ID .)
    SWITCH          reduce using rule 92 (declaration -> VAR ID ID .)
    TYPE            reduce using rule 92 (declaration -> VAR ID ID .)
    RETURN          reduce using rule 92 (declaration -> VAR ID ID .)
    VAR             reduce using rule 92 (declaration -> VAR ID ID .)
    FMT             reduce using rule 92 (declaration -> VAR ID ID .)
    DEFER           reduce using rule 92 (declaration -> VAR ID ID .)
    DEFAULT         reduce using rule 92 (declaration -> VAR ID ID .)
    CONST           reduce using rule 92 (declaration -> VAR ID ID .)
    LEN             reduce using rule 92 (declaration -> VAR ID ID .)
    INT             reduce using rule 92 (declaration -> VAR ID ID .)
    FLOAT           reduce using rule 92 (declaration -> VAR ID ID .)
    $end            reduce using rule 92 (declaration -> VAR ID ID .)
    RCURLY          reduce using rule 92 (declaration -> VAR ID ID .)
    EQUALSVAR       shift and go to state 154


state 122

    (96) declaration -> VAR ID EQUALSVAR . ID LBRACKETS INT RBRACKETS

    ID              shift and go to state 155


state 123

    (98) mathExp -> number operator number .

    DIVIDE          reduce using rule 98 (mathExp -> number operator number .)
    MINUS           reduce using rule 98 (mathExp -> number operator number .)
    PLUS            reduce using rule 98 (mathExp -> number operator number .)
    TIMES           reduce using rule 98 (mathExp -> number operator number .)
    ID              reduce using rule 98 (mathExp -> number operator number .)
    CASE            reduce using rule 98 (mathExp -> number operator number .)
    FOR             reduce using rule 98 (mathExp -> number operator number .)
    IF              reduce using rule 98 (mathExp -> number operator number .)
    FUNC            reduce using rule 98 (mathExp -> number operator number .)
    SWITCH          reduce using rule 98 (mathExp -> number operator number .)
    TYPE            reduce using rule 98 (mathExp -> number operator number .)
    RETURN          reduce using rule 98 (mathExp -> number operator number .)
    VAR             reduce using rule 98 (mathExp -> number operator number .)
    FMT             reduce using rule 98 (mathExp -> number operator number .)
    DEFER           reduce using rule 98 (mathExp -> number operator number .)
    DEFAULT         reduce using rule 98 (mathExp -> number operator number .)
    CONST           reduce using rule 98 (mathExp -> number operator number .)
    LEN             reduce using rule 98 (mathExp -> number operator number .)
    INT             reduce using rule 98 (mathExp -> number operator number .)
    FLOAT           reduce using rule 98 (mathExp -> number operator number .)
    $end            reduce using rule 98 (mathExp -> number operator number .)
    RCURLY          reduce using rule 98 (mathExp -> number operator number .)


state 124

    (101) sentence -> FMT PERIOD PRINTLN . LPAREN arguments RPAREN

    LPAREN          shift and go to state 156


state 125

    (102) sentence -> FMT PERIOD PRINTF . LPAREN arguments RPAREN

    LPAREN          shift and go to state 157


state 126

    (112) case_statements -> DEFAULT TWODOTS line .

    ID              reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    CASE            reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    FOR             reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    IF              reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    FUNC            reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    SWITCH          reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    TYPE            reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    RETURN          reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    VAR             reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    FMT             reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    DEFER           reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    DEFAULT         reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    CONST           reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    LEN             reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    INT             reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    FLOAT           reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    $end            reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)
    RCURLY          reduce using rule 112 (case_statements -> DEFAULT TWODOTS line .)


state 127

    (115) variablenum -> ID EQUALS . number
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    number                         shift and go to state 158

state 128

    (63) array -> ID EQUALSVAR LBRACKETS INT . RBRACKETS ID LCURLY elemArray RCURLY

    RBRACKETS       shift and go to state 159


state 129

    (66) slice -> ID EQUALSVAR LBRACKETS RBRACKETS . ID LCURLY elemSlice RCURLY

    ID              shift and go to state 160


state 130

    (80) functionAppend -> ID EQUALSVAR APPEND LPAREN . param_list RPAREN
    (82) param_list -> . param
    (83) param_list -> . param_list COMMA param
    (84) param -> . value ID
    (85) param -> . emptySlice
    (86) param -> . ID
    (87) param -> . STR
    (88) param -> . INT
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID

    ID              shift and go to state 95
    STR             shift and go to state 100
    INT             shift and go to state 101
    FLOAT           shift and go to state 91

    param_list                     shift and go to state 161
    param                          shift and go to state 97
    value                          shift and go to state 98
    emptySlice                     shift and go to state 99

state 131

    (43) expression -> ID LBRACKETS ID RBRACKETS . MORETHAN ID

    MORETHAN        shift and go to state 162


state 132

    (67) emptySlice -> ID LBRACKETS RBRACKETS ID .

    ID              reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    DEFER           reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    DEFAULT         reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    CONST           reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    LEN             reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    RPAREN          reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)
    COMMA           reduce using rule 67 (emptySlice -> ID LBRACKETS RBRACKETS ID .)


state 133

    (67) emptySlice -> ID LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 94


state 134

    (89) list_function -> ID LPAREN param_list RPAREN .

    COMPARE         reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    MORETHAN        reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    MINUSTHAN       reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    ID              reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    CASE            reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    FOR             reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    IF              reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    FUNC            reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    SWITCH          reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    TYPE            reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    RETURN          reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    VAR             reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    FMT             reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    DEFER           reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    DEFAULT         reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    CONST           reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    LEN             reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    INT             reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    $end            reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)
    RCURLY          reduce using rule 89 (list_function -> ID LPAREN param_list RPAREN .)


state 135

    (83) param_list -> param_list COMMA . param
    (84) param -> . value ID
    (85) param -> . emptySlice
    (86) param -> . ID
    (87) param -> . STR
    (88) param -> . INT
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID

    ID              shift and go to state 95
    STR             shift and go to state 100
    INT             shift and go to state 101
    FLOAT           shift and go to state 91

    param                          shift and go to state 163
    value                          shift and go to state 98
    emptySlice                     shift and go to state 99

state 136

    (84) param -> value ID .

    RPAREN          reduce using rule 84 (param -> value ID .)
    COMMA           reduce using rule 84 (param -> value ID .)


state 137

    (59) statement -> ID EQUALS ID LBRACKETS . ID RBRACKETS

    ID              shift and go to state 164


state 138

    (16) line -> CASE INT TWODOTS line .
    (110) case_statements -> CASE INT TWODOTS line .
    (111) case_statements -> CASE INT TWODOTS line . case_statements
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line

  ! reduce/reduce conflict for ID resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CASE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for IF resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FUNC resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for TYPE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FMT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFER resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CONST resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for LEN resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for INT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for $end resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RCURLY resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FOR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    IF              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    VAR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FMT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CONST           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    LEN             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    INT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    $end            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CASE            shift and go to state 165
    DEFAULT         shift and go to state 43

  ! CASE            [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! ID              [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! CASE            [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! FOR             [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! IF              [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! FUNC            [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! SWITCH          [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! TYPE            [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! RETURN          [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! VAR             [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! FMT             [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFER           [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! CONST           [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! LEN             [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! INT             [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! FLOAT           [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! $end            [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! RCURLY          [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 166

state 139

    (51) stamentFor -> FOR ID EQUALSVAR INT . DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 167


state 140

    (90) list_function -> LEN LPAREN ID RPAREN .

    COMPARE         reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    MORETHAN        reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    MINUSTHAN       reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    ID              reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    CASE            reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    FOR             reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    IF              reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    FUNC            reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    SWITCH          reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    TYPE            reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    RETURN          reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    VAR             reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    FMT             reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    DEFER           reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    DEFAULT         reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    CONST           reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    LEN             reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    INT             reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    FLOAT           reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    $end            reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)
    RCURLY          reduce using rule 90 (list_function -> LEN LPAREN ID RPAREN .)


state 141

    (53) consulta -> IF expression LCURLY statements . RCURLY
    (54) consulta -> IF expression LCURLY statements . RCURLY ELSE LCURLY statements RCURLY

    RCURLY          shift and go to state 168


state 142

    (55) statements -> statement .
    (56) statements -> statement . statements
    (55) statements -> . statement
    (56) statements -> . statement statements
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN

    RCURLY          reduce using rule 55 (statements -> statement .)
    ID              shift and go to state 143
    FMT             shift and go to state 41

    statement                      shift and go to state 142
    statements                     shift and go to state 169
    sentence                       shift and go to state 144
    functionAppend                 shift and go to state 145

state 143

    (57) statement -> ID .
    (59) statement -> ID . EQUALS ID LBRACKETS ID RBRACKETS
    (80) functionAppend -> ID . EQUALSVAR APPEND LPAREN param_list RPAREN

    ID              reduce using rule 57 (statement -> ID .)
    FMT             reduce using rule 57 (statement -> ID .)
    RCURLY          reduce using rule 57 (statement -> ID .)
    EQUALS          shift and go to state 53
    EQUALSVAR       shift and go to state 170


state 144

    (58) statement -> sentence .

    ID              reduce using rule 58 (statement -> sentence .)
    FMT             reduce using rule 58 (statement -> sentence .)
    RCURLY          reduce using rule 58 (statement -> sentence .)


state 145

    (60) statement -> functionAppend .

    ID              reduce using rule 60 (statement -> functionAppend .)
    FMT             reduce using rule 60 (statement -> functionAppend .)
    RCURLY          reduce using rule 60 (statement -> functionAppend .)


state 146

    (73) push -> FUNC PUSH LPAREN ID . STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 171


state 147

    (78) function -> FUNC ID LPAREN param_list . RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> FUNC ID LPAREN param_list . RPAREN LCURLY repeatLines RCURLY
    (83) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 172
    COMMA           shift and go to state 135


state 148

    (75) func_declaration -> FUNC ID LPAREN RPAREN . LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (74) funcion -> FUNC ID LPAREN RPAREN . ID LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 174
    ID              shift and go to state 173


state 149

    (81) mainFunction -> FUNC MAIN LPAREN RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 175


state 150

    (52) switch -> SWITCH ID LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 176


state 151

    (70) pila -> TYPE STACK LBRACKETS RBRACKETS . ID

    ID              shift and go to state 177


state 152

    (71) pila -> TYPE STACK INTERFACE LCURLY . RCURLY

    RCURLY          shift and go to state 178


state 153

    (72) pila -> TYPE STACK STRUCT LCURLY . ID LBRACKETS RBRACKETS value RCURLY

    ID              shift and go to state 179


state 154

    (93) declaration -> VAR ID ID EQUALSVAR . number
    (94) declaration -> VAR ID ID EQUALSVAR . STR
    (95) declaration -> VAR ID ID EQUALSVAR . ID
    (61) number -> . INT
    (62) number -> . FLOAT

    STR             shift and go to state 182
    ID              shift and go to state 180
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    number                         shift and go to state 181

state 155

    (96) declaration -> VAR ID EQUALSVAR ID . LBRACKETS INT RBRACKETS

    LBRACKETS       shift and go to state 183


state 156

    (101) sentence -> FMT PERIOD PRINTLN LPAREN . arguments RPAREN
    (105) arguments -> . argument
    (106) arguments -> . argument COMMA arguments
    (103) argument -> . STR
    (104) argument -> . ID

    STR             shift and go to state 186
    ID              shift and go to state 187

    arguments                      shift and go to state 184
    argument                       shift and go to state 185

state 157

    (102) sentence -> FMT PERIOD PRINTF LPAREN . arguments RPAREN
    (105) arguments -> . argument
    (106) arguments -> . argument COMMA arguments
    (103) argument -> . STR
    (104) argument -> . ID

    STR             shift and go to state 186
    ID              shift and go to state 187

    arguments                      shift and go to state 188
    argument                       shift and go to state 185

state 158

    (115) variablenum -> ID EQUALS number .

    ID              reduce using rule 115 (variablenum -> ID EQUALS number .)
    CASE            reduce using rule 115 (variablenum -> ID EQUALS number .)
    FOR             reduce using rule 115 (variablenum -> ID EQUALS number .)
    IF              reduce using rule 115 (variablenum -> ID EQUALS number .)
    FUNC            reduce using rule 115 (variablenum -> ID EQUALS number .)
    SWITCH          reduce using rule 115 (variablenum -> ID EQUALS number .)
    TYPE            reduce using rule 115 (variablenum -> ID EQUALS number .)
    RETURN          reduce using rule 115 (variablenum -> ID EQUALS number .)
    VAR             reduce using rule 115 (variablenum -> ID EQUALS number .)
    FMT             reduce using rule 115 (variablenum -> ID EQUALS number .)
    DEFER           reduce using rule 115 (variablenum -> ID EQUALS number .)
    DEFAULT         reduce using rule 115 (variablenum -> ID EQUALS number .)
    CONST           reduce using rule 115 (variablenum -> ID EQUALS number .)
    LEN             reduce using rule 115 (variablenum -> ID EQUALS number .)
    INT             reduce using rule 115 (variablenum -> ID EQUALS number .)
    FLOAT           reduce using rule 115 (variablenum -> ID EQUALS number .)
    $end            reduce using rule 115 (variablenum -> ID EQUALS number .)
    RCURLY          reduce using rule 115 (variablenum -> ID EQUALS number .)


state 159

    (63) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS . ID LCURLY elemArray RCURLY

    ID              shift and go to state 189


state 160

    (66) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID . LCURLY elemSlice RCURLY

    LCURLY          shift and go to state 190


state 161

    (80) functionAppend -> ID EQUALSVAR APPEND LPAREN param_list . RPAREN
    (83) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 191
    COMMA           shift and go to state 135


state 162

    (43) expression -> ID LBRACKETS ID RBRACKETS MORETHAN . ID

    ID              shift and go to state 192


state 163

    (83) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 83 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 83 (param_list -> param_list COMMA param .)


state 164

    (59) statement -> ID EQUALS ID LBRACKETS ID . RBRACKETS

    RBRACKETS       shift and go to state 193


state 165

    (110) case_statements -> CASE . INT TWODOTS line
    (111) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 194


state 166

    (111) case_statements -> CASE INT TWODOTS line case_statements .

    ID              reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    CASE            reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    FOR             reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    IF              reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    FUNC            reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    SWITCH          reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    TYPE            reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    RETURN          reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    VAR             reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    FMT             reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFER           reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFAULT         reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    CONST           reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    LEN             reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    INT             reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    FLOAT           reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    $end            reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)
    RCURLY          reduce using rule 111 (case_statements -> CASE INT TWODOTS line case_statements .)


state 167

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA . ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 195


state 168

    (53) consulta -> IF expression LCURLY statements RCURLY .
    (54) consulta -> IF expression LCURLY statements RCURLY . ELSE LCURLY statements RCURLY

    ID              reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    CASE            reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    FOR             reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    IF              reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    FUNC            reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    SWITCH          reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    TYPE            reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    RETURN          reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    VAR             reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    FMT             reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFER           reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    CONST           reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    LEN             reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    INT             reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    FLOAT           reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    $end            reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    RCURLY          reduce using rule 53 (consulta -> IF expression LCURLY statements RCURLY .)
    ELSE            shift and go to state 196


state 169

    (56) statements -> statement statements .

    RCURLY          reduce using rule 56 (statements -> statement statements .)


state 170

    (80) functionAppend -> ID EQUALSVAR . APPEND LPAREN param_list RPAREN

    APPEND          shift and go to state 90


state 171

    (73) push -> FUNC PUSH LPAREN ID STACK . COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 197


state 172

    (78) function -> FUNC ID LPAREN param_list RPAREN . ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> FUNC ID LPAREN param_list RPAREN . LCURLY repeatLines RCURLY

    ID              shift and go to state 198
    LCURLY          shift and go to state 199


state 173

    (74) funcion -> FUNC ID LPAREN RPAREN ID . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 200


state 174

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN . return_types RPAREN LCURLY repeatLines RCURLY
    (76) return_types -> . ID COMMA ID
    (77) return_types -> . ID

    ID              shift and go to state 201

    return_types                   shift and go to state 202

state 175

    (81) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 203
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 176

    (52) switch -> SWITCH ID LCURLY repeatLines RCURLY .

    ID              reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    IF              reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    INT             reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    $end            reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 52 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)


state 177

    (70) pila -> TYPE STACK LBRACKETS RBRACKETS ID .

    ID              reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFER           reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFAULT         reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CONST           reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    LEN             reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 70 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)


state 178

    (71) pila -> TYPE STACK INTERFACE LCURLY RCURLY .

    ID              reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CASE            reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FOR             reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    IF              reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FUNC            reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    SWITCH          reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    TYPE            reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RETURN          reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    VAR             reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FMT             reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFER           reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFAULT         reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CONST           reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    LEN             reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    INT             reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FLOAT           reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    $end            reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RCURLY          reduce using rule 71 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)


state 179

    (72) pila -> TYPE STACK STRUCT LCURLY ID . LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 204


state 180

    (95) declaration -> VAR ID ID EQUALSVAR ID .

    ID              reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    CASE            reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    FOR             reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    IF              reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    FUNC            reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    SWITCH          reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    TYPE            reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    RETURN          reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    VAR             reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    FMT             reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    DEFER           reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    DEFAULT         reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    CONST           reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    LEN             reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    INT             reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    FLOAT           reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    $end            reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)
    RCURLY          reduce using rule 95 (declaration -> VAR ID ID EQUALSVAR ID .)


state 181

    (93) declaration -> VAR ID ID EQUALSVAR number .

    ID              reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    CASE            reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    FOR             reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    IF              reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    FUNC            reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    SWITCH          reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    TYPE            reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    RETURN          reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    VAR             reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    FMT             reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFER           reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFAULT         reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    CONST           reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    LEN             reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    INT             reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    FLOAT           reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    $end            reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)
    RCURLY          reduce using rule 93 (declaration -> VAR ID ID EQUALSVAR number .)


state 182

    (94) declaration -> VAR ID ID EQUALSVAR STR .

    ID              reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    CASE            reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    FOR             reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    IF              reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    FUNC            reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    SWITCH          reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    TYPE            reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    RETURN          reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    VAR             reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    FMT             reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFER           reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFAULT         reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    CONST           reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    LEN             reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    INT             reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    FLOAT           reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    $end            reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)
    RCURLY          reduce using rule 94 (declaration -> VAR ID ID EQUALSVAR STR .)


state 183

    (96) declaration -> VAR ID EQUALSVAR ID LBRACKETS . INT RBRACKETS

    INT             shift and go to state 205


state 184

    (101) sentence -> FMT PERIOD PRINTLN LPAREN arguments . RPAREN

    RPAREN          shift and go to state 206


state 185

    (105) arguments -> argument .
    (106) arguments -> argument . COMMA arguments

    RPAREN          reduce using rule 105 (arguments -> argument .)
    COMMA           shift and go to state 207


state 186

    (103) argument -> STR .

    COMMA           reduce using rule 103 (argument -> STR .)
    RPAREN          reduce using rule 103 (argument -> STR .)


state 187

    (104) argument -> ID .

    COMMA           reduce using rule 104 (argument -> ID .)
    RPAREN          reduce using rule 104 (argument -> ID .)


state 188

    (102) sentence -> FMT PERIOD PRINTF LPAREN arguments . RPAREN

    RPAREN          shift and go to state 208


state 189

    (63) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID . LCURLY elemArray RCURLY

    LCURLY          shift and go to state 209


state 190

    (66) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY . elemSlice RCURLY
    (68) elemSlice -> . number
    (69) elemSlice -> . number COMMA elemSlice
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    elemSlice                      shift and go to state 210
    number                         shift and go to state 211

state 191

    (80) functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .

    ID              reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    CASE            reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    FOR             reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    IF              reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    FUNC            reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    SWITCH          reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    TYPE            reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    RETURN          reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    VAR             reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    FMT             reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    DEFER           reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    DEFAULT         reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    CONST           reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    LEN             reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    INT             reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    FLOAT           reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    $end            reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)
    RCURLY          reduce using rule 80 (functionAppend -> ID EQUALSVAR APPEND LPAREN param_list RPAREN .)


state 192

    (43) expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .

    ID              reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    CASE            reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    FOR             reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    IF              reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    FUNC            reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    SWITCH          reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    TYPE            reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    RETURN          reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    VAR             reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    FMT             reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    DEFER           reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    DEFAULT         reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    CONST           reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    LEN             reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    INT             reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    FLOAT           reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    $end            reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    RCURLY          reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)
    LCURLY          reduce using rule 43 (expression -> ID LBRACKETS ID RBRACKETS MORETHAN ID .)


state 193

    (59) statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .

    ID              reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    CASE            reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    FOR             reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    IF              reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    FUNC            reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    SWITCH          reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    TYPE            reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    RETURN          reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    VAR             reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    FMT             reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    DEFER           reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    DEFAULT         reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    CONST           reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    LEN             reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    INT             reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    FLOAT           reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    $end            reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)
    RCURLY          reduce using rule 59 (statement -> ID EQUALS ID LBRACKETS ID RBRACKETS .)


state 194

    (110) case_statements -> CASE INT . TWODOTS line
    (111) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 212


state 195

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID . MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    MINUSTHAN       shift and go to state 213


state 196

    (54) consulta -> IF expression LCURLY statements RCURLY ELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 214


state 197

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA . ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 215


state 198

    (78) function -> FUNC ID LPAREN param_list RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 216


state 199

    (79) function -> FUNC ID LPAREN param_list RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 217
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 200

    (74) funcion -> FUNC ID LPAREN RPAREN ID LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 218
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 201

    (76) return_types -> ID . COMMA ID
    (77) return_types -> ID .

    COMMA           shift and go to state 219
    RPAREN          reduce using rule 77 (return_types -> ID .)


state 202

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 220


state 203

    (81) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 221


state 204

    (72) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS . RBRACKETS value RCURLY

    RBRACKETS       shift and go to state 222


state 205

    (96) declaration -> VAR ID EQUALSVAR ID LBRACKETS INT . RBRACKETS

    RBRACKETS       shift and go to state 223


state 206

    (101) sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .

    ID              reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    CASE            reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FOR             reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    IF              reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FUNC            reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    TYPE            reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    RETURN          reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    VAR             reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FMT             reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    DEFER           reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    CONST           reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    LEN             reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    INT             reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    $end            reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)
    RCURLY          reduce using rule 101 (sentence -> FMT PERIOD PRINTLN LPAREN arguments RPAREN .)


state 207

    (106) arguments -> argument COMMA . arguments
    (105) arguments -> . argument
    (106) arguments -> . argument COMMA arguments
    (103) argument -> . STR
    (104) argument -> . ID

    STR             shift and go to state 186
    ID              shift and go to state 187

    argument                       shift and go to state 185
    arguments                      shift and go to state 224

state 208

    (102) sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .

    ID              reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    CASE            reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FOR             reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    IF              reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FUNC            reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    SWITCH          reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    TYPE            reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    RETURN          reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    VAR             reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FMT             reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    DEFER           reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    DEFAULT         reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    CONST           reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    LEN             reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    INT             reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    FLOAT           reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    $end            reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)
    RCURLY          reduce using rule 102 (sentence -> FMT PERIOD PRINTF LPAREN arguments RPAREN .)


state 209

    (63) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY . elemArray RCURLY
    (64) elemArray -> . number
    (65) elemArray -> . number COMMA elemArray
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    elemArray                      shift and go to state 225
    number                         shift and go to state 226

state 210

    (66) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice . RCURLY

    RCURLY          shift and go to state 227


state 211

    (68) elemSlice -> number .
    (69) elemSlice -> number . COMMA elemSlice

    RCURLY          reduce using rule 68 (elemSlice -> number .)
    COMMA           shift and go to state 228


state 212

    (110) case_statements -> CASE INT TWODOTS . line
    (111) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    line                           shift and go to state 229
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 213

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN . LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LEN             shift and go to state 230


state 214

    (54) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY . statements RCURLY
    (55) statements -> . statement
    (56) statements -> . statement statements
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN

    ID              shift and go to state 143
    FMT             shift and go to state 41

    statements                     shift and go to state 231
    statement                      shift and go to state 142
    sentence                       shift and go to state 144
    functionAppend                 shift and go to state 145

state 215

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID . ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 232


state 216

    (78) function -> FUNC ID LPAREN param_list RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 233
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 217

    (79) function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 234


state 218

    (74) funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 235


state 219

    (76) return_types -> ID COMMA . ID

    ID              shift and go to state 236


state 220

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 237


state 221

    (81) mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 81 (mainFunction -> FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY .)


state 222

    (72) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS . value RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 239
    FLOAT           shift and go to state 91
    STR             shift and go to state 92
    ID              shift and go to state 86

    value                          shift and go to state 238

state 223

    (96) declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .

    ID              reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    CASE            reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    FOR             reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    IF              reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    FUNC            reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    SWITCH          reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    TYPE            reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    RETURN          reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    VAR             reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    FMT             reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    DEFER           reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    DEFAULT         reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    CONST           reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    LEN             reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    INT             reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    FLOAT           reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    $end            reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)
    RCURLY          reduce using rule 96 (declaration -> VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS .)


state 224

    (106) arguments -> argument COMMA arguments .

    RPAREN          reduce using rule 106 (arguments -> argument COMMA arguments .)


state 225

    (63) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray . RCURLY

    RCURLY          shift and go to state 240


state 226

    (64) elemArray -> number .
    (65) elemArray -> number . COMMA elemArray

    RCURLY          reduce using rule 64 (elemArray -> number .)
    COMMA           shift and go to state 241


state 227

    (66) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .

    ID              reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CASE            reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FOR             reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    IF              reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FUNC            reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    SWITCH          reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    TYPE            reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RETURN          reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    VAR             reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FMT             reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFER           reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFAULT         reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CONST           reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    LEN             reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    INT             reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FLOAT           reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    $end            reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RCURLY          reduce using rule 66 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)


state 228

    (69) elemSlice -> number COMMA . elemSlice
    (68) elemSlice -> . number
    (69) elemSlice -> . number COMMA elemSlice
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    number                         shift and go to state 211
    elemSlice                      shift and go to state 242

state 229

    (110) case_statements -> CASE INT TWODOTS line .
    (111) case_statements -> CASE INT TWODOTS line . case_statements
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    FOR             reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    IF              reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    VAR             reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    FMT             reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    CONST           reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    LEN             reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    INT             reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    $end            reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 110 (case_statements -> CASE INT TWODOTS line .)
    CASE            shift and go to state 165
    DEFAULT         shift and go to state 43

  ! CASE            [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 110 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 166

state 230

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN . LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 243


state 231

    (54) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 244


state 232

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID . RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RPAREN          shift and go to state 245


state 233

    (78) function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 246


state 234

    (79) function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 79 (function -> FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY .)


state 235

    (74) funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .

    ID              reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    IF              reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    INT             reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    $end            reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 74 (funcion -> FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY .)


state 236

    (76) return_types -> ID COMMA ID .

    RPAREN          reduce using rule 76 (return_types -> ID COMMA ID .)


state 237

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 247
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 238

    (72) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value . RCURLY

    RCURLY          shift and go to state 248


state 239

    (2) value -> INT .

    RCURLY          reduce using rule 2 (value -> INT .)


state 240

    (63) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .

    ID              reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CASE            reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FOR             reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    IF              reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FUNC            reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    SWITCH          reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    TYPE            reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RETURN          reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    VAR             reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FMT             reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFER           reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFAULT         reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CONST           reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    LEN             reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    INT             reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FLOAT           reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    $end            reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RCURLY          reduce using rule 63 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)


state 241

    (65) elemArray -> number COMMA . elemArray
    (64) elemArray -> . number
    (65) elemArray -> . number COMMA elemArray
    (61) number -> . INT
    (62) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    number                         shift and go to state 226
    elemArray                      shift and go to state 249

state 242

    (69) elemSlice -> number COMMA elemSlice .

    RCURLY          reduce using rule 69 (elemSlice -> number COMMA elemSlice .)


state 243

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN . ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 250


state 244

    (54) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .

    ID              reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CASE            reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FUNC            reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    SWITCH          reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    TYPE            reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    VAR             reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FMT             reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFER           reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CONST           reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    LEN             reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    INT             reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FLOAT           reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    $end            reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 54 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)


state 245

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN . STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 251


state 246

    (78) function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 252


state 247

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 253


state 248

    (72) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .

    ID              reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CASE            reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FOR             reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    IF              reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FUNC            reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    SWITCH          reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    TYPE            reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RETURN          reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    VAR             reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FMT             reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFER           reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFAULT         reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CONST           reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    LEN             reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    INT             reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FLOAT           reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    $end            reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RCURLY          reduce using rule 72 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)


state 249

    (65) elemArray -> number COMMA elemArray .

    RCURLY          reduce using rule 65 (elemArray -> number COMMA elemArray .)


state 250

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID . RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 254


state 251

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK . LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LCURLY          shift and go to state 255


state 252

    (78) function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 256


state 253

    (75) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 75 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)


state 254

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN . DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 257


state 255

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY . RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RETURN          shift and go to state 258


state 256

    (78) function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFER           reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFAULT         reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CONST           reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    LEN             reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 78 (function -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 257

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA . ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 259


state 258

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN . APPEND LPAREN ID COMMA ID RPAREN RCURLY

    APPEND          shift and go to state 260


state 259

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID . PLUS PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 261


state 260

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND . LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 262


state 261

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS . PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 263


state 262

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN . ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 264


state 263

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 265


state 264

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID . COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 266


state 265

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . function
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (28) line -> . list_function
    (29) line -> . emptySlice
    (30) line -> . mainFunction
    (31) line -> . expression
    (32) line -> . statement
    (33) line -> . functionAppend
    (34) line -> . funcion
    (51) stamentFor -> . FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (53) consulta -> . IF expression LCURLY statements RCURLY
    (54) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (73) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (78) function -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (79) function -> . FUNC ID LPAREN param_list RPAREN LCURLY repeatLines RCURLY
    (63) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (66) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (99) mathExpProd -> . mathExp
    (100) mathExpProd -> . mathExp operator mathExpProd
    (52) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (70) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (71) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (72) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (75) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (35) retorno -> . ID
    (36) retorno -> . ID COMMA
    (37) retorno -> . RETURN retorno
    (92) declaration -> . VAR ID ID
    (93) declaration -> . VAR ID ID EQUALSVAR number
    (94) declaration -> . VAR ID ID EQUALSVAR STR
    (95) declaration -> . VAR ID ID EQUALSVAR ID
    (96) declaration -> . VAR ID EQUALSVAR ID LBRACKETS INT RBRACKETS
    (101) sentence -> . FMT PERIOD PRINTLN LPAREN arguments RPAREN
    (102) sentence -> . FMT PERIOD PRINTF LPAREN arguments RPAREN
    (107) return -> . RETURN expression
    (108) return -> . RETURN INT
    (109) return -> . RETURN sentence
    (113) defer_statement -> . DEFER line
    (110) case_statements -> . CASE INT TWODOTS line
    (111) case_statements -> . CASE INT TWODOTS line case_statements
    (112) case_statements -> . DEFAULT TWODOTS line
    (114) constant_declaration -> . CONST variablenum
    (89) list_function -> . ID LPAREN param_list RPAREN
    (90) list_function -> . LEN LPAREN ID RPAREN
    (67) emptySlice -> . ID LBRACKETS RBRACKETS ID
    (81) mainFunction -> . FUNC MAIN LPAREN RPAREN LCURLY repeatLines RCURLY
    (38) expression -> . ID comparator ID
    (39) expression -> . ID comparator INT
    (40) expression -> . ID
    (41) expression -> . list_function comparator INT
    (42) expression -> . list_function comparator ID
    (43) expression -> . ID LBRACKETS ID RBRACKETS MORETHAN ID
    (57) statement -> . ID
    (58) statement -> . sentence
    (59) statement -> . ID EQUALS ID LBRACKETS ID RBRACKETS
    (60) statement -> . functionAppend
    (80) functionAppend -> . ID EQUALSVAR APPEND LPAREN param_list RPAREN
    (74) funcion -> . FUNC ID LPAREN RPAREN ID LCURLY repeatLines RCURLY
    (97) mathExp -> . number
    (98) mathExp -> . number operator number
    (61) number -> . INT
    (62) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 31
    IF              shift and go to state 33
    FUNC            shift and go to state 34
    SWITCH          shift and go to state 37
    TYPE            shift and go to state 38
    RETURN          shift and go to state 35
    VAR             shift and go to state 39
    FMT             shift and go to state 41
    DEFER           shift and go to state 42
    DEFAULT         shift and go to state 43
    CONST           shift and go to state 44
    LEN             shift and go to state 32
    INT             shift and go to state 13
    FLOAT           shift and go to state 45

    repeatLines                    shift and go to state 267
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    function                       shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    list_function                  shift and go to state 24
    emptySlice                     shift and go to state 25
    mainFunction                   shift and go to state 26
    expression                     shift and go to state 27
    statement                      shift and go to state 28
    functionAppend                 shift and go to state 29
    funcion                        shift and go to state 30
    mathExp                        shift and go to state 36
    number                         shift and go to state 40

state 266

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA . ID RPAREN RCURLY

    ID              shift and go to state 268


state 267

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 269


state 268

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID . RPAREN RCURLY

    RPAREN          shift and go to state 270


state 269

    (51) stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .

    ID              reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    IF              reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    LEN             reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    INT             reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    $end            reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 51 (stamentFor -> FOR ID EQUALSVAR INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)


state 270

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN . RCURLY

    RCURLY          shift and go to state 271


state 271

    (73) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .

    ID              reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CASE            reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FOR             reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    IF              reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FUNC            reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    SWITCH          reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    TYPE            reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RETURN          reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    VAR             reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FMT             reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFER           reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFAULT         reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CONST           reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    LEN             reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    INT             reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FLOAT           reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    $end            reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RCURLY          reduce using rule 73 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 40 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 40 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 40 resolved as shift
WARNING: shift/reduce conflict for CASE in state 138 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 138 resolved as shift
WARNING: shift/reduce conflict for CASE in state 229 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 229 resolved as shift
WARNING: reduce/reduce conflict in state 4 resolved using rule (retorno -> ID)
WARNING: rejected rule (expression -> ID) in state 4
WARNING: reduce/reduce conflict in state 4 resolved using rule (retorno -> ID)
WARNING: rejected rule (statement -> ID) in state 4
WARNING: reduce/reduce conflict in state 19 resolved using rule (line -> sentence)
WARNING: rejected rule (statement -> sentence) in state 19
WARNING: reduce/reduce conflict in state 29 resolved using rule (line -> functionAppend)
WARNING: rejected rule (statement -> functionAppend) in state 29
WARNING: reduce/reduce conflict in state 71 resolved using rule (retorno -> ID)
WARNING: rejected rule (expression -> ID) in state 71
WARNING: reduce/reduce conflict in state 88 resolved using rule (value -> INT)
WARNING: rejected rule (line -> ID EQUALSVAR INT) in state 88
WARNING: reduce/reduce conflict in state 138 resolved using rule (line -> CASE INT TWODOTS line)
WARNING: rejected rule (case_statements -> CASE INT TWODOTS line) in state 138
WARNING: Rule (line -> ID EQUALSVAR INT) is never reduced
