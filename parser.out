Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    IMPORT
    MAIN
    NEW
    PACKAGE
    PI
    POW
    PRINT
    WHILE
    XCENTAGE

Grammar

Rule 0     S' -> program
Rule 1     program -> repeatLines
Rule 2     value -> INT
Rule 3     value -> FLOAT
Rule 4     value -> STR
Rule 5     value -> ID
Rule 6     repeatLines -> line
Rule 7     repeatLines -> line repeatLines
Rule 8     line -> ID EQUALSVAR value
Rule 9     line -> stamentFor
Rule 10    line -> consulta
Rule 11    line -> push
Rule 12    line -> funcion
Rule 13    line -> array
Rule 14    line -> slice
Rule 15    line -> mathExpProd
Rule 16    line -> CASE INT TWODOTS line
Rule 17    line -> switch
Rule 18    line -> pila
Rule 19    line -> func_declaration
Rule 20    line -> ID EQUALSVAR INT
Rule 21    line -> retorno
Rule 22    line -> declaration
Rule 23    line -> sentence
Rule 24    line -> return
Rule 25    line -> defer_statement
Rule 26    line -> case_statements
Rule 27    line -> constant_declaration
Rule 28    retorno -> ID
Rule 29    retorno -> ID COMMA
Rule 30    retorno -> RETURN retorno
Rule 31    expression -> ID comparator ID
Rule 32    expression -> ID comparator INT
Rule 33    expression -> ID
Rule 34    comparator -> COMPARE
Rule 35    comparator -> MORETHAN
Rule 36    comparator -> MINUSTHAN
Rule 37    operator -> DIVIDE
Rule 38    operator -> MINUS
Rule 39    operator -> PLUS
Rule 40    operator -> TIMES
Rule 41    stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
Rule 42    switch -> SWITCH ID LCURLY repeatLines RCURLY
Rule 43    consulta -> IF expression LCURLY statements RCURLY
Rule 44    consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
Rule 45    statements -> statement
Rule 46    statements -> statement COMMA statements
Rule 47    statement -> ID
Rule 48    number -> INT
Rule 49    number -> FLOAT
Rule 50    array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
Rule 51    elemArray -> number
Rule 52    elemArray -> number COMMA elemArray
Rule 53    slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
Rule 54    elemSlice -> number
Rule 55    elemSlice -> number COMMA elemSlice
Rule 56    pila -> TYPE STACK LBRACKETS RBRACKETS ID
Rule 57    pila -> TYPE STACK INTERFACE LCURLY RCURLY
Rule 58    pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
Rule 59    push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
Rule 60    funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 61    func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
Rule 62    return_types -> ID COMMA ID
Rule 63    return_types -> ID
Rule 64    funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
Rule 65    param_list -> param
Rule 66    param_list -> param_list COMMA param
Rule 67    param -> value ID
Rule 68    declaration -> VAR ID ID
Rule 69    declaration -> VAR ID ID EQUALSVAR number
Rule 70    declaration -> VAR ID ID EQUALSVAR STR
Rule 71    mathExp -> number
Rule 72    mathExp -> number operator number
Rule 73    mathExpProd -> mathExp
Rule 74    mathExpProd -> mathExp operator mathExpProd
Rule 75    sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN
Rule 76    sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN
Rule 77    return -> RETURN expression
Rule 78    return -> RETURN INT
Rule 79    return -> RETURN sentence
Rule 80    case_statements -> CASE INT TWODOTS line
Rule 81    case_statements -> CASE INT TWODOTS line case_statements
Rule 82    case_statements -> DEFAULT TWODOTS line
Rule 83    defer_statement -> DEFER line
Rule 84    constant_declaration -> CONST variablenum
Rule 85    variablenum -> ID EQUALS number

Terminals, with rules where they appear

APPEND               : 59
CASE                 : 16 80 81
COMMA                : 29 46 52 55 59 59 62 66
COMPARE              : 34
CONST                : 84
DEFAULT              : 82
DEFER                : 83
DIVIDE               : 37
DOTCOMA              : 41 41
ELSE                 : 44
EQUALS               : 41 85
EQUALSVAR            : 8 20 50 53 69 70
FLOAT                : 3 49
FMT                  : 75 76
FOR                  : 41
FUNC                 : 59 60 61 64
ID                   : 5 8 20 28 29 31 31 32 33 41 41 41 41 42 47 50 50 53 53 56 58 59 59 59 59 59 60 60 61 62 62 63 64 64 64 67 68 68 69 69 70 70 85
IF                   : 43 44
IMPORT               : 
INT                  : 2 16 20 32 41 48 50 78 80 81
INTERFACE            : 57
LBRACKETS            : 50 53 56 58
LCURLY               : 41 42 43 44 44 50 53 57 58 59 60 61 64
LEN                  : 41
LPAREN               : 41 59 59 60 61 61 64 75 76
MAIN                 : 
MINUS                : 38
MINUSTHAN            : 36 41
MORETHAN             : 35
NEW                  : 
PACKAGE              : 
PERIOD               : 75 76
PI                   : 
PLUS                 : 39 41 41
POW                  : 
PRINT                : 
PRINTF               : 76
PRINTLN              : 75
PUSH                 : 59
RBRACKETS            : 50 53 56 58
RCURLY               : 41 42 43 44 44 50 53 57 58 59 60 61 64
RETURN               : 30 59 60 64 77 78 79
RPAREN               : 41 59 59 60 61 61 64 75 76
STACK                : 56 57 58 59 59
STR                  : 4 70 75 76
STRUCT               : 58
SWITCH               : 42
TIMES                : 40
TWODOTS              : 16 80 81 82
TYPE                 : 56 57 58
VAR                  : 68 69 70
WHILE                : 
XCENTAGE             : 
error                : 

Nonterminals, with rules where they appear

array                : 13
case_statements      : 26 81
comparator           : 31 32
constant_declaration : 27
consulta             : 10
declaration          : 22
defer_statement      : 25
elemArray            : 50 52
elemSlice            : 53 55
expression           : 43 44 77
func_declaration     : 19
funcion              : 12
line                 : 6 7 16 80 81 82 83
mathExp              : 73 74
mathExpProd          : 15 74
number               : 51 52 54 55 69 71 72 72 85
operator             : 72 74
param                : 65 66
param_list           : 64 66
pila                 : 18
program              : 0
push                 : 11
repeatLines          : 1 7 41 42 60 61 64
retorno              : 21 30
return               : 24
return_types         : 61
sentence             : 23 79
slice                : 14
stamentFor           : 9
statement            : 45 46
statements           : 43 44 44 46
switch               : 17
value                : 8 58 60 67
variablenum          : 84

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    program                        shift and go to state 1
    repeatLines                    shift and go to state 2
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 1

    (0) S' -> program .



state 2

    (1) program -> repeatLines .

    $end            reduce using rule 1 (program -> repeatLines .)


state 3

    (6) repeatLines -> line .
    (7) repeatLines -> line . repeatLines
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

  ! shift/reduce conflict for RETURN resolved as shift
    $end            reduce using rule 6 (repeatLines -> line .)
    RCURLY          reduce using rule 6 (repeatLines -> line .)
    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

  ! RETURN          [ reduce using rule 6 (repeatLines -> line .) ]

    line                           shift and go to state 3
    repeatLines                    shift and go to state 38
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 4

    (8) line -> ID . EQUALSVAR value
    (20) line -> ID . EQUALSVAR INT
    (50) array -> ID . EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> ID . EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (28) retorno -> ID .
    (29) retorno -> ID . COMMA

    EQUALSVAR       shift and go to state 39
    ID              reduce using rule 28 (retorno -> ID .)
    CASE            reduce using rule 28 (retorno -> ID .)
    FOR             reduce using rule 28 (retorno -> ID .)
    IF              reduce using rule 28 (retorno -> ID .)
    FUNC            reduce using rule 28 (retorno -> ID .)
    SWITCH          reduce using rule 28 (retorno -> ID .)
    TYPE            reduce using rule 28 (retorno -> ID .)
    RETURN          reduce using rule 28 (retorno -> ID .)
    VAR             reduce using rule 28 (retorno -> ID .)
    FMT             reduce using rule 28 (retorno -> ID .)
    DEFER           reduce using rule 28 (retorno -> ID .)
    DEFAULT         reduce using rule 28 (retorno -> ID .)
    CONST           reduce using rule 28 (retorno -> ID .)
    INT             reduce using rule 28 (retorno -> ID .)
    FLOAT           reduce using rule 28 (retorno -> ID .)
    $end            reduce using rule 28 (retorno -> ID .)
    RCURLY          reduce using rule 28 (retorno -> ID .)
    COMMA           shift and go to state 40


state 5

    (9) line -> stamentFor .

    ID              reduce using rule 9 (line -> stamentFor .)
    CASE            reduce using rule 9 (line -> stamentFor .)
    FOR             reduce using rule 9 (line -> stamentFor .)
    IF              reduce using rule 9 (line -> stamentFor .)
    FUNC            reduce using rule 9 (line -> stamentFor .)
    SWITCH          reduce using rule 9 (line -> stamentFor .)
    TYPE            reduce using rule 9 (line -> stamentFor .)
    RETURN          reduce using rule 9 (line -> stamentFor .)
    VAR             reduce using rule 9 (line -> stamentFor .)
    FMT             reduce using rule 9 (line -> stamentFor .)
    DEFER           reduce using rule 9 (line -> stamentFor .)
    DEFAULT         reduce using rule 9 (line -> stamentFor .)
    CONST           reduce using rule 9 (line -> stamentFor .)
    INT             reduce using rule 9 (line -> stamentFor .)
    FLOAT           reduce using rule 9 (line -> stamentFor .)
    $end            reduce using rule 9 (line -> stamentFor .)
    RCURLY          reduce using rule 9 (line -> stamentFor .)


state 6

    (10) line -> consulta .

    ID              reduce using rule 10 (line -> consulta .)
    CASE            reduce using rule 10 (line -> consulta .)
    FOR             reduce using rule 10 (line -> consulta .)
    IF              reduce using rule 10 (line -> consulta .)
    FUNC            reduce using rule 10 (line -> consulta .)
    SWITCH          reduce using rule 10 (line -> consulta .)
    TYPE            reduce using rule 10 (line -> consulta .)
    RETURN          reduce using rule 10 (line -> consulta .)
    VAR             reduce using rule 10 (line -> consulta .)
    FMT             reduce using rule 10 (line -> consulta .)
    DEFER           reduce using rule 10 (line -> consulta .)
    DEFAULT         reduce using rule 10 (line -> consulta .)
    CONST           reduce using rule 10 (line -> consulta .)
    INT             reduce using rule 10 (line -> consulta .)
    FLOAT           reduce using rule 10 (line -> consulta .)
    $end            reduce using rule 10 (line -> consulta .)
    RCURLY          reduce using rule 10 (line -> consulta .)


state 7

    (11) line -> push .

    ID              reduce using rule 11 (line -> push .)
    CASE            reduce using rule 11 (line -> push .)
    FOR             reduce using rule 11 (line -> push .)
    IF              reduce using rule 11 (line -> push .)
    FUNC            reduce using rule 11 (line -> push .)
    SWITCH          reduce using rule 11 (line -> push .)
    TYPE            reduce using rule 11 (line -> push .)
    RETURN          reduce using rule 11 (line -> push .)
    VAR             reduce using rule 11 (line -> push .)
    FMT             reduce using rule 11 (line -> push .)
    DEFER           reduce using rule 11 (line -> push .)
    DEFAULT         reduce using rule 11 (line -> push .)
    CONST           reduce using rule 11 (line -> push .)
    INT             reduce using rule 11 (line -> push .)
    FLOAT           reduce using rule 11 (line -> push .)
    $end            reduce using rule 11 (line -> push .)
    RCURLY          reduce using rule 11 (line -> push .)


state 8

    (12) line -> funcion .

    ID              reduce using rule 12 (line -> funcion .)
    CASE            reduce using rule 12 (line -> funcion .)
    FOR             reduce using rule 12 (line -> funcion .)
    IF              reduce using rule 12 (line -> funcion .)
    FUNC            reduce using rule 12 (line -> funcion .)
    SWITCH          reduce using rule 12 (line -> funcion .)
    TYPE            reduce using rule 12 (line -> funcion .)
    RETURN          reduce using rule 12 (line -> funcion .)
    VAR             reduce using rule 12 (line -> funcion .)
    FMT             reduce using rule 12 (line -> funcion .)
    DEFER           reduce using rule 12 (line -> funcion .)
    DEFAULT         reduce using rule 12 (line -> funcion .)
    CONST           reduce using rule 12 (line -> funcion .)
    INT             reduce using rule 12 (line -> funcion .)
    FLOAT           reduce using rule 12 (line -> funcion .)
    $end            reduce using rule 12 (line -> funcion .)
    RCURLY          reduce using rule 12 (line -> funcion .)


state 9

    (13) line -> array .

    ID              reduce using rule 13 (line -> array .)
    CASE            reduce using rule 13 (line -> array .)
    FOR             reduce using rule 13 (line -> array .)
    IF              reduce using rule 13 (line -> array .)
    FUNC            reduce using rule 13 (line -> array .)
    SWITCH          reduce using rule 13 (line -> array .)
    TYPE            reduce using rule 13 (line -> array .)
    RETURN          reduce using rule 13 (line -> array .)
    VAR             reduce using rule 13 (line -> array .)
    FMT             reduce using rule 13 (line -> array .)
    DEFER           reduce using rule 13 (line -> array .)
    DEFAULT         reduce using rule 13 (line -> array .)
    CONST           reduce using rule 13 (line -> array .)
    INT             reduce using rule 13 (line -> array .)
    FLOAT           reduce using rule 13 (line -> array .)
    $end            reduce using rule 13 (line -> array .)
    RCURLY          reduce using rule 13 (line -> array .)


state 10

    (14) line -> slice .

    ID              reduce using rule 14 (line -> slice .)
    CASE            reduce using rule 14 (line -> slice .)
    FOR             reduce using rule 14 (line -> slice .)
    IF              reduce using rule 14 (line -> slice .)
    FUNC            reduce using rule 14 (line -> slice .)
    SWITCH          reduce using rule 14 (line -> slice .)
    TYPE            reduce using rule 14 (line -> slice .)
    RETURN          reduce using rule 14 (line -> slice .)
    VAR             reduce using rule 14 (line -> slice .)
    FMT             reduce using rule 14 (line -> slice .)
    DEFER           reduce using rule 14 (line -> slice .)
    DEFAULT         reduce using rule 14 (line -> slice .)
    CONST           reduce using rule 14 (line -> slice .)
    INT             reduce using rule 14 (line -> slice .)
    FLOAT           reduce using rule 14 (line -> slice .)
    $end            reduce using rule 14 (line -> slice .)
    RCURLY          reduce using rule 14 (line -> slice .)


state 11

    (15) line -> mathExpProd .

    ID              reduce using rule 15 (line -> mathExpProd .)
    CASE            reduce using rule 15 (line -> mathExpProd .)
    FOR             reduce using rule 15 (line -> mathExpProd .)
    IF              reduce using rule 15 (line -> mathExpProd .)
    FUNC            reduce using rule 15 (line -> mathExpProd .)
    SWITCH          reduce using rule 15 (line -> mathExpProd .)
    TYPE            reduce using rule 15 (line -> mathExpProd .)
    RETURN          reduce using rule 15 (line -> mathExpProd .)
    VAR             reduce using rule 15 (line -> mathExpProd .)
    FMT             reduce using rule 15 (line -> mathExpProd .)
    DEFER           reduce using rule 15 (line -> mathExpProd .)
    DEFAULT         reduce using rule 15 (line -> mathExpProd .)
    CONST           reduce using rule 15 (line -> mathExpProd .)
    INT             reduce using rule 15 (line -> mathExpProd .)
    FLOAT           reduce using rule 15 (line -> mathExpProd .)
    $end            reduce using rule 15 (line -> mathExpProd .)
    RCURLY          reduce using rule 15 (line -> mathExpProd .)


state 12

    (16) line -> CASE . INT TWODOTS line
    (80) case_statements -> CASE . INT TWODOTS line
    (81) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 41


state 13

    (48) number -> INT .

    DIVIDE          reduce using rule 48 (number -> INT .)
    MINUS           reduce using rule 48 (number -> INT .)
    PLUS            reduce using rule 48 (number -> INT .)
    TIMES           reduce using rule 48 (number -> INT .)
    ID              reduce using rule 48 (number -> INT .)
    CASE            reduce using rule 48 (number -> INT .)
    FOR             reduce using rule 48 (number -> INT .)
    IF              reduce using rule 48 (number -> INT .)
    FUNC            reduce using rule 48 (number -> INT .)
    SWITCH          reduce using rule 48 (number -> INT .)
    TYPE            reduce using rule 48 (number -> INT .)
    RETURN          reduce using rule 48 (number -> INT .)
    VAR             reduce using rule 48 (number -> INT .)
    FMT             reduce using rule 48 (number -> INT .)
    DEFER           reduce using rule 48 (number -> INT .)
    DEFAULT         reduce using rule 48 (number -> INT .)
    CONST           reduce using rule 48 (number -> INT .)
    INT             reduce using rule 48 (number -> INT .)
    FLOAT           reduce using rule 48 (number -> INT .)
    $end            reduce using rule 48 (number -> INT .)
    RCURLY          reduce using rule 48 (number -> INT .)
    COMMA           reduce using rule 48 (number -> INT .)


state 14

    (17) line -> switch .

    ID              reduce using rule 17 (line -> switch .)
    CASE            reduce using rule 17 (line -> switch .)
    FOR             reduce using rule 17 (line -> switch .)
    IF              reduce using rule 17 (line -> switch .)
    FUNC            reduce using rule 17 (line -> switch .)
    SWITCH          reduce using rule 17 (line -> switch .)
    TYPE            reduce using rule 17 (line -> switch .)
    RETURN          reduce using rule 17 (line -> switch .)
    VAR             reduce using rule 17 (line -> switch .)
    FMT             reduce using rule 17 (line -> switch .)
    DEFER           reduce using rule 17 (line -> switch .)
    DEFAULT         reduce using rule 17 (line -> switch .)
    CONST           reduce using rule 17 (line -> switch .)
    INT             reduce using rule 17 (line -> switch .)
    FLOAT           reduce using rule 17 (line -> switch .)
    $end            reduce using rule 17 (line -> switch .)
    RCURLY          reduce using rule 17 (line -> switch .)


state 15

    (18) line -> pila .

    ID              reduce using rule 18 (line -> pila .)
    CASE            reduce using rule 18 (line -> pila .)
    FOR             reduce using rule 18 (line -> pila .)
    IF              reduce using rule 18 (line -> pila .)
    FUNC            reduce using rule 18 (line -> pila .)
    SWITCH          reduce using rule 18 (line -> pila .)
    TYPE            reduce using rule 18 (line -> pila .)
    RETURN          reduce using rule 18 (line -> pila .)
    VAR             reduce using rule 18 (line -> pila .)
    FMT             reduce using rule 18 (line -> pila .)
    DEFER           reduce using rule 18 (line -> pila .)
    DEFAULT         reduce using rule 18 (line -> pila .)
    CONST           reduce using rule 18 (line -> pila .)
    INT             reduce using rule 18 (line -> pila .)
    FLOAT           reduce using rule 18 (line -> pila .)
    $end            reduce using rule 18 (line -> pila .)
    RCURLY          reduce using rule 18 (line -> pila .)


state 16

    (19) line -> func_declaration .

    ID              reduce using rule 19 (line -> func_declaration .)
    CASE            reduce using rule 19 (line -> func_declaration .)
    FOR             reduce using rule 19 (line -> func_declaration .)
    IF              reduce using rule 19 (line -> func_declaration .)
    FUNC            reduce using rule 19 (line -> func_declaration .)
    SWITCH          reduce using rule 19 (line -> func_declaration .)
    TYPE            reduce using rule 19 (line -> func_declaration .)
    RETURN          reduce using rule 19 (line -> func_declaration .)
    VAR             reduce using rule 19 (line -> func_declaration .)
    FMT             reduce using rule 19 (line -> func_declaration .)
    DEFER           reduce using rule 19 (line -> func_declaration .)
    DEFAULT         reduce using rule 19 (line -> func_declaration .)
    CONST           reduce using rule 19 (line -> func_declaration .)
    INT             reduce using rule 19 (line -> func_declaration .)
    FLOAT           reduce using rule 19 (line -> func_declaration .)
    $end            reduce using rule 19 (line -> func_declaration .)
    RCURLY          reduce using rule 19 (line -> func_declaration .)


state 17

    (21) line -> retorno .

    ID              reduce using rule 21 (line -> retorno .)
    CASE            reduce using rule 21 (line -> retorno .)
    FOR             reduce using rule 21 (line -> retorno .)
    IF              reduce using rule 21 (line -> retorno .)
    FUNC            reduce using rule 21 (line -> retorno .)
    SWITCH          reduce using rule 21 (line -> retorno .)
    TYPE            reduce using rule 21 (line -> retorno .)
    RETURN          reduce using rule 21 (line -> retorno .)
    VAR             reduce using rule 21 (line -> retorno .)
    FMT             reduce using rule 21 (line -> retorno .)
    DEFER           reduce using rule 21 (line -> retorno .)
    DEFAULT         reduce using rule 21 (line -> retorno .)
    CONST           reduce using rule 21 (line -> retorno .)
    INT             reduce using rule 21 (line -> retorno .)
    FLOAT           reduce using rule 21 (line -> retorno .)
    $end            reduce using rule 21 (line -> retorno .)
    RCURLY          reduce using rule 21 (line -> retorno .)


state 18

    (22) line -> declaration .

    ID              reduce using rule 22 (line -> declaration .)
    CASE            reduce using rule 22 (line -> declaration .)
    FOR             reduce using rule 22 (line -> declaration .)
    IF              reduce using rule 22 (line -> declaration .)
    FUNC            reduce using rule 22 (line -> declaration .)
    SWITCH          reduce using rule 22 (line -> declaration .)
    TYPE            reduce using rule 22 (line -> declaration .)
    RETURN          reduce using rule 22 (line -> declaration .)
    VAR             reduce using rule 22 (line -> declaration .)
    FMT             reduce using rule 22 (line -> declaration .)
    DEFER           reduce using rule 22 (line -> declaration .)
    DEFAULT         reduce using rule 22 (line -> declaration .)
    CONST           reduce using rule 22 (line -> declaration .)
    INT             reduce using rule 22 (line -> declaration .)
    FLOAT           reduce using rule 22 (line -> declaration .)
    $end            reduce using rule 22 (line -> declaration .)
    RCURLY          reduce using rule 22 (line -> declaration .)


state 19

    (23) line -> sentence .

    ID              reduce using rule 23 (line -> sentence .)
    CASE            reduce using rule 23 (line -> sentence .)
    FOR             reduce using rule 23 (line -> sentence .)
    IF              reduce using rule 23 (line -> sentence .)
    FUNC            reduce using rule 23 (line -> sentence .)
    SWITCH          reduce using rule 23 (line -> sentence .)
    TYPE            reduce using rule 23 (line -> sentence .)
    RETURN          reduce using rule 23 (line -> sentence .)
    VAR             reduce using rule 23 (line -> sentence .)
    FMT             reduce using rule 23 (line -> sentence .)
    DEFER           reduce using rule 23 (line -> sentence .)
    DEFAULT         reduce using rule 23 (line -> sentence .)
    CONST           reduce using rule 23 (line -> sentence .)
    INT             reduce using rule 23 (line -> sentence .)
    FLOAT           reduce using rule 23 (line -> sentence .)
    $end            reduce using rule 23 (line -> sentence .)
    RCURLY          reduce using rule 23 (line -> sentence .)


state 20

    (24) line -> return .

    ID              reduce using rule 24 (line -> return .)
    CASE            reduce using rule 24 (line -> return .)
    FOR             reduce using rule 24 (line -> return .)
    IF              reduce using rule 24 (line -> return .)
    FUNC            reduce using rule 24 (line -> return .)
    SWITCH          reduce using rule 24 (line -> return .)
    TYPE            reduce using rule 24 (line -> return .)
    RETURN          reduce using rule 24 (line -> return .)
    VAR             reduce using rule 24 (line -> return .)
    FMT             reduce using rule 24 (line -> return .)
    DEFER           reduce using rule 24 (line -> return .)
    DEFAULT         reduce using rule 24 (line -> return .)
    CONST           reduce using rule 24 (line -> return .)
    INT             reduce using rule 24 (line -> return .)
    FLOAT           reduce using rule 24 (line -> return .)
    $end            reduce using rule 24 (line -> return .)
    RCURLY          reduce using rule 24 (line -> return .)


state 21

    (25) line -> defer_statement .

    ID              reduce using rule 25 (line -> defer_statement .)
    CASE            reduce using rule 25 (line -> defer_statement .)
    FOR             reduce using rule 25 (line -> defer_statement .)
    IF              reduce using rule 25 (line -> defer_statement .)
    FUNC            reduce using rule 25 (line -> defer_statement .)
    SWITCH          reduce using rule 25 (line -> defer_statement .)
    TYPE            reduce using rule 25 (line -> defer_statement .)
    RETURN          reduce using rule 25 (line -> defer_statement .)
    VAR             reduce using rule 25 (line -> defer_statement .)
    FMT             reduce using rule 25 (line -> defer_statement .)
    DEFER           reduce using rule 25 (line -> defer_statement .)
    DEFAULT         reduce using rule 25 (line -> defer_statement .)
    CONST           reduce using rule 25 (line -> defer_statement .)
    INT             reduce using rule 25 (line -> defer_statement .)
    FLOAT           reduce using rule 25 (line -> defer_statement .)
    $end            reduce using rule 25 (line -> defer_statement .)
    RCURLY          reduce using rule 25 (line -> defer_statement .)


state 22

    (26) line -> case_statements .

    ID              reduce using rule 26 (line -> case_statements .)
    CASE            reduce using rule 26 (line -> case_statements .)
    FOR             reduce using rule 26 (line -> case_statements .)
    IF              reduce using rule 26 (line -> case_statements .)
    FUNC            reduce using rule 26 (line -> case_statements .)
    SWITCH          reduce using rule 26 (line -> case_statements .)
    TYPE            reduce using rule 26 (line -> case_statements .)
    RETURN          reduce using rule 26 (line -> case_statements .)
    VAR             reduce using rule 26 (line -> case_statements .)
    FMT             reduce using rule 26 (line -> case_statements .)
    DEFER           reduce using rule 26 (line -> case_statements .)
    DEFAULT         reduce using rule 26 (line -> case_statements .)
    CONST           reduce using rule 26 (line -> case_statements .)
    INT             reduce using rule 26 (line -> case_statements .)
    FLOAT           reduce using rule 26 (line -> case_statements .)
    $end            reduce using rule 26 (line -> case_statements .)
    RCURLY          reduce using rule 26 (line -> case_statements .)


state 23

    (27) line -> constant_declaration .

    ID              reduce using rule 27 (line -> constant_declaration .)
    CASE            reduce using rule 27 (line -> constant_declaration .)
    FOR             reduce using rule 27 (line -> constant_declaration .)
    IF              reduce using rule 27 (line -> constant_declaration .)
    FUNC            reduce using rule 27 (line -> constant_declaration .)
    SWITCH          reduce using rule 27 (line -> constant_declaration .)
    TYPE            reduce using rule 27 (line -> constant_declaration .)
    RETURN          reduce using rule 27 (line -> constant_declaration .)
    VAR             reduce using rule 27 (line -> constant_declaration .)
    FMT             reduce using rule 27 (line -> constant_declaration .)
    DEFER           reduce using rule 27 (line -> constant_declaration .)
    DEFAULT         reduce using rule 27 (line -> constant_declaration .)
    CONST           reduce using rule 27 (line -> constant_declaration .)
    INT             reduce using rule 27 (line -> constant_declaration .)
    FLOAT           reduce using rule 27 (line -> constant_declaration .)
    $end            reduce using rule 27 (line -> constant_declaration .)
    RCURLY          reduce using rule 27 (line -> constant_declaration .)


state 24

    (41) stamentFor -> FOR . ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 42


state 25

    (43) consulta -> IF . expression LCURLY statements RCURLY
    (44) consulta -> IF . expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (31) expression -> . ID comparator ID
    (32) expression -> . ID comparator INT
    (33) expression -> . ID

    ID              shift and go to state 44

    expression                     shift and go to state 43

state 26

    (59) push -> FUNC . PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> FUNC . value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> FUNC . ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) func_declaration -> FUNC . ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    PUSH            shift and go to state 45
    ID              shift and go to state 46
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STR             shift and go to state 50

    value                          shift and go to state 47

state 27

    (30) retorno -> RETURN . retorno
    (77) return -> RETURN . expression
    (78) return -> RETURN . INT
    (79) return -> RETURN . sentence
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (31) expression -> . ID comparator ID
    (32) expression -> . ID comparator INT
    (33) expression -> . ID
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN

    INT             shift and go to state 54
    ID              shift and go to state 56
    RETURN          shift and go to state 51
    FMT             shift and go to state 33

    retorno                        shift and go to state 52
    expression                     shift and go to state 53
    sentence                       shift and go to state 55

state 28

    (73) mathExpProd -> mathExp .
    (74) mathExpProd -> mathExp . operator mathExpProd
    (37) operator -> . DIVIDE
    (38) operator -> . MINUS
    (39) operator -> . PLUS
    (40) operator -> . TIMES

    ID              reduce using rule 73 (mathExpProd -> mathExp .)
    CASE            reduce using rule 73 (mathExpProd -> mathExp .)
    FOR             reduce using rule 73 (mathExpProd -> mathExp .)
    IF              reduce using rule 73 (mathExpProd -> mathExp .)
    FUNC            reduce using rule 73 (mathExpProd -> mathExp .)
    SWITCH          reduce using rule 73 (mathExpProd -> mathExp .)
    TYPE            reduce using rule 73 (mathExpProd -> mathExp .)
    RETURN          reduce using rule 73 (mathExpProd -> mathExp .)
    VAR             reduce using rule 73 (mathExpProd -> mathExp .)
    FMT             reduce using rule 73 (mathExpProd -> mathExp .)
    DEFER           reduce using rule 73 (mathExpProd -> mathExp .)
    DEFAULT         reduce using rule 73 (mathExpProd -> mathExp .)
    CONST           reduce using rule 73 (mathExpProd -> mathExp .)
    INT             reduce using rule 73 (mathExpProd -> mathExp .)
    FLOAT           reduce using rule 73 (mathExpProd -> mathExp .)
    $end            reduce using rule 73 (mathExpProd -> mathExp .)
    RCURLY          reduce using rule 73 (mathExpProd -> mathExp .)
    DIVIDE          shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    TIMES           shift and go to state 61

    operator                       shift and go to state 57

state 29

    (42) switch -> SWITCH . ID LCURLY repeatLines RCURLY

    ID              shift and go to state 62


state 30

    (56) pila -> TYPE . STACK LBRACKETS RBRACKETS ID
    (57) pila -> TYPE . STACK INTERFACE LCURLY RCURLY
    (58) pila -> TYPE . STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    STACK           shift and go to state 63


state 31

    (68) declaration -> VAR . ID ID
    (69) declaration -> VAR . ID ID EQUALSVAR number
    (70) declaration -> VAR . ID ID EQUALSVAR STR

    ID              shift and go to state 64


state 32

    (71) mathExp -> number .
    (72) mathExp -> number . operator number
    (37) operator -> . DIVIDE
    (38) operator -> . MINUS
    (39) operator -> . PLUS
    (40) operator -> . TIMES

  ! shift/reduce conflict for DIVIDE resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for TIMES resolved as shift
    ID              reduce using rule 71 (mathExp -> number .)
    CASE            reduce using rule 71 (mathExp -> number .)
    FOR             reduce using rule 71 (mathExp -> number .)
    IF              reduce using rule 71 (mathExp -> number .)
    FUNC            reduce using rule 71 (mathExp -> number .)
    SWITCH          reduce using rule 71 (mathExp -> number .)
    TYPE            reduce using rule 71 (mathExp -> number .)
    RETURN          reduce using rule 71 (mathExp -> number .)
    VAR             reduce using rule 71 (mathExp -> number .)
    FMT             reduce using rule 71 (mathExp -> number .)
    DEFER           reduce using rule 71 (mathExp -> number .)
    DEFAULT         reduce using rule 71 (mathExp -> number .)
    CONST           reduce using rule 71 (mathExp -> number .)
    INT             reduce using rule 71 (mathExp -> number .)
    FLOAT           reduce using rule 71 (mathExp -> number .)
    $end            reduce using rule 71 (mathExp -> number .)
    RCURLY          reduce using rule 71 (mathExp -> number .)
    DIVIDE          shift and go to state 58
    MINUS           shift and go to state 59
    PLUS            shift and go to state 60
    TIMES           shift and go to state 61

  ! DIVIDE          [ reduce using rule 71 (mathExp -> number .) ]
  ! MINUS           [ reduce using rule 71 (mathExp -> number .) ]
  ! PLUS            [ reduce using rule 71 (mathExp -> number .) ]
  ! TIMES           [ reduce using rule 71 (mathExp -> number .) ]

    operator                       shift and go to state 65

state 33

    (75) sentence -> FMT . PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> FMT . PERIOD PRINTF LPAREN STR RPAREN

    PERIOD          shift and go to state 66


state 34

    (83) defer_statement -> DEFER . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    line                           shift and go to state 67
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 35

    (82) case_statements -> DEFAULT . TWODOTS line

    TWODOTS         shift and go to state 68


state 36

    (84) constant_declaration -> CONST . variablenum
    (85) variablenum -> . ID EQUALS number

    ID              shift and go to state 70

    variablenum                    shift and go to state 69

state 37

    (49) number -> FLOAT .

    DIVIDE          reduce using rule 49 (number -> FLOAT .)
    MINUS           reduce using rule 49 (number -> FLOAT .)
    PLUS            reduce using rule 49 (number -> FLOAT .)
    TIMES           reduce using rule 49 (number -> FLOAT .)
    ID              reduce using rule 49 (number -> FLOAT .)
    CASE            reduce using rule 49 (number -> FLOAT .)
    FOR             reduce using rule 49 (number -> FLOAT .)
    IF              reduce using rule 49 (number -> FLOAT .)
    FUNC            reduce using rule 49 (number -> FLOAT .)
    SWITCH          reduce using rule 49 (number -> FLOAT .)
    TYPE            reduce using rule 49 (number -> FLOAT .)
    RETURN          reduce using rule 49 (number -> FLOAT .)
    VAR             reduce using rule 49 (number -> FLOAT .)
    FMT             reduce using rule 49 (number -> FLOAT .)
    DEFER           reduce using rule 49 (number -> FLOAT .)
    DEFAULT         reduce using rule 49 (number -> FLOAT .)
    CONST           reduce using rule 49 (number -> FLOAT .)
    INT             reduce using rule 49 (number -> FLOAT .)
    FLOAT           reduce using rule 49 (number -> FLOAT .)
    $end            reduce using rule 49 (number -> FLOAT .)
    RCURLY          reduce using rule 49 (number -> FLOAT .)
    COMMA           reduce using rule 49 (number -> FLOAT .)


state 38

    (7) repeatLines -> line repeatLines .

    $end            reduce using rule 7 (repeatLines -> line repeatLines .)
    RCURLY          reduce using rule 7 (repeatLines -> line repeatLines .)
    RETURN          reduce using rule 7 (repeatLines -> line repeatLines .)


state 39

    (8) line -> ID EQUALSVAR . value
    (20) line -> ID EQUALSVAR . INT
    (50) array -> ID EQUALSVAR . LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> ID EQUALSVAR . LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 73
    LBRACKETS       shift and go to state 74
    FLOAT           shift and go to state 49
    STR             shift and go to state 50
    ID              shift and go to state 71

    value                          shift and go to state 72

state 40

    (29) retorno -> ID COMMA .

    ID              reduce using rule 29 (retorno -> ID COMMA .)
    CASE            reduce using rule 29 (retorno -> ID COMMA .)
    FOR             reduce using rule 29 (retorno -> ID COMMA .)
    IF              reduce using rule 29 (retorno -> ID COMMA .)
    FUNC            reduce using rule 29 (retorno -> ID COMMA .)
    SWITCH          reduce using rule 29 (retorno -> ID COMMA .)
    TYPE            reduce using rule 29 (retorno -> ID COMMA .)
    RETURN          reduce using rule 29 (retorno -> ID COMMA .)
    VAR             reduce using rule 29 (retorno -> ID COMMA .)
    FMT             reduce using rule 29 (retorno -> ID COMMA .)
    DEFER           reduce using rule 29 (retorno -> ID COMMA .)
    DEFAULT         reduce using rule 29 (retorno -> ID COMMA .)
    CONST           reduce using rule 29 (retorno -> ID COMMA .)
    INT             reduce using rule 29 (retorno -> ID COMMA .)
    FLOAT           reduce using rule 29 (retorno -> ID COMMA .)
    $end            reduce using rule 29 (retorno -> ID COMMA .)
    RCURLY          reduce using rule 29 (retorno -> ID COMMA .)


state 41

    (16) line -> CASE INT . TWODOTS line
    (80) case_statements -> CASE INT . TWODOTS line
    (81) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 75


state 42

    (41) stamentFor -> FOR ID . EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    EQUALS          shift and go to state 76


state 43

    (43) consulta -> IF expression . LCURLY statements RCURLY
    (44) consulta -> IF expression . LCURLY statements RCURLY ELSE LCURLY statements RCURLY

    LCURLY          shift and go to state 77


state 44

    (31) expression -> ID . comparator ID
    (32) expression -> ID . comparator INT
    (33) expression -> ID .
    (34) comparator -> . COMPARE
    (35) comparator -> . MORETHAN
    (36) comparator -> . MINUSTHAN

    LCURLY          reduce using rule 33 (expression -> ID .)
    COMPARE         shift and go to state 79
    MORETHAN        shift and go to state 80
    MINUSTHAN       shift and go to state 81

    comparator                     shift and go to state 78

state 45

    (59) push -> FUNC PUSH . LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 82


state 46

    (64) funcion -> FUNC ID . LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) func_declaration -> FUNC ID . LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (5) value -> ID .

  ! shift/reduce conflict for LPAREN resolved as shift
    LPAREN          shift and go to state 83

  ! LPAREN          [ reduce using rule 5 (value -> ID .) ]


state 47

    (60) funcion -> FUNC value . LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    LPAREN          shift and go to state 84


state 48

    (2) value -> INT .

    LPAREN          reduce using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)


state 49

    (3) value -> FLOAT .

    LPAREN          reduce using rule 3 (value -> FLOAT .)
    ID              reduce using rule 3 (value -> FLOAT .)
    CASE            reduce using rule 3 (value -> FLOAT .)
    FOR             reduce using rule 3 (value -> FLOAT .)
    IF              reduce using rule 3 (value -> FLOAT .)
    FUNC            reduce using rule 3 (value -> FLOAT .)
    SWITCH          reduce using rule 3 (value -> FLOAT .)
    TYPE            reduce using rule 3 (value -> FLOAT .)
    RETURN          reduce using rule 3 (value -> FLOAT .)
    VAR             reduce using rule 3 (value -> FLOAT .)
    FMT             reduce using rule 3 (value -> FLOAT .)
    DEFER           reduce using rule 3 (value -> FLOAT .)
    DEFAULT         reduce using rule 3 (value -> FLOAT .)
    CONST           reduce using rule 3 (value -> FLOAT .)
    INT             reduce using rule 3 (value -> FLOAT .)
    FLOAT           reduce using rule 3 (value -> FLOAT .)
    $end            reduce using rule 3 (value -> FLOAT .)
    RCURLY          reduce using rule 3 (value -> FLOAT .)


state 50

    (4) value -> STR .

    LPAREN          reduce using rule 4 (value -> STR .)
    ID              reduce using rule 4 (value -> STR .)
    CASE            reduce using rule 4 (value -> STR .)
    FOR             reduce using rule 4 (value -> STR .)
    IF              reduce using rule 4 (value -> STR .)
    FUNC            reduce using rule 4 (value -> STR .)
    SWITCH          reduce using rule 4 (value -> STR .)
    TYPE            reduce using rule 4 (value -> STR .)
    RETURN          reduce using rule 4 (value -> STR .)
    VAR             reduce using rule 4 (value -> STR .)
    FMT             reduce using rule 4 (value -> STR .)
    DEFER           reduce using rule 4 (value -> STR .)
    DEFAULT         reduce using rule 4 (value -> STR .)
    CONST           reduce using rule 4 (value -> STR .)
    INT             reduce using rule 4 (value -> STR .)
    FLOAT           reduce using rule 4 (value -> STR .)
    $end            reduce using rule 4 (value -> STR .)
    RCURLY          reduce using rule 4 (value -> STR .)


state 51

    (30) retorno -> RETURN . retorno
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno

    ID              shift and go to state 85
    RETURN          shift and go to state 51

    retorno                        shift and go to state 52

state 52

    (30) retorno -> RETURN retorno .

    ID              reduce using rule 30 (retorno -> RETURN retorno .)
    CASE            reduce using rule 30 (retorno -> RETURN retorno .)
    FOR             reduce using rule 30 (retorno -> RETURN retorno .)
    IF              reduce using rule 30 (retorno -> RETURN retorno .)
    FUNC            reduce using rule 30 (retorno -> RETURN retorno .)
    SWITCH          reduce using rule 30 (retorno -> RETURN retorno .)
    TYPE            reduce using rule 30 (retorno -> RETURN retorno .)
    RETURN          reduce using rule 30 (retorno -> RETURN retorno .)
    VAR             reduce using rule 30 (retorno -> RETURN retorno .)
    FMT             reduce using rule 30 (retorno -> RETURN retorno .)
    DEFER           reduce using rule 30 (retorno -> RETURN retorno .)
    DEFAULT         reduce using rule 30 (retorno -> RETURN retorno .)
    CONST           reduce using rule 30 (retorno -> RETURN retorno .)
    INT             reduce using rule 30 (retorno -> RETURN retorno .)
    FLOAT           reduce using rule 30 (retorno -> RETURN retorno .)
    $end            reduce using rule 30 (retorno -> RETURN retorno .)
    RCURLY          reduce using rule 30 (retorno -> RETURN retorno .)


state 53

    (77) return -> RETURN expression .

    ID              reduce using rule 77 (return -> RETURN expression .)
    CASE            reduce using rule 77 (return -> RETURN expression .)
    FOR             reduce using rule 77 (return -> RETURN expression .)
    IF              reduce using rule 77 (return -> RETURN expression .)
    FUNC            reduce using rule 77 (return -> RETURN expression .)
    SWITCH          reduce using rule 77 (return -> RETURN expression .)
    TYPE            reduce using rule 77 (return -> RETURN expression .)
    RETURN          reduce using rule 77 (return -> RETURN expression .)
    VAR             reduce using rule 77 (return -> RETURN expression .)
    FMT             reduce using rule 77 (return -> RETURN expression .)
    DEFER           reduce using rule 77 (return -> RETURN expression .)
    DEFAULT         reduce using rule 77 (return -> RETURN expression .)
    CONST           reduce using rule 77 (return -> RETURN expression .)
    INT             reduce using rule 77 (return -> RETURN expression .)
    FLOAT           reduce using rule 77 (return -> RETURN expression .)
    $end            reduce using rule 77 (return -> RETURN expression .)
    RCURLY          reduce using rule 77 (return -> RETURN expression .)


state 54

    (78) return -> RETURN INT .

    ID              reduce using rule 78 (return -> RETURN INT .)
    CASE            reduce using rule 78 (return -> RETURN INT .)
    FOR             reduce using rule 78 (return -> RETURN INT .)
    IF              reduce using rule 78 (return -> RETURN INT .)
    FUNC            reduce using rule 78 (return -> RETURN INT .)
    SWITCH          reduce using rule 78 (return -> RETURN INT .)
    TYPE            reduce using rule 78 (return -> RETURN INT .)
    RETURN          reduce using rule 78 (return -> RETURN INT .)
    VAR             reduce using rule 78 (return -> RETURN INT .)
    FMT             reduce using rule 78 (return -> RETURN INT .)
    DEFER           reduce using rule 78 (return -> RETURN INT .)
    DEFAULT         reduce using rule 78 (return -> RETURN INT .)
    CONST           reduce using rule 78 (return -> RETURN INT .)
    INT             reduce using rule 78 (return -> RETURN INT .)
    FLOAT           reduce using rule 78 (return -> RETURN INT .)
    $end            reduce using rule 78 (return -> RETURN INT .)
    RCURLY          reduce using rule 78 (return -> RETURN INT .)


state 55

    (79) return -> RETURN sentence .

    ID              reduce using rule 79 (return -> RETURN sentence .)
    CASE            reduce using rule 79 (return -> RETURN sentence .)
    FOR             reduce using rule 79 (return -> RETURN sentence .)
    IF              reduce using rule 79 (return -> RETURN sentence .)
    FUNC            reduce using rule 79 (return -> RETURN sentence .)
    SWITCH          reduce using rule 79 (return -> RETURN sentence .)
    TYPE            reduce using rule 79 (return -> RETURN sentence .)
    RETURN          reduce using rule 79 (return -> RETURN sentence .)
    VAR             reduce using rule 79 (return -> RETURN sentence .)
    FMT             reduce using rule 79 (return -> RETURN sentence .)
    DEFER           reduce using rule 79 (return -> RETURN sentence .)
    DEFAULT         reduce using rule 79 (return -> RETURN sentence .)
    CONST           reduce using rule 79 (return -> RETURN sentence .)
    INT             reduce using rule 79 (return -> RETURN sentence .)
    FLOAT           reduce using rule 79 (return -> RETURN sentence .)
    $end            reduce using rule 79 (return -> RETURN sentence .)
    RCURLY          reduce using rule 79 (return -> RETURN sentence .)


state 56

    (28) retorno -> ID .
    (29) retorno -> ID . COMMA
    (31) expression -> ID . comparator ID
    (32) expression -> ID . comparator INT
    (33) expression -> ID .
    (34) comparator -> . COMPARE
    (35) comparator -> . MORETHAN
    (36) comparator -> . MINUSTHAN

  ! reduce/reduce conflict for ID resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for CASE resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for FOR resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for IF resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for FUNC resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for SWITCH resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for TYPE resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for RETURN resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for VAR resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for FMT resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for DEFER resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for CONST resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for INT resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for FLOAT resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for $end resolved using rule 28 (retorno -> ID .)
  ! reduce/reduce conflict for RCURLY resolved using rule 28 (retorno -> ID .)
    ID              reduce using rule 28 (retorno -> ID .)
    CASE            reduce using rule 28 (retorno -> ID .)
    FOR             reduce using rule 28 (retorno -> ID .)
    IF              reduce using rule 28 (retorno -> ID .)
    FUNC            reduce using rule 28 (retorno -> ID .)
    SWITCH          reduce using rule 28 (retorno -> ID .)
    TYPE            reduce using rule 28 (retorno -> ID .)
    RETURN          reduce using rule 28 (retorno -> ID .)
    VAR             reduce using rule 28 (retorno -> ID .)
    FMT             reduce using rule 28 (retorno -> ID .)
    DEFER           reduce using rule 28 (retorno -> ID .)
    DEFAULT         reduce using rule 28 (retorno -> ID .)
    CONST           reduce using rule 28 (retorno -> ID .)
    INT             reduce using rule 28 (retorno -> ID .)
    FLOAT           reduce using rule 28 (retorno -> ID .)
    $end            reduce using rule 28 (retorno -> ID .)
    RCURLY          reduce using rule 28 (retorno -> ID .)
    COMMA           shift and go to state 40
    COMPARE         shift and go to state 79
    MORETHAN        shift and go to state 80
    MINUSTHAN       shift and go to state 81

  ! ID              [ reduce using rule 33 (expression -> ID .) ]
  ! CASE            [ reduce using rule 33 (expression -> ID .) ]
  ! FOR             [ reduce using rule 33 (expression -> ID .) ]
  ! IF              [ reduce using rule 33 (expression -> ID .) ]
  ! FUNC            [ reduce using rule 33 (expression -> ID .) ]
  ! SWITCH          [ reduce using rule 33 (expression -> ID .) ]
  ! TYPE            [ reduce using rule 33 (expression -> ID .) ]
  ! RETURN          [ reduce using rule 33 (expression -> ID .) ]
  ! VAR             [ reduce using rule 33 (expression -> ID .) ]
  ! FMT             [ reduce using rule 33 (expression -> ID .) ]
  ! DEFER           [ reduce using rule 33 (expression -> ID .) ]
  ! DEFAULT         [ reduce using rule 33 (expression -> ID .) ]
  ! CONST           [ reduce using rule 33 (expression -> ID .) ]
  ! INT             [ reduce using rule 33 (expression -> ID .) ]
  ! FLOAT           [ reduce using rule 33 (expression -> ID .) ]
  ! $end            [ reduce using rule 33 (expression -> ID .) ]
  ! RCURLY          [ reduce using rule 33 (expression -> ID .) ]

    comparator                     shift and go to state 78

state 57

    (74) mathExpProd -> mathExp operator . mathExpProd
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    mathExp                        shift and go to state 28
    mathExpProd                    shift and go to state 86
    number                         shift and go to state 32

state 58

    (37) operator -> DIVIDE .

    INT             reduce using rule 37 (operator -> DIVIDE .)
    FLOAT           reduce using rule 37 (operator -> DIVIDE .)


state 59

    (38) operator -> MINUS .

    INT             reduce using rule 38 (operator -> MINUS .)
    FLOAT           reduce using rule 38 (operator -> MINUS .)


state 60

    (39) operator -> PLUS .

    INT             reduce using rule 39 (operator -> PLUS .)
    FLOAT           reduce using rule 39 (operator -> PLUS .)


state 61

    (40) operator -> TIMES .

    INT             reduce using rule 40 (operator -> TIMES .)
    FLOAT           reduce using rule 40 (operator -> TIMES .)


state 62

    (42) switch -> SWITCH ID . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 87


state 63

    (56) pila -> TYPE STACK . LBRACKETS RBRACKETS ID
    (57) pila -> TYPE STACK . INTERFACE LCURLY RCURLY
    (58) pila -> TYPE STACK . STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 88
    INTERFACE       shift and go to state 89
    STRUCT          shift and go to state 90


state 64

    (68) declaration -> VAR ID . ID
    (69) declaration -> VAR ID . ID EQUALSVAR number
    (70) declaration -> VAR ID . ID EQUALSVAR STR

    ID              shift and go to state 91


state 65

    (72) mathExp -> number operator . number
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    number                         shift and go to state 92

state 66

    (75) sentence -> FMT PERIOD . PRINTLN LPAREN STR RPAREN
    (76) sentence -> FMT PERIOD . PRINTF LPAREN STR RPAREN

    PRINTLN         shift and go to state 93
    PRINTF          shift and go to state 94


state 67

    (83) defer_statement -> DEFER line .

    ID              reduce using rule 83 (defer_statement -> DEFER line .)
    CASE            reduce using rule 83 (defer_statement -> DEFER line .)
    FOR             reduce using rule 83 (defer_statement -> DEFER line .)
    IF              reduce using rule 83 (defer_statement -> DEFER line .)
    FUNC            reduce using rule 83 (defer_statement -> DEFER line .)
    SWITCH          reduce using rule 83 (defer_statement -> DEFER line .)
    TYPE            reduce using rule 83 (defer_statement -> DEFER line .)
    RETURN          reduce using rule 83 (defer_statement -> DEFER line .)
    VAR             reduce using rule 83 (defer_statement -> DEFER line .)
    FMT             reduce using rule 83 (defer_statement -> DEFER line .)
    DEFER           reduce using rule 83 (defer_statement -> DEFER line .)
    DEFAULT         reduce using rule 83 (defer_statement -> DEFER line .)
    CONST           reduce using rule 83 (defer_statement -> DEFER line .)
    INT             reduce using rule 83 (defer_statement -> DEFER line .)
    FLOAT           reduce using rule 83 (defer_statement -> DEFER line .)
    $end            reduce using rule 83 (defer_statement -> DEFER line .)
    RCURLY          reduce using rule 83 (defer_statement -> DEFER line .)


state 68

    (82) case_statements -> DEFAULT TWODOTS . line
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    line                           shift and go to state 95
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 69

    (84) constant_declaration -> CONST variablenum .

    ID              reduce using rule 84 (constant_declaration -> CONST variablenum .)
    CASE            reduce using rule 84 (constant_declaration -> CONST variablenum .)
    FOR             reduce using rule 84 (constant_declaration -> CONST variablenum .)
    IF              reduce using rule 84 (constant_declaration -> CONST variablenum .)
    FUNC            reduce using rule 84 (constant_declaration -> CONST variablenum .)
    SWITCH          reduce using rule 84 (constant_declaration -> CONST variablenum .)
    TYPE            reduce using rule 84 (constant_declaration -> CONST variablenum .)
    RETURN          reduce using rule 84 (constant_declaration -> CONST variablenum .)
    VAR             reduce using rule 84 (constant_declaration -> CONST variablenum .)
    FMT             reduce using rule 84 (constant_declaration -> CONST variablenum .)
    DEFER           reduce using rule 84 (constant_declaration -> CONST variablenum .)
    DEFAULT         reduce using rule 84 (constant_declaration -> CONST variablenum .)
    CONST           reduce using rule 84 (constant_declaration -> CONST variablenum .)
    INT             reduce using rule 84 (constant_declaration -> CONST variablenum .)
    FLOAT           reduce using rule 84 (constant_declaration -> CONST variablenum .)
    $end            reduce using rule 84 (constant_declaration -> CONST variablenum .)
    RCURLY          reduce using rule 84 (constant_declaration -> CONST variablenum .)


state 70

    (85) variablenum -> ID . EQUALS number

    EQUALS          shift and go to state 96


state 71

    (5) value -> ID .

    ID              reduce using rule 5 (value -> ID .)
    CASE            reduce using rule 5 (value -> ID .)
    FOR             reduce using rule 5 (value -> ID .)
    IF              reduce using rule 5 (value -> ID .)
    FUNC            reduce using rule 5 (value -> ID .)
    SWITCH          reduce using rule 5 (value -> ID .)
    TYPE            reduce using rule 5 (value -> ID .)
    RETURN          reduce using rule 5 (value -> ID .)
    VAR             reduce using rule 5 (value -> ID .)
    FMT             reduce using rule 5 (value -> ID .)
    DEFER           reduce using rule 5 (value -> ID .)
    DEFAULT         reduce using rule 5 (value -> ID .)
    CONST           reduce using rule 5 (value -> ID .)
    INT             reduce using rule 5 (value -> ID .)
    FLOAT           reduce using rule 5 (value -> ID .)
    $end            reduce using rule 5 (value -> ID .)
    RCURLY          reduce using rule 5 (value -> ID .)


state 72

    (8) line -> ID EQUALSVAR value .

    ID              reduce using rule 8 (line -> ID EQUALSVAR value .)
    CASE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    FOR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    IF              reduce using rule 8 (line -> ID EQUALSVAR value .)
    FUNC            reduce using rule 8 (line -> ID EQUALSVAR value .)
    SWITCH          reduce using rule 8 (line -> ID EQUALSVAR value .)
    TYPE            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RETURN          reduce using rule 8 (line -> ID EQUALSVAR value .)
    VAR             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FMT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFER           reduce using rule 8 (line -> ID EQUALSVAR value .)
    DEFAULT         reduce using rule 8 (line -> ID EQUALSVAR value .)
    CONST           reduce using rule 8 (line -> ID EQUALSVAR value .)
    INT             reduce using rule 8 (line -> ID EQUALSVAR value .)
    FLOAT           reduce using rule 8 (line -> ID EQUALSVAR value .)
    $end            reduce using rule 8 (line -> ID EQUALSVAR value .)
    RCURLY          reduce using rule 8 (line -> ID EQUALSVAR value .)


state 73

    (20) line -> ID EQUALSVAR INT .
    (2) value -> INT .

  ! reduce/reduce conflict for ID resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CASE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FOR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for IF resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FUNC resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for SWITCH resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for TYPE resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RETURN resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for VAR resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FMT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFER resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for CONST resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for INT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for FLOAT resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for $end resolved using rule 2 (value -> INT .)
  ! reduce/reduce conflict for RCURLY resolved using rule 2 (value -> INT .)
    ID              reduce using rule 2 (value -> INT .)
    CASE            reduce using rule 2 (value -> INT .)
    FOR             reduce using rule 2 (value -> INT .)
    IF              reduce using rule 2 (value -> INT .)
    FUNC            reduce using rule 2 (value -> INT .)
    SWITCH          reduce using rule 2 (value -> INT .)
    TYPE            reduce using rule 2 (value -> INT .)
    RETURN          reduce using rule 2 (value -> INT .)
    VAR             reduce using rule 2 (value -> INT .)
    FMT             reduce using rule 2 (value -> INT .)
    DEFER           reduce using rule 2 (value -> INT .)
    DEFAULT         reduce using rule 2 (value -> INT .)
    CONST           reduce using rule 2 (value -> INT .)
    INT             reduce using rule 2 (value -> INT .)
    FLOAT           reduce using rule 2 (value -> INT .)
    $end            reduce using rule 2 (value -> INT .)
    RCURLY          reduce using rule 2 (value -> INT .)

  ! ID              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CASE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FOR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! IF              [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FUNC            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! SWITCH          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! TYPE            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RETURN          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! VAR             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FMT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFER           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! DEFAULT         [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! CONST           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! INT             [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! FLOAT           [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! $end            [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]
  ! RCURLY          [ reduce using rule 20 (line -> ID EQUALSVAR INT .) ]


state 74

    (50) array -> ID EQUALSVAR LBRACKETS . INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> ID EQUALSVAR LBRACKETS . RBRACKETS ID LCURLY elemSlice RCURLY

    INT             shift and go to state 97
    RBRACKETS       shift and go to state 98


state 75

    (16) line -> CASE INT TWODOTS . line
    (80) case_statements -> CASE INT TWODOTS . line
    (81) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    line                           shift and go to state 99
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 76

    (41) stamentFor -> FOR ID EQUALS . INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    INT             shift and go to state 100


state 77

    (43) consulta -> IF expression LCURLY . statements RCURLY
    (44) consulta -> IF expression LCURLY . statements RCURLY ELSE LCURLY statements RCURLY
    (45) statements -> . statement
    (46) statements -> . statement COMMA statements
    (47) statement -> . ID

    ID              shift and go to state 103

    statements                     shift and go to state 101
    statement                      shift and go to state 102

state 78

    (31) expression -> ID comparator . ID
    (32) expression -> ID comparator . INT

    ID              shift and go to state 104
    INT             shift and go to state 105


state 79

    (34) comparator -> COMPARE .

    ID              reduce using rule 34 (comparator -> COMPARE .)
    INT             reduce using rule 34 (comparator -> COMPARE .)


state 80

    (35) comparator -> MORETHAN .

    ID              reduce using rule 35 (comparator -> MORETHAN .)
    INT             reduce using rule 35 (comparator -> MORETHAN .)


state 81

    (36) comparator -> MINUSTHAN .

    ID              reduce using rule 36 (comparator -> MINUSTHAN .)
    INT             reduce using rule 36 (comparator -> MINUSTHAN .)


state 82

    (59) push -> FUNC PUSH LPAREN . ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 106


state 83

    (64) funcion -> FUNC ID LPAREN . param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (61) func_declaration -> FUNC ID LPAREN . RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (65) param_list -> . param
    (66) param_list -> . param_list COMMA param
    (67) param -> . value ID
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    RPAREN          shift and go to state 108
    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STR             shift and go to state 50
    ID              shift and go to state 71

    param_list                     shift and go to state 107
    param                          shift and go to state 109
    value                          shift and go to state 110

state 84

    (60) funcion -> FUNC value LPAREN . RPAREN ID LCURLY repeatLines RETURN ID RCURLY

    RPAREN          shift and go to state 111


state 85

    (28) retorno -> ID .
    (29) retorno -> ID . COMMA

    ID              reduce using rule 28 (retorno -> ID .)
    CASE            reduce using rule 28 (retorno -> ID .)
    FOR             reduce using rule 28 (retorno -> ID .)
    IF              reduce using rule 28 (retorno -> ID .)
    FUNC            reduce using rule 28 (retorno -> ID .)
    SWITCH          reduce using rule 28 (retorno -> ID .)
    TYPE            reduce using rule 28 (retorno -> ID .)
    RETURN          reduce using rule 28 (retorno -> ID .)
    VAR             reduce using rule 28 (retorno -> ID .)
    FMT             reduce using rule 28 (retorno -> ID .)
    DEFER           reduce using rule 28 (retorno -> ID .)
    DEFAULT         reduce using rule 28 (retorno -> ID .)
    CONST           reduce using rule 28 (retorno -> ID .)
    INT             reduce using rule 28 (retorno -> ID .)
    FLOAT           reduce using rule 28 (retorno -> ID .)
    $end            reduce using rule 28 (retorno -> ID .)
    RCURLY          reduce using rule 28 (retorno -> ID .)
    COMMA           shift and go to state 40


state 86

    (74) mathExpProd -> mathExp operator mathExpProd .

    ID              reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    CASE            reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    FOR             reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    IF              reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    FUNC            reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    SWITCH          reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    TYPE            reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    RETURN          reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    VAR             reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    FMT             reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    DEFER           reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    DEFAULT         reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    CONST           reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    INT             reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    FLOAT           reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    $end            reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)
    RCURLY          reduce using rule 74 (mathExpProd -> mathExp operator mathExpProd .)


state 87

    (42) switch -> SWITCH ID LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    repeatLines                    shift and go to state 112
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 88

    (56) pila -> TYPE STACK LBRACKETS . RBRACKETS ID

    RBRACKETS       shift and go to state 113


state 89

    (57) pila -> TYPE STACK INTERFACE . LCURLY RCURLY

    LCURLY          shift and go to state 114


state 90

    (58) pila -> TYPE STACK STRUCT . LCURLY ID LBRACKETS RBRACKETS value RCURLY

    LCURLY          shift and go to state 115


state 91

    (68) declaration -> VAR ID ID .
    (69) declaration -> VAR ID ID . EQUALSVAR number
    (70) declaration -> VAR ID ID . EQUALSVAR STR

    ID              reduce using rule 68 (declaration -> VAR ID ID .)
    CASE            reduce using rule 68 (declaration -> VAR ID ID .)
    FOR             reduce using rule 68 (declaration -> VAR ID ID .)
    IF              reduce using rule 68 (declaration -> VAR ID ID .)
    FUNC            reduce using rule 68 (declaration -> VAR ID ID .)
    SWITCH          reduce using rule 68 (declaration -> VAR ID ID .)
    TYPE            reduce using rule 68 (declaration -> VAR ID ID .)
    RETURN          reduce using rule 68 (declaration -> VAR ID ID .)
    VAR             reduce using rule 68 (declaration -> VAR ID ID .)
    FMT             reduce using rule 68 (declaration -> VAR ID ID .)
    DEFER           reduce using rule 68 (declaration -> VAR ID ID .)
    DEFAULT         reduce using rule 68 (declaration -> VAR ID ID .)
    CONST           reduce using rule 68 (declaration -> VAR ID ID .)
    INT             reduce using rule 68 (declaration -> VAR ID ID .)
    FLOAT           reduce using rule 68 (declaration -> VAR ID ID .)
    $end            reduce using rule 68 (declaration -> VAR ID ID .)
    RCURLY          reduce using rule 68 (declaration -> VAR ID ID .)
    EQUALSVAR       shift and go to state 116


state 92

    (72) mathExp -> number operator number .

    DIVIDE          reduce using rule 72 (mathExp -> number operator number .)
    MINUS           reduce using rule 72 (mathExp -> number operator number .)
    PLUS            reduce using rule 72 (mathExp -> number operator number .)
    TIMES           reduce using rule 72 (mathExp -> number operator number .)
    ID              reduce using rule 72 (mathExp -> number operator number .)
    CASE            reduce using rule 72 (mathExp -> number operator number .)
    FOR             reduce using rule 72 (mathExp -> number operator number .)
    IF              reduce using rule 72 (mathExp -> number operator number .)
    FUNC            reduce using rule 72 (mathExp -> number operator number .)
    SWITCH          reduce using rule 72 (mathExp -> number operator number .)
    TYPE            reduce using rule 72 (mathExp -> number operator number .)
    RETURN          reduce using rule 72 (mathExp -> number operator number .)
    VAR             reduce using rule 72 (mathExp -> number operator number .)
    FMT             reduce using rule 72 (mathExp -> number operator number .)
    DEFER           reduce using rule 72 (mathExp -> number operator number .)
    DEFAULT         reduce using rule 72 (mathExp -> number operator number .)
    CONST           reduce using rule 72 (mathExp -> number operator number .)
    INT             reduce using rule 72 (mathExp -> number operator number .)
    FLOAT           reduce using rule 72 (mathExp -> number operator number .)
    $end            reduce using rule 72 (mathExp -> number operator number .)
    RCURLY          reduce using rule 72 (mathExp -> number operator number .)


state 93

    (75) sentence -> FMT PERIOD PRINTLN . LPAREN STR RPAREN

    LPAREN          shift and go to state 117


state 94

    (76) sentence -> FMT PERIOD PRINTF . LPAREN STR RPAREN

    LPAREN          shift and go to state 118


state 95

    (82) case_statements -> DEFAULT TWODOTS line .

    ID              reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    CASE            reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    FOR             reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    IF              reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    FUNC            reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    SWITCH          reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    TYPE            reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    RETURN          reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    VAR             reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    FMT             reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    DEFER           reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    DEFAULT         reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    CONST           reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    INT             reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    FLOAT           reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    $end            reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)
    RCURLY          reduce using rule 82 (case_statements -> DEFAULT TWODOTS line .)


state 96

    (85) variablenum -> ID EQUALS . number
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    number                         shift and go to state 119

state 97

    (50) array -> ID EQUALSVAR LBRACKETS INT . RBRACKETS ID LCURLY elemArray RCURLY

    RBRACKETS       shift and go to state 120


state 98

    (53) slice -> ID EQUALSVAR LBRACKETS RBRACKETS . ID LCURLY elemSlice RCURLY

    ID              shift and go to state 121


state 99

    (16) line -> CASE INT TWODOTS line .
    (80) case_statements -> CASE INT TWODOTS line .
    (81) case_statements -> CASE INT TWODOTS line . case_statements
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line

  ! reduce/reduce conflict for ID resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CASE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FOR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for IF resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FUNC resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for SWITCH resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for TYPE resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RETURN resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for VAR resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FMT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFER resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for CONST resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for INT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for FLOAT resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for $end resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! reduce/reduce conflict for RCURLY resolved using rule 16 (line -> CASE INT TWODOTS line .)
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FOR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    IF              reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    VAR             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FMT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CONST           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    INT             reduce using rule 16 (line -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 16 (line -> CASE INT TWODOTS line .)
    $end            reduce using rule 16 (line -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 16 (line -> CASE INT TWODOTS line .)
    CASE            shift and go to state 122
    DEFAULT         shift and go to state 35

  ! CASE            [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 16 (line -> CASE INT TWODOTS line .) ]
  ! ID              [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! CASE            [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! FOR             [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! IF              [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! FUNC            [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! SWITCH          [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! TYPE            [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! RETURN          [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! VAR             [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! FMT             [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFER           [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! CONST           [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! INT             [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! FLOAT           [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! $end            [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! RCURLY          [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 123

state 100

    (41) stamentFor -> FOR ID EQUALS INT . DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 124


state 101

    (43) consulta -> IF expression LCURLY statements . RCURLY
    (44) consulta -> IF expression LCURLY statements . RCURLY ELSE LCURLY statements RCURLY

    RCURLY          shift and go to state 125


state 102

    (45) statements -> statement .
    (46) statements -> statement . COMMA statements

    RCURLY          reduce using rule 45 (statements -> statement .)
    COMMA           shift and go to state 126


state 103

    (47) statement -> ID .

    COMMA           reduce using rule 47 (statement -> ID .)
    RCURLY          reduce using rule 47 (statement -> ID .)


state 104

    (31) expression -> ID comparator ID .

    LCURLY          reduce using rule 31 (expression -> ID comparator ID .)
    ID              reduce using rule 31 (expression -> ID comparator ID .)
    CASE            reduce using rule 31 (expression -> ID comparator ID .)
    FOR             reduce using rule 31 (expression -> ID comparator ID .)
    IF              reduce using rule 31 (expression -> ID comparator ID .)
    FUNC            reduce using rule 31 (expression -> ID comparator ID .)
    SWITCH          reduce using rule 31 (expression -> ID comparator ID .)
    TYPE            reduce using rule 31 (expression -> ID comparator ID .)
    RETURN          reduce using rule 31 (expression -> ID comparator ID .)
    VAR             reduce using rule 31 (expression -> ID comparator ID .)
    FMT             reduce using rule 31 (expression -> ID comparator ID .)
    DEFER           reduce using rule 31 (expression -> ID comparator ID .)
    DEFAULT         reduce using rule 31 (expression -> ID comparator ID .)
    CONST           reduce using rule 31 (expression -> ID comparator ID .)
    INT             reduce using rule 31 (expression -> ID comparator ID .)
    FLOAT           reduce using rule 31 (expression -> ID comparator ID .)
    $end            reduce using rule 31 (expression -> ID comparator ID .)
    RCURLY          reduce using rule 31 (expression -> ID comparator ID .)


state 105

    (32) expression -> ID comparator INT .

    LCURLY          reduce using rule 32 (expression -> ID comparator INT .)
    ID              reduce using rule 32 (expression -> ID comparator INT .)
    CASE            reduce using rule 32 (expression -> ID comparator INT .)
    FOR             reduce using rule 32 (expression -> ID comparator INT .)
    IF              reduce using rule 32 (expression -> ID comparator INT .)
    FUNC            reduce using rule 32 (expression -> ID comparator INT .)
    SWITCH          reduce using rule 32 (expression -> ID comparator INT .)
    TYPE            reduce using rule 32 (expression -> ID comparator INT .)
    RETURN          reduce using rule 32 (expression -> ID comparator INT .)
    VAR             reduce using rule 32 (expression -> ID comparator INT .)
    FMT             reduce using rule 32 (expression -> ID comparator INT .)
    DEFER           reduce using rule 32 (expression -> ID comparator INT .)
    DEFAULT         reduce using rule 32 (expression -> ID comparator INT .)
    CONST           reduce using rule 32 (expression -> ID comparator INT .)
    INT             reduce using rule 32 (expression -> ID comparator INT .)
    FLOAT           reduce using rule 32 (expression -> ID comparator INT .)
    $end            reduce using rule 32 (expression -> ID comparator INT .)
    RCURLY          reduce using rule 32 (expression -> ID comparator INT .)


state 106

    (59) push -> FUNC PUSH LPAREN ID . STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 127


state 107

    (64) funcion -> FUNC ID LPAREN param_list . RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (66) param_list -> param_list . COMMA param

    RPAREN          shift and go to state 128
    COMMA           shift and go to state 129


state 108

    (61) func_declaration -> FUNC ID LPAREN RPAREN . LPAREN return_types RPAREN LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 130


state 109

    (65) param_list -> param .

    RPAREN          reduce using rule 65 (param_list -> param .)
    COMMA           reduce using rule 65 (param_list -> param .)


state 110

    (67) param -> value . ID

    ID              shift and go to state 131


state 111

    (60) funcion -> FUNC value LPAREN RPAREN . ID LCURLY repeatLines RETURN ID RCURLY

    ID              shift and go to state 132


state 112

    (42) switch -> SWITCH ID LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 133


state 113

    (56) pila -> TYPE STACK LBRACKETS RBRACKETS . ID

    ID              shift and go to state 134


state 114

    (57) pila -> TYPE STACK INTERFACE LCURLY . RCURLY

    RCURLY          shift and go to state 135


state 115

    (58) pila -> TYPE STACK STRUCT LCURLY . ID LBRACKETS RBRACKETS value RCURLY

    ID              shift and go to state 136


state 116

    (69) declaration -> VAR ID ID EQUALSVAR . number
    (70) declaration -> VAR ID ID EQUALSVAR . STR
    (48) number -> . INT
    (49) number -> . FLOAT

    STR             shift and go to state 138
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    number                         shift and go to state 137

state 117

    (75) sentence -> FMT PERIOD PRINTLN LPAREN . STR RPAREN

    STR             shift and go to state 139


state 118

    (76) sentence -> FMT PERIOD PRINTF LPAREN . STR RPAREN

    STR             shift and go to state 140


state 119

    (85) variablenum -> ID EQUALS number .

    ID              reduce using rule 85 (variablenum -> ID EQUALS number .)
    CASE            reduce using rule 85 (variablenum -> ID EQUALS number .)
    FOR             reduce using rule 85 (variablenum -> ID EQUALS number .)
    IF              reduce using rule 85 (variablenum -> ID EQUALS number .)
    FUNC            reduce using rule 85 (variablenum -> ID EQUALS number .)
    SWITCH          reduce using rule 85 (variablenum -> ID EQUALS number .)
    TYPE            reduce using rule 85 (variablenum -> ID EQUALS number .)
    RETURN          reduce using rule 85 (variablenum -> ID EQUALS number .)
    VAR             reduce using rule 85 (variablenum -> ID EQUALS number .)
    FMT             reduce using rule 85 (variablenum -> ID EQUALS number .)
    DEFER           reduce using rule 85 (variablenum -> ID EQUALS number .)
    DEFAULT         reduce using rule 85 (variablenum -> ID EQUALS number .)
    CONST           reduce using rule 85 (variablenum -> ID EQUALS number .)
    INT             reduce using rule 85 (variablenum -> ID EQUALS number .)
    FLOAT           reduce using rule 85 (variablenum -> ID EQUALS number .)
    $end            reduce using rule 85 (variablenum -> ID EQUALS number .)
    RCURLY          reduce using rule 85 (variablenum -> ID EQUALS number .)


state 120

    (50) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS . ID LCURLY elemArray RCURLY

    ID              shift and go to state 141


state 121

    (53) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID . LCURLY elemSlice RCURLY

    LCURLY          shift and go to state 142


state 122

    (80) case_statements -> CASE . INT TWODOTS line
    (81) case_statements -> CASE . INT TWODOTS line case_statements

    INT             shift and go to state 143


state 123

    (81) case_statements -> CASE INT TWODOTS line case_statements .

    ID              reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    CASE            reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    FOR             reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    IF              reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    FUNC            reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    SWITCH          reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    TYPE            reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    RETURN          reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    VAR             reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    FMT             reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFER           reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    DEFAULT         reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    CONST           reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    INT             reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    FLOAT           reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    $end            reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)
    RCURLY          reduce using rule 81 (case_statements -> CASE INT TWODOTS line case_statements .)


state 124

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA . ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 144


state 125

    (43) consulta -> IF expression LCURLY statements RCURLY .
    (44) consulta -> IF expression LCURLY statements RCURLY . ELSE LCURLY statements RCURLY

    ID              reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    CASE            reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    FOR             reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    IF              reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    FUNC            reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    SWITCH          reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    TYPE            reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    RETURN          reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    VAR             reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    FMT             reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFER           reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    CONST           reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    INT             reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    FLOAT           reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    $end            reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    RCURLY          reduce using rule 43 (consulta -> IF expression LCURLY statements RCURLY .)
    ELSE            shift and go to state 145


state 126

    (46) statements -> statement COMMA . statements
    (45) statements -> . statement
    (46) statements -> . statement COMMA statements
    (47) statement -> . ID

    ID              shift and go to state 103

    statement                      shift and go to state 102
    statements                     shift and go to state 146

state 127

    (59) push -> FUNC PUSH LPAREN ID STACK . COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 147


state 128

    (64) funcion -> FUNC ID LPAREN param_list RPAREN . ID LCURLY repeatLines RETURN ID RCURLY

    ID              shift and go to state 148


state 129

    (66) param_list -> param_list COMMA . param
    (67) param -> . value ID
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STR             shift and go to state 50
    ID              shift and go to state 71

    param                          shift and go to state 149
    value                          shift and go to state 110

state 130

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN . return_types RPAREN LCURLY repeatLines RCURLY
    (62) return_types -> . ID COMMA ID
    (63) return_types -> . ID

    ID              shift and go to state 150

    return_types                   shift and go to state 151

state 131

    (67) param -> value ID .

    RPAREN          reduce using rule 67 (param -> value ID .)
    COMMA           reduce using rule 67 (param -> value ID .)


state 132

    (60) funcion -> FUNC value LPAREN RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 152


state 133

    (42) switch -> SWITCH ID LCURLY repeatLines RCURLY .

    ID              reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    IF              reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    INT             reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    $end            reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 42 (switch -> SWITCH ID LCURLY repeatLines RCURLY .)


state 134

    (56) pila -> TYPE STACK LBRACKETS RBRACKETS ID .

    ID              reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CASE            reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FOR             reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    IF              reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FUNC            reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    SWITCH          reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    TYPE            reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RETURN          reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    VAR             reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FMT             reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFER           reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    DEFAULT         reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    CONST           reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    INT             reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    FLOAT           reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    $end            reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)
    RCURLY          reduce using rule 56 (pila -> TYPE STACK LBRACKETS RBRACKETS ID .)


state 135

    (57) pila -> TYPE STACK INTERFACE LCURLY RCURLY .

    ID              reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CASE            reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FOR             reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    IF              reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FUNC            reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    SWITCH          reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    TYPE            reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RETURN          reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    VAR             reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FMT             reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFER           reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    DEFAULT         reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    CONST           reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    INT             reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    FLOAT           reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    $end            reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)
    RCURLY          reduce using rule 57 (pila -> TYPE STACK INTERFACE LCURLY RCURLY .)


state 136

    (58) pila -> TYPE STACK STRUCT LCURLY ID . LBRACKETS RBRACKETS value RCURLY

    LBRACKETS       shift and go to state 153


state 137

    (69) declaration -> VAR ID ID EQUALSVAR number .

    ID              reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    CASE            reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    FOR             reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    IF              reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    FUNC            reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    SWITCH          reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    TYPE            reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    RETURN          reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    VAR             reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    FMT             reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFER           reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    DEFAULT         reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    CONST           reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    INT             reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    FLOAT           reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    $end            reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)
    RCURLY          reduce using rule 69 (declaration -> VAR ID ID EQUALSVAR number .)


state 138

    (70) declaration -> VAR ID ID EQUALSVAR STR .

    ID              reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    CASE            reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    FOR             reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    IF              reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    FUNC            reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    SWITCH          reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    TYPE            reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    RETURN          reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    VAR             reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    FMT             reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFER           reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    DEFAULT         reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    CONST           reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    INT             reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    FLOAT           reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    $end            reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)
    RCURLY          reduce using rule 70 (declaration -> VAR ID ID EQUALSVAR STR .)


state 139

    (75) sentence -> FMT PERIOD PRINTLN LPAREN STR . RPAREN

    RPAREN          shift and go to state 154


state 140

    (76) sentence -> FMT PERIOD PRINTF LPAREN STR . RPAREN

    RPAREN          shift and go to state 155


state 141

    (50) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID . LCURLY elemArray RCURLY

    LCURLY          shift and go to state 156


state 142

    (53) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY . elemSlice RCURLY
    (54) elemSlice -> . number
    (55) elemSlice -> . number COMMA elemSlice
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    elemSlice                      shift and go to state 157
    number                         shift and go to state 158

state 143

    (80) case_statements -> CASE INT . TWODOTS line
    (81) case_statements -> CASE INT . TWODOTS line case_statements

    TWODOTS         shift and go to state 159


state 144

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID . MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    MINUSTHAN       shift and go to state 160


state 145

    (44) consulta -> IF expression LCURLY statements RCURLY ELSE . LCURLY statements RCURLY

    LCURLY          shift and go to state 161


state 146

    (46) statements -> statement COMMA statements .

    RCURLY          reduce using rule 46 (statements -> statement COMMA statements .)


state 147

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA . ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 162


state 148

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID . LCURLY repeatLines RETURN ID RCURLY

    LCURLY          shift and go to state 163


state 149

    (66) param_list -> param_list COMMA param .

    RPAREN          reduce using rule 66 (param_list -> param_list COMMA param .)
    COMMA           reduce using rule 66 (param_list -> param_list COMMA param .)


state 150

    (62) return_types -> ID . COMMA ID
    (63) return_types -> ID .

    COMMA           shift and go to state 164
    RPAREN          reduce using rule 63 (return_types -> ID .)


state 151

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types . RPAREN LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 165


state 152

    (60) funcion -> FUNC value LPAREN RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    repeatLines                    shift and go to state 166
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 153

    (58) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS . RBRACKETS value RCURLY

    RBRACKETS       shift and go to state 167


state 154

    (75) sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .

    ID              reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    CASE            reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FOR             reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    IF              reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FUNC            reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    SWITCH          reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    TYPE            reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    RETURN          reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    VAR             reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FMT             reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    DEFER           reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    DEFAULT         reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    CONST           reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    INT             reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    FLOAT           reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    $end            reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)
    RCURLY          reduce using rule 75 (sentence -> FMT PERIOD PRINTLN LPAREN STR RPAREN .)


state 155

    (76) sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .

    ID              reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    CASE            reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FOR             reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    IF              reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FUNC            reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    SWITCH          reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    TYPE            reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    RETURN          reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    VAR             reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FMT             reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    DEFER           reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    DEFAULT         reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    CONST           reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    INT             reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    FLOAT           reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    $end            reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)
    RCURLY          reduce using rule 76 (sentence -> FMT PERIOD PRINTF LPAREN STR RPAREN .)


state 156

    (50) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY . elemArray RCURLY
    (51) elemArray -> . number
    (52) elemArray -> . number COMMA elemArray
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    elemArray                      shift and go to state 168
    number                         shift and go to state 169

state 157

    (53) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice . RCURLY

    RCURLY          shift and go to state 170


state 158

    (54) elemSlice -> number .
    (55) elemSlice -> number . COMMA elemSlice

    RCURLY          reduce using rule 54 (elemSlice -> number .)
    COMMA           shift and go to state 171


state 159

    (80) case_statements -> CASE INT TWODOTS . line
    (81) case_statements -> CASE INT TWODOTS . line case_statements
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    line                           shift and go to state 172
    case_statements                shift and go to state 22
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 160

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN . LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LEN             shift and go to state 173


state 161

    (44) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY . statements RCURLY
    (45) statements -> . statement
    (46) statements -> . statement COMMA statements
    (47) statement -> . ID

    ID              shift and go to state 103

    statements                     shift and go to state 174
    statement                      shift and go to state 102

state 162

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID . ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 175


state 163

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY . repeatLines RETURN ID RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    repeatLines                    shift and go to state 176
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 164

    (62) return_types -> ID COMMA . ID

    ID              shift and go to state 177


state 165

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 178


state 166

    (60) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 179


state 167

    (58) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS . value RCURLY
    (2) value -> . INT
    (3) value -> . FLOAT
    (4) value -> . STR
    (5) value -> . ID

    INT             shift and go to state 48
    FLOAT           shift and go to state 49
    STR             shift and go to state 50
    ID              shift and go to state 71

    value                          shift and go to state 180

state 168

    (50) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray . RCURLY

    RCURLY          shift and go to state 181


state 169

    (51) elemArray -> number .
    (52) elemArray -> number . COMMA elemArray

    RCURLY          reduce using rule 51 (elemArray -> number .)
    COMMA           shift and go to state 182


state 170

    (53) slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .

    ID              reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CASE            reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FOR             reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    IF              reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FUNC            reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    SWITCH          reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    TYPE            reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RETURN          reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    VAR             reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FMT             reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFER           reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    DEFAULT         reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    CONST           reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    INT             reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    FLOAT           reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    $end            reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)
    RCURLY          reduce using rule 53 (slice -> ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY .)


state 171

    (55) elemSlice -> number COMMA . elemSlice
    (54) elemSlice -> . number
    (55) elemSlice -> . number COMMA elemSlice
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    number                         shift and go to state 158
    elemSlice                      shift and go to state 183

state 172

    (80) case_statements -> CASE INT TWODOTS line .
    (81) case_statements -> CASE INT TWODOTS line . case_statements
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line

  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
    ID              reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    FOR             reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    IF              reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    FUNC            reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    SWITCH          reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    TYPE            reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    RETURN          reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    VAR             reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    FMT             reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    DEFER           reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    CONST           reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    INT             reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    FLOAT           reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    $end            reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    RCURLY          reduce using rule 80 (case_statements -> CASE INT TWODOTS line .)
    CASE            shift and go to state 122
    DEFAULT         shift and go to state 35

  ! CASE            [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]
  ! DEFAULT         [ reduce using rule 80 (case_statements -> CASE INT TWODOTS line .) ]

    case_statements                shift and go to state 123

state 173

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN . LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    LPAREN          shift and go to state 184


state 174

    (44) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements . RCURLY

    RCURLY          shift and go to state 185


state 175

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID . RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RPAREN          shift and go to state 186


state 176

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines . RETURN ID RCURLY

    RETURN          shift and go to state 187


state 177

    (62) return_types -> ID COMMA ID .

    RPAREN          reduce using rule 62 (return_types -> ID COMMA ID .)


state 178

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    repeatLines                    shift and go to state 188
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 179

    (60) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 189


state 180

    (58) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value . RCURLY

    RCURLY          shift and go to state 190


state 181

    (50) array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .

    ID              reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CASE            reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FOR             reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    IF              reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FUNC            reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    SWITCH          reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    TYPE            reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RETURN          reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    VAR             reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FMT             reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFER           reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    DEFAULT         reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    CONST           reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    INT             reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    FLOAT           reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    $end            reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)
    RCURLY          reduce using rule 50 (array -> ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY .)


state 182

    (52) elemArray -> number COMMA . elemArray
    (51) elemArray -> . number
    (52) elemArray -> . number COMMA elemArray
    (48) number -> . INT
    (49) number -> . FLOAT

    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    number                         shift and go to state 169
    elemArray                      shift and go to state 191

state 183

    (55) elemSlice -> number COMMA elemSlice .

    RCURLY          reduce using rule 55 (elemSlice -> number COMMA elemSlice .)


state 184

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN . ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 192


state 185

    (44) consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .

    ID              reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CASE            reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FOR             reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    IF              reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FUNC            reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    SWITCH          reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    TYPE            reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RETURN          reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    VAR             reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FMT             reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFER           reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    DEFAULT         reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    CONST           reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    INT             reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    FLOAT           reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    $end            reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)
    RCURLY          reduce using rule 44 (consulta -> IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY .)


state 186

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN . STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    STACK           shift and go to state 193


state 187

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN . ID RCURLY

    ID              shift and go to state 194


state 188

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 195


state 189

    (60) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 196


state 190

    (58) pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .

    ID              reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CASE            reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FOR             reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    IF              reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FUNC            reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    SWITCH          reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    TYPE            reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RETURN          reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    VAR             reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FMT             reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFER           reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    DEFAULT         reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    CONST           reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    INT             reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    FLOAT           reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    $end            reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)
    RCURLY          reduce using rule 58 (pila -> TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY .)


state 191

    (52) elemArray -> number COMMA elemArray .

    RCURLY          reduce using rule 52 (elemArray -> number COMMA elemArray .)


state 192

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID . RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    RPAREN          shift and go to state 197


state 193

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK . LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    LCURLY          shift and go to state 198


state 194

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID . RCURLY

    RCURLY          shift and go to state 199


state 195

    (61) func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .

    ID              reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    IF              reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    INT             reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    $end            reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 61 (func_declaration -> FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY .)


state 196

    (60) funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFER           reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFAULT         reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CONST           reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 60 (funcion -> FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 197

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN . DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY

    DOTCOMA         shift and go to state 200


state 198

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY . RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY

    RETURN          shift and go to state 201


state 199

    (64) funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .

    ID              reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CASE            reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FOR             reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    IF              reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FUNC            reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    SWITCH          reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    TYPE            reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RETURN          reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    VAR             reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FMT             reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFER           reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    DEFAULT         reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    CONST           reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    INT             reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    FLOAT           reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    $end            reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)
    RCURLY          reduce using rule 64 (funcion -> FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY .)


state 200

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA . ID PLUS PLUS LCURLY repeatLines RCURLY

    ID              shift and go to state 202


state 201

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN . APPEND LPAREN ID COMMA ID RPAREN RCURLY

    APPEND          shift and go to state 203


state 202

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID . PLUS PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 204


state 203

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND . LPAREN ID COMMA ID RPAREN RCURLY

    LPAREN          shift and go to state 205


state 204

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS . PLUS LCURLY repeatLines RCURLY

    PLUS            shift and go to state 206


state 205

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN . ID COMMA ID RPAREN RCURLY

    ID              shift and go to state 207


state 206

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS . LCURLY repeatLines RCURLY

    LCURLY          shift and go to state 208


state 207

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID . COMMA ID RPAREN RCURLY

    COMMA           shift and go to state 209


state 208

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY . repeatLines RCURLY
    (6) repeatLines -> . line
    (7) repeatLines -> . line repeatLines
    (8) line -> . ID EQUALSVAR value
    (9) line -> . stamentFor
    (10) line -> . consulta
    (11) line -> . push
    (12) line -> . funcion
    (13) line -> . array
    (14) line -> . slice
    (15) line -> . mathExpProd
    (16) line -> . CASE INT TWODOTS line
    (17) line -> . switch
    (18) line -> . pila
    (19) line -> . func_declaration
    (20) line -> . ID EQUALSVAR INT
    (21) line -> . retorno
    (22) line -> . declaration
    (23) line -> . sentence
    (24) line -> . return
    (25) line -> . defer_statement
    (26) line -> . case_statements
    (27) line -> . constant_declaration
    (41) stamentFor -> . FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY
    (43) consulta -> . IF expression LCURLY statements RCURLY
    (44) consulta -> . IF expression LCURLY statements RCURLY ELSE LCURLY statements RCURLY
    (59) push -> . FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY
    (60) funcion -> . FUNC value LPAREN RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (64) funcion -> . FUNC ID LPAREN param_list RPAREN ID LCURLY repeatLines RETURN ID RCURLY
    (50) array -> . ID EQUALSVAR LBRACKETS INT RBRACKETS ID LCURLY elemArray RCURLY
    (53) slice -> . ID EQUALSVAR LBRACKETS RBRACKETS ID LCURLY elemSlice RCURLY
    (73) mathExpProd -> . mathExp
    (74) mathExpProd -> . mathExp operator mathExpProd
    (42) switch -> . SWITCH ID LCURLY repeatLines RCURLY
    (56) pila -> . TYPE STACK LBRACKETS RBRACKETS ID
    (57) pila -> . TYPE STACK INTERFACE LCURLY RCURLY
    (58) pila -> . TYPE STACK STRUCT LCURLY ID LBRACKETS RBRACKETS value RCURLY
    (61) func_declaration -> . FUNC ID LPAREN RPAREN LPAREN return_types RPAREN LCURLY repeatLines RCURLY
    (28) retorno -> . ID
    (29) retorno -> . ID COMMA
    (30) retorno -> . RETURN retorno
    (68) declaration -> . VAR ID ID
    (69) declaration -> . VAR ID ID EQUALSVAR number
    (70) declaration -> . VAR ID ID EQUALSVAR STR
    (75) sentence -> . FMT PERIOD PRINTLN LPAREN STR RPAREN
    (76) sentence -> . FMT PERIOD PRINTF LPAREN STR RPAREN
    (77) return -> . RETURN expression
    (78) return -> . RETURN INT
    (79) return -> . RETURN sentence
    (83) defer_statement -> . DEFER line
    (80) case_statements -> . CASE INT TWODOTS line
    (81) case_statements -> . CASE INT TWODOTS line case_statements
    (82) case_statements -> . DEFAULT TWODOTS line
    (84) constant_declaration -> . CONST variablenum
    (71) mathExp -> . number
    (72) mathExp -> . number operator number
    (48) number -> . INT
    (49) number -> . FLOAT

    ID              shift and go to state 4
    CASE            shift and go to state 12
    FOR             shift and go to state 24
    IF              shift and go to state 25
    FUNC            shift and go to state 26
    SWITCH          shift and go to state 29
    TYPE            shift and go to state 30
    RETURN          shift and go to state 27
    VAR             shift and go to state 31
    FMT             shift and go to state 33
    DEFER           shift and go to state 34
    DEFAULT         shift and go to state 35
    CONST           shift and go to state 36
    INT             shift and go to state 13
    FLOAT           shift and go to state 37

    repeatLines                    shift and go to state 210
    line                           shift and go to state 3
    stamentFor                     shift and go to state 5
    consulta                       shift and go to state 6
    push                           shift and go to state 7
    funcion                        shift and go to state 8
    array                          shift and go to state 9
    slice                          shift and go to state 10
    mathExpProd                    shift and go to state 11
    switch                         shift and go to state 14
    pila                           shift and go to state 15
    func_declaration               shift and go to state 16
    retorno                        shift and go to state 17
    declaration                    shift and go to state 18
    sentence                       shift and go to state 19
    return                         shift and go to state 20
    defer_statement                shift and go to state 21
    case_statements                shift and go to state 22
    constant_declaration           shift and go to state 23
    mathExp                        shift and go to state 28
    number                         shift and go to state 32

state 209

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA . ID RPAREN RCURLY

    ID              shift and go to state 211


state 210

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines . RCURLY

    RCURLY          shift and go to state 212


state 211

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID . RPAREN RCURLY

    RPAREN          shift and go to state 213


state 212

    (41) stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .

    ID              reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CASE            reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FOR             reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    IF              reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FUNC            reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    SWITCH          reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    TYPE            reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RETURN          reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    VAR             reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FMT             reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFER           reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    DEFAULT         reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    CONST           reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    INT             reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    FLOAT           reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    $end            reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)
    RCURLY          reduce using rule 41 (stamentFor -> FOR ID EQUALS INT DOTCOMA ID MINUSTHAN LEN LPAREN ID RPAREN DOTCOMA ID PLUS PLUS LCURLY repeatLines RCURLY .)


state 213

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN . RCURLY

    RCURLY          shift and go to state 214


state 214

    (59) push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .

    ID              reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CASE            reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FOR             reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    IF              reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FUNC            reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    SWITCH          reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    TYPE            reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RETURN          reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    VAR             reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FMT             reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFER           reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    DEFAULT         reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    CONST           reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    INT             reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    FLOAT           reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    $end            reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)
    RCURLY          reduce using rule 59 (push -> FUNC PUSH LPAREN ID STACK COMMA ID ID RPAREN STACK LCURLY RETURN APPEND LPAREN ID COMMA ID RPAREN RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for RETURN in state 3 resolved as shift
WARNING: shift/reduce conflict for DIVIDE in state 32 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 32 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 32 resolved as shift
WARNING: shift/reduce conflict for TIMES in state 32 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 46 resolved as shift
WARNING: shift/reduce conflict for CASE in state 99 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 99 resolved as shift
WARNING: shift/reduce conflict for CASE in state 172 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 172 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (retorno -> ID)
WARNING: rejected rule (expression -> ID) in state 56
WARNING: reduce/reduce conflict in state 73 resolved using rule (value -> INT)
WARNING: rejected rule (line -> ID EQUALSVAR INT) in state 73
WARNING: reduce/reduce conflict in state 99 resolved using rule (line -> CASE INT TWODOTS line)
WARNING: rejected rule (case_statements -> CASE INT TWODOTS line) in state 99
WARNING: Rule (line -> ID EQUALSVAR INT) is never reduced
